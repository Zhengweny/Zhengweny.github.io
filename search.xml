<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>（Centos7）zabbixDB 改造 zabbixPG</title>
      <link href="/posts/25/"/>
      <url>/posts/25/</url>
      
        <content type="html"><![CDATA[<h1 id="（Centos7）zabbixDB-改造-zabbixPG"><a href="#（Centos7）zabbixDB-改造-zabbixPG" class="headerlink" title="（Centos7）zabbixDB 改造 zabbixPG"></a>（Centos7）zabbixDB 改造 zabbixPG</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本文档介绍在CentOS 7环境下将Zabbix数据库从MySQL迁移到PostgreSQL的完整操作流程。</p><h2 id="1-安装PostgreSQL相关包"><a href="#1-安装PostgreSQL相关包" class="headerlink" title="1. 安装PostgreSQL相关包"></a>1. 安装PostgreSQL相关包</h2><h3 id="1-1-解压安装包"><a href="#1-1-解压安装包" class="headerlink" title="1.1 解压安装包"></a>1.1 解压安装包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解压安装包</span></span><br><span class="line">tar xf zabbix-psql4.4.4对应的rpm包.tar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装PostgreSQL版本的Zabbix组件</span></span><br><span class="line"><span class="built_in">sudo</span> yum localinstall zabbix-nginx-conf-4.4.4-1.el7.noarch.rpm \</span><br><span class="line">                      zabbix-server-pgsql-4.4.4-1.el7.x86_64.rpm \</span><br><span class="line">                      zabbix-web-pgsql-4.4.4-1.el7.noarch.rpm \</span><br><span class="line">                      zabbix-web-4.4.4-1.el7.noarch.rpm</span><br></pre></td></tr></table></figure><h2 id="2-停止服务并备份配置"><a href="#2-停止服务并备份配置" class="headerlink" title="2. 停止服务并备份配置"></a>2. 停止服务并备份配置</h2><h3 id="2-1-停止相关服务"><a href="#2-1-停止相关服务" class="headerlink" title="2.1 停止相关服务"></a>2.1 停止相关服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 停止原有服务</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl stop nginx</span><br><span class="line"><span class="built_in">sudo</span> systemctl stop php-fpm</span><br><span class="line"><span class="built_in">sudo</span> systemctl stop mysql</span><br></pre></td></tr></table></figure><h3 id="2-2-备份配置文件"><a href="#2-2-备份配置文件" class="headerlink" title="2.2 备份配置文件"></a>2.2 备份配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 备份Zabbix服务器配置</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> /etc/zabbix/zabbix_server.conf /etc/zabbix/zabbix_server.conf_bak</span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份Nginx配置</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> /etc/nginx/nginx.conf /etc/nginx/nginx.conf_bak</span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份PHP-FPM配置</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> /etc/php-fpm.d/zabbix.conf /etc/php-fpm.d/zabbix.conf_bak</span><br></pre></td></tr></table></figure><h2 id="3-修改配置文件"><a href="#3-修改配置文件" class="headerlink" title="3. 修改配置文件"></a>3. 修改配置文件</h2><h3 id="3-1-修改Zabbix服务器配置"><a href="#3-1-修改Zabbix服务器配置" class="headerlink" title="3.1 修改Zabbix服务器配置"></a>3.1 修改Zabbix服务器配置</h3><p>编辑 <code>/etc/zabbix/zabbix_server.conf</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前配置</span></span><br><span class="line"><span class="built_in">cat</span> /etc/zabbix/zabbix_server.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改数据库连接配置</span></span><br><span class="line">DBHost=172.168.201.112    <span class="comment"># PostgreSQL服务器地址</span></span><br><span class="line">DBName=zabbix             <span class="comment"># PostgreSQL数据库名</span></span><br><span class="line">DBUser=zabbix             <span class="comment"># PostgreSQL用户名</span></span><br><span class="line">DBPassword=zabbix         <span class="comment"># PostgreSQL密码</span></span><br></pre></td></tr></table></figure><h3 id="3-2-修改Web界面配置"><a href="#3-2-修改Web界面配置" class="headerlink" title="3.2 修改Web界面配置"></a>3.2 修改Web界面配置</h3><p>编辑 <code>/etc/zabbix/web/zabbix.conf.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// Zabbix GUI configuration file.</span></span><br><span class="line"><span class="keyword">global</span> <span class="variable">$DB</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$DB</span>[<span class="string">&#x27;TYPE&#x27;</span>] = <span class="string">&#x27;POSTGRESQL&#x27;</span>;</span><br><span class="line"><span class="variable">$DB</span>[<span class="string">&#x27;SERVER&#x27;</span>] = <span class="string">&#x27;172.168.201.112&#x27;</span>;</span><br><span class="line"><span class="variable">$DB</span>[<span class="string">&#x27;PORT&#x27;</span>] = <span class="string">&#x27;5432&#x27;</span>;</span><br><span class="line"><span class="variable">$DB</span>[<span class="string">&#x27;DATABASE&#x27;</span>] = <span class="string">&#x27;zabbix_172_168_201_113&#x27;</span>;</span><br><span class="line"><span class="variable">$DB</span>[<span class="string">&#x27;USER&#x27;</span>] = <span class="string">&#x27;zabbix&#x27;</span>;</span><br><span class="line"><span class="variable">$DB</span>[<span class="string">&#x27;PASSWORD&#x27;</span>] = <span class="string">&#x27;zabbix&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Schema name. Used for IBM DB2 and PostgreSQL.</span></span><br><span class="line"><span class="variable">$DB</span>[<span class="string">&#x27;SCHEMA&#x27;</span>] = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$ZBX_SERVER</span> = <span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"><span class="variable">$ZBX_SERVER_PORT</span> = <span class="string">&#x27;10051&#x27;</span>;</span><br><span class="line"><span class="variable">$ZBX_SERVER_NAME</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$IMAGE_FORMAT_DEFAULT</span> = IMAGE_FORMAT_PNG;</span><br></pre></td></tr></table></figure><h2 id="4-清理旧配置"><a href="#4-清理旧配置" class="headerlink" title="4. 清理旧配置"></a>4. 清理旧配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除Nginx下的Zabbix配置文件</span></span><br><span class="line"><span class="built_in">rm</span> -f /etc/nginx/conf.d/*</span><br></pre></td></tr></table></figure><h2 id="5-创建数据目录"><a href="#5-创建数据目录" class="headerlink" title="5. 创建数据目录"></a>5. 创建数据目录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建JSON日志目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /data/zabbix_data/json_log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置目录权限</span></span><br><span class="line"><span class="built_in">chown</span> -R zabbix.zabbix /data/zabbix_data</span><br></pre></td></tr></table></figure><h2 id="6-导入数据库结构"><a href="#6-导入数据库结构" class="headerlink" title="6. 导入数据库结构"></a>6. 导入数据库结构</h2><h3 id="6-1-安装PostgreSQL客户端"><a href="#6-1-安装PostgreSQL客户端" class="headerlink" title="6.1 安装PostgreSQL客户端"></a>6.1 安装PostgreSQL客户端</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装psql命令</span></span><br><span class="line"><span class="built_in">sudo</span> yum install postgresql -y</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 如果遇到依赖问题，可以使用Docker方式。</p><h3 id="6-2-导入数据库结构"><a href="#6-2-导入数据库结构" class="headerlink" title="6.2 导入数据库结构"></a>6.2 导入数据库结构</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入基础表结构</span></span><br><span class="line">zcat /usr/share/doc/zabbix-server-pgsql-4.4.4/create.sql.gz | \</span><br><span class="line">psql -U zabbix -d zabbix_172_168_201_113 -h 172.168.201.112</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入TimescaleDB扩展（用于时序数据）</span></span><br><span class="line">zcat /usr/share/doc/zabbix-server-pgsql-4.4.4/timescaledb.sql.gz | \</span><br><span class="line">psql -U zabbix -d zabbix_172_168_201_113 -h 172.168.201.112</span><br></pre></td></tr></table></figure><h2 id="7-启动服务"><a href="#7-启动服务" class="headerlink" title="7. 启动服务"></a>7. 启动服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动PHP-FPM</span></span><br><span class="line">systemctl start php-fpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动Nginx</span></span><br><span class="line">systemctl start nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动Zabbix服务器</span></span><br><span class="line">systemctl start zabbix-server</span><br></pre></td></tr></table></figure><h2 id="8-后续操作"><a href="#8-后续操作" class="headerlink" title="8. 后续操作"></a>8. 后续操作</h2><ul><li>批量下发宏配置</li><li>安装和配置Filebeat日志收集器</li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li><strong>数据库连接：</strong> 确保PostgreSQL服务器地址和端口配置正确</li><li><strong>权限设置：</strong> 确保Zabbix用户对数据目录有适当权限</li><li><strong>服务依赖：</strong> 按顺序启动服务，确保依赖关系正确</li><li><strong>配置备份：</strong> 迁移前务必备份所有配置文件</li></ol>]]></content>
      
      
      <categories>
          
          <category> 部署类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zabbix </tag>
            
            <tag> PostgreSQL </tag>
            
            <tag> 数据库迁移 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于nginx的平滑升级</title>
      <link href="/posts/24/"/>
      <url>/posts/24/</url>
      
        <content type="html"><![CDATA[<h1 id="关于nginx的平滑升级"><a href="#关于nginx的平滑升级" class="headerlink" title="关于nginx的平滑升级"></a>关于nginx的平滑升级</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本文档介绍Nginx的平滑升级操作流程，包括源码编译安装和在线升级两种方式。</p><h2 id="1-源码编译安装方式"><a href="#1-源码编译安装方式" class="headerlink" title="1. 源码编译安装方式"></a>1. 源码编译安装方式</h2><h3 id="1-1-准备工作"><a href="#1-1-准备工作" class="headerlink" title="1.1 准备工作"></a>1.1 准备工作</h3><p><strong>注意：</strong> 以下步骤适用于源码编译安装的Nginx升级。</p><h4 id="①-确定原Nginx路径"><a href="#①-确定原Nginx路径" class="headerlink" title="① 确定原Nginx路径"></a>① 确定原Nginx路径</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查找原nginx安装路径（例：/do1cloud/nginx/）</span></span><br><span class="line">ps -ef | grep nginx</span><br></pre></td></tr></table></figure><h4 id="②-查看原Nginx编译参数"><a href="#②-查看原Nginx编译参数" class="headerlink" title="② 查看原Nginx编译参数"></a>② 查看原Nginx编译参数</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看原nginx的编译参数</span></span><br><span class="line">/do1cloud/nginx/sbin/nginx -V</span><br></pre></td></tr></table></figure><h4 id="③-准备编译参数"><a href="#③-准备编译参数" class="headerlink" title="③ 准备编译参数"></a>③ 准备编译参数</h4><p>根据原nginx的编译参数，准备新的编译配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/do1cloud/nginx/ \</span><br><span class="line">            --with-pcre \</span><br><span class="line">            --with-http_stub_status_module \</span><br><span class="line">            --with-http_v2_module \</span><br><span class="line">            --with-http_gzip_static_module \</span><br><span class="line">            --with-http_sub_module</span><br></pre></td></tr></table></figure><p><strong>说明：</strong> <code>--prefix=/do1cloud/nginx/</code> 是原nginx的安装路径</p><h3 id="1-2-编译安装"><a href="#1-2-编译安装" class="headerlink" title="1.2 编译安装"></a>1.2 编译安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入新版本nginx源码目录</span></span><br><span class="line"><span class="built_in">cd</span> /opt/nginx/nginx-1.22.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行配置</span></span><br><span class="line">./configure --prefix=/do1cloud/nginx/ \</span><br><span class="line">            --with-pcre \</span><br><span class="line">            --with-http_stub_status_module \</span><br><span class="line">            --with-http_v2_module \</span><br><span class="line">            --with-http_gzip_static_module \</span><br><span class="line">            --with-http_sub_module</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译（不要执行make install）</span></span><br><span class="line">make</span><br></pre></td></tr></table></figure><p><strong>重要：</strong> 替换前务必备份原nginx文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 备份原nginx可执行文件</span></span><br><span class="line"><span class="built_in">mv</span> /do1cloud/nginx/sbin/nginx /do1cloud/nginx/sbin/nginx_`<span class="built_in">date</span> +%F`</span><br></pre></td></tr></table></figure><h2 id="2-在线平滑升级方式"><a href="#2-在线平滑升级方式" class="headerlink" title="2. 在线平滑升级方式"></a>2. 在线平滑升级方式</h2><h3 id="2-1-上传和解压物料包"><a href="#2-1-上传和解压物料包" class="headerlink" title="2.1 上传和解压物料包"></a>2.1 上传和解压物料包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 上传物料包到指定目录</span></span><br><span class="line"><span class="comment"># 这里假设上传到 /root/nginx.zip</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证文件完整性</span></span><br><span class="line"><span class="built_in">md5sum</span> nginx.zip</span><br><span class="line"><span class="comment"># 414f3853d4621f4ad78cde893ac1467a nginx.zip</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压文件</span></span><br><span class="line">unzip nginx.zip</span><br><span class="line"><span class="built_in">cd</span> nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖包</span></span><br><span class="line">yum -y install *.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压nginx源码</span></span><br><span class="line">tar -zxf nginx-1.22.0.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压模块</span></span><br><span class="line">unzip nginx-sticky-module.zip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压OpenSSL</span></span><br><span class="line">tar -zxf openssl-1.0.2h.tar.gz</span><br></pre></td></tr></table></figure><h3 id="2-2-源码编译"><a href="#2-2-源码编译" class="headerlink" title="2.2 源码编译"></a>2.2 源码编译</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入nginx源码目录</span></span><br><span class="line"><span class="built_in">cd</span> nginx-1.22.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置编译参数</span></span><br><span class="line">./configure --prefix=/usr/local/nginx \</span><br><span class="line">            --add-module=/root/nginx/nginx-sticky-module \</span><br><span class="line">            --with-http_stub_status_module \</span><br><span class="line">            --with-http_v2_module \</span><br><span class="line">            --with-http_gzip_static_module \</span><br><span class="line">            --with-http_sub_module \</span><br><span class="line">            --with-stream \</span><br><span class="line">            --with-http_realip_module \</span><br><span class="line">            --with-http_gunzip_module \</span><br><span class="line">            --with-http_secure_link_module \</span><br><span class="line">            --with-http_slice_module \</span><br><span class="line">            --with-http_ssl_module \</span><br><span class="line">            --with-stream_ssl_module \</span><br><span class="line">            --with-stream_ssl_preread_module \</span><br><span class="line">            --with-openssl=/root/nginx/openssl-1.0.2h</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译（不要make install）</span></span><br><span class="line">make</span><br></pre></td></tr></table></figure><p><strong>说明：</strong> 编译参数可以通过原nginx的 <code>-V</code> 参数查看</p><h3 id="2-3-备份和替换"><a href="#2-3-备份和替换" class="headerlink" title="2.3 备份和替换"></a>2.3 备份和替换</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 备份原nginx可执行文件</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/nginx/sbin</span><br><span class="line"><span class="built_in">mv</span> nginx nginx_`<span class="built_in">date</span> +%F`</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制新编译的nginx</span></span><br><span class="line"><span class="built_in">cp</span> -a /root/nginx/nginx-1.22.0/objs/nginx .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证新nginx</span></span><br><span class="line">./nginx -V</span><br><span class="line">./nginx -t</span><br></pre></td></tr></table></figure><h3 id="2-4-平滑升级"><a href="#2-4-平滑升级" class="headerlink" title="2.4 平滑升级"></a>2.4 平滑升级</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看nginx进程</span></span><br><span class="line">ps -ef | grep nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送USR2信号，启动新进程</span></span><br><span class="line"><span class="built_in">kill</span> -USR2 `<span class="built_in">cat</span> /usr/local/nginx/logs/nginx.pid`</span><br><span class="line"></span><br><span class="line"><span class="comment"># 优雅关闭旧进程</span></span><br><span class="line"><span class="built_in">kill</span> -QUIT `<span class="built_in">cat</span> /usr/local/nginx/logs/nginx.pid.oldbin`</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者直接杀死旧进程</span></span><br><span class="line"><span class="built_in">kill</span> `<span class="built_in">cat</span> /usr/local/nginx/logs/nginx.pid.oldbin`</span><br><span class="line"><span class="comment"># kill -9 进程号也行</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启nginx</span></span><br><span class="line">/usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure><h2 id="3-常用编译参数"><a href="#3-常用编译参数" class="headerlink" title="3. 常用编译参数"></a>3. 常用编译参数</h2><h3 id="3-1-基础模块"><a href="#3-1-基础模块" class="headerlink" title="3.1 基础模块"></a>3.1 基础模块</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">--with-http_stub_status_module    <span class="comment"># 状态监控模块</span></span><br><span class="line">--with-http_v2_module             <span class="comment"># HTTP/2支持</span></span><br><span class="line">--with-http_gzip_static_module    <span class="comment"># 静态gzip模块</span></span><br><span class="line">--with-http_sub_module            <span class="comment"># 字符串替换模块</span></span><br></pre></td></tr></table></figure><h3 id="3-2-高级模块"><a href="#3-2-高级模块" class="headerlink" title="3.2 高级模块"></a>3.2 高级模块</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">--with-stream                     <span class="comment"># 流模块</span></span><br><span class="line">--with-http_realip_module         <span class="comment"># 真实IP模块</span></span><br><span class="line">--with-http_gunzip_module         <span class="comment"># gunzip模块</span></span><br><span class="line">--with-http_secure_link_module    <span class="comment"># 安全链接模块</span></span><br><span class="line">--with-http_slice_module          <span class="comment"># 分片模块</span></span><br><span class="line">--with-http_ssl_module            <span class="comment"># SSL模块</span></span><br><span class="line">--with-stream_ssl_module          <span class="comment"># 流SSL模块</span></span><br><span class="line">--with-stream_ssl_preread_module  <span class="comment"># 流SSL预读模块</span></span><br></pre></td></tr></table></figure><h3 id="3-3-示例配置"><a href="#3-3-示例配置" class="headerlink" title="3.3 示例配置"></a>3.3 示例配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Nginx 1.23.1版本配置示例</span></span><br><span class="line">./configure --prefix=/usr/local/nginx-1.23.1 \</span><br><span class="line">            --with-http_stub_status_module \</span><br><span class="line">            --with-http_v2_module \</span><br><span class="line">            --with-http_gzip_static_module \</span><br><span class="line">            --with-http_sub_module \</span><br><span class="line">            --with-stream \</span><br><span class="line">            --with-http_realip_module \</span><br><span class="line">            --with-http_gunzip_module \</span><br><span class="line">            --with-http_secure_link_module \</span><br><span class="line">            --with-http_slice_module \</span><br><span class="line">            --with-http_ssl_module \</span><br><span class="line">            --with-stream_ssl_module \</span><br><span class="line">            --with-stream_ssl_preread_module</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li><strong>备份重要：</strong> 升级前务必备份原nginx可执行文件和配置文件</li><li><strong>参数一致：</strong> 新版本编译参数要与原版本保持一致</li><li><strong>测试验证：</strong> 升级后要验证nginx配置和功能是否正常</li><li><strong>回滚准备：</strong> 准备回滚方案，以防升级失败</li></ol>]]></content>
      
      
      <categories>
          
          <category> 部署类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> 平滑升级 </tag>
            
            <tag> 源码编译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>skywalking集群部署</title>
      <link href="/posts/23/"/>
      <url>/posts/23/</url>
      
        <content type="html"><![CDATA[<h1 id="SkyWalking集群部署"><a href="#SkyWalking集群部署" class="headerlink" title="SkyWalking集群部署"></a>SkyWalking集群部署</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本文档介绍Apache SkyWalking APM系统的集群部署流程，包括OAP服务器和UI界面的配置。</p><p><strong>部署环境：</strong> 服务器 172.53.81.41-43</p><h2 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h2><h3 id="1-1-安装JDK"><a href="#1-1-安装JDK" class="headerlink" title="1.1 安装JDK"></a>1.1 安装JDK</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解压JDK到指定目录</span></span><br><span class="line">tar -zxvf jdk-17.0.9_linux-x64_bin.tar -C /usr/local</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /usr/local</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名目录</span></span><br><span class="line"><span class="built_in">mv</span> jdk-17.0.9_linux-x64_bin/ jdk17.0.9/</span><br></pre></td></tr></table></figure><h3 id="1-2-解压SkyWalking安装包"><a href="#1-2-解压SkyWalking安装包" class="headerlink" title="1.2 解压SkyWalking安装包"></a>1.2 解压SkyWalking安装包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解压SkyWalking到数据目录</span></span><br><span class="line">tar -zxvf apache-skywalking-apm-9.7.0.tar.gz -C /data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名目录</span></span><br><span class="line"><span class="built_in">mv</span> apache-skywalking-apm-9.7.0/ skywalking-apm-9.7.0/</span><br></pre></td></tr></table></figure><h2 id="2-OAP服务器配置"><a href="#2-OAP服务器配置" class="headerlink" title="2. OAP服务器配置"></a>2. OAP服务器配置</h2><h3 id="2-1-配置文件位置"><a href="#2-1-配置文件位置" class="headerlink" title="2.1 配置文件位置"></a>2.1 配置文件位置</h3><p>配置文件目录：<code>/data/skywalking-apm-9.7.0/config/application.yml</code></p><h3 id="2-2-集群配置"><a href="#2-2-集群配置" class="headerlink" title="2.2 集群配置"></a>2.2 集群配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cluster:</span></span><br><span class="line">  <span class="attr">selector:</span> <span class="string">$&#123;SW_CLUSTER:nacos&#125;</span>  <span class="comment"># 选择nacos作为集群管理</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">nacos:</span></span><br><span class="line">    <span class="attr">serviceName:</span> <span class="string">$&#123;SW_SERVICE_NAME:&quot;SkyWalking_OAP_Cluster&quot;&#125;</span></span><br><span class="line">    <span class="attr">hostPort:</span> <span class="string">$&#123;SW_CLUSTER_NACOS_HOST_PORT:172.53.81.12:8848,172.53.81.16:8848,172.53.81.19:8848&#125;</span>  <span class="comment"># nacos集群地址</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">$&#123;SW_CLUSTER_NACOS_NAMESPACE:&quot;04b86664-2160-440d-be08-138cc9aeaa92&quot;&#125;</span>  <span class="comment"># nacos命名空间</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">$&#123;SW_CLUSTER_NACOS_USERNAME:&quot;nacos&quot;&#125;</span>  <span class="comment"># nacos账号</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">$&#123;SW_CLUSTER_NACOS_PASSWORD:&quot;a2dVNTeFj4NXx@&quot;&#125;</span>  <span class="comment"># nacos密码</span></span><br><span class="line">    <span class="attr">accessKey:</span> <span class="string">$&#123;SW_CLUSTER_NACOS_ACCESSKEY:&quot;&quot;&#125;</span></span><br><span class="line">    <span class="attr">secretKey:</span> <span class="string">$&#123;SW_CLUSTER_NACOS_SECRETKEY:&quot;&quot;&#125;</span></span><br><span class="line">    <span class="attr">internalComHost:</span> <span class="string">$&#123;SW_CLUSTER_INTERNAL_COM_HOST:&quot;&quot;&#125;</span></span><br><span class="line">    <span class="attr">internalComPort:</span> <span class="string">$&#123;SW_CLUSTER_INTERNAL_COM_PORT:-1&#125;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-核心服务配置"><a href="#2-3-核心服务配置" class="headerlink" title="2.3 核心服务配置"></a>2.3 核心服务配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">core:</span></span><br><span class="line">  <span class="attr">selector:</span> <span class="string">$&#123;SW_CORE:default&#125;</span></span><br><span class="line">  <span class="attr">default:</span></span><br><span class="line">    <span class="attr">role:</span> <span class="string">$&#123;SW_CORE_ROLE:Mixed&#125;</span>  <span class="comment"># Mixed/Receiver/Aggregator</span></span><br><span class="line">    <span class="attr">restHost:</span> <span class="string">$&#123;SW_CORE_REST_HOST:0.0.0.0&#125;</span></span><br><span class="line">    <span class="attr">restPort:</span> <span class="string">$&#123;SW_CORE_REST_PORT:12800&#125;</span></span><br><span class="line">    <span class="attr">restContextPath:</span> <span class="string">$&#123;SW_CORE_REST_CONTEXT_PATH:/&#125;</span></span><br><span class="line">    <span class="attr">restMaxThreads:</span> <span class="string">$&#123;SW_CORE_REST_MAX_THREADS:200&#125;</span></span><br><span class="line">    <span class="attr">restIdleTimeOut:</span> <span class="string">$&#123;SW_CORE_REST_IDLE_TIMEOUT:30000&#125;</span></span><br><span class="line">    <span class="attr">restAcceptQueueSize:</span> <span class="string">$&#123;SW_CORE_REST_QUEUE_SIZE:0&#125;</span></span><br><span class="line">    <span class="attr">httpMaxRequestHeaderSize:</span> <span class="string">$&#123;SW_CORE_HTTP_MAX_REQUEST_HEADER_SIZE:8192&#125;</span></span><br><span class="line">    <span class="attr">gRPCHost:</span> <span class="string">$&#123;SW_CORE_GRPC_HOST:172.53.81.41&#125;</span>  <span class="comment"># 修改为当前服务器IP</span></span><br><span class="line">    <span class="attr">gRPCPort:</span> <span class="string">$&#123;SW_CORE_GRPC_PORT:11800&#125;</span></span><br><span class="line">    <span class="attr">maxConcurrentCallsPerConnection:</span> <span class="string">$&#123;SW_CORE_GRPC_MAX_CONCURRENT_CALL:0&#125;</span></span><br><span class="line">    <span class="attr">maxMessageSize:</span> <span class="string">$&#123;SW_CORE_GRPC_MAX_MESSAGE_SIZE:0&#125;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-存储配置"><a href="#2-4-存储配置" class="headerlink" title="2.4 存储配置"></a>2.4 存储配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">storage:</span></span><br><span class="line">  <span class="attr">selector:</span> <span class="string">$&#123;SW_STORAGE:elasticsearch&#125;</span>  <span class="comment"># 选择elasticsearch作为存储</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">elasticsearch:</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">$&#123;SW_NAMESPACE:&quot;&quot;&#125;</span></span><br><span class="line">    <span class="attr">clusterNodes:</span> <span class="number">172.53</span><span class="number">.81</span><span class="number">.47</span><span class="string">:9200,172.53.81.82:9200,172.53.81.83:9200</span>  <span class="comment"># ES集群地址</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">connectTimeout:</span> <span class="number">3000</span></span><br><span class="line">    <span class="attr">socketTimeout:</span> <span class="number">30000</span></span><br><span class="line">    <span class="attr">responseTimeout:</span> <span class="number">15000</span></span><br><span class="line">    <span class="attr">numHttpClientThread:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">$&#123;SW_ES_USER:&quot;&quot;&#125;</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">$&#123;SW_ES_PASSWORD:&quot;&quot;&#125;</span></span><br><span class="line">    <span class="attr">trustStorePath:</span> <span class="string">$&#123;SW_STORAGE_ES_SSL_JKS_PATH:&quot;&quot;&#125;</span></span><br><span class="line">    <span class="attr">trustStorePass:</span> <span class="string">$&#123;SW_STORAGE_ES_SSL_JKS_PASS:&quot;&quot;&#125;</span></span><br><span class="line">    <span class="attr">secretsManagementFile:</span> <span class="string">$&#123;SW_ES_SECRETS_MANAGEMENT_FILE:&quot;&quot;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="2-5-配置中心设置"><a href="#2-5-配置中心设置" class="headerlink" title="2.5 配置中心设置"></a>2.5 配置中心设置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">configuration:</span></span><br><span class="line">  <span class="attr">selector:</span> <span class="string">$&#123;SW_CONFIGURATION:nacos&#125;</span>  <span class="comment"># 选择nacos作为配置中心</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">nacos:</span></span><br><span class="line">    <span class="attr">serverAddr:</span> <span class="string">$&#123;SW_CONFIG_NACOS_SERVER_ADDR:172.53.81.12&#125;</span>  <span class="comment"># nacos地址</span></span><br><span class="line">    <span class="attr">port:</span> <span class="string">$&#123;SW_CONFIG_NACOS_SERVER_PORT:8848&#125;</span></span><br><span class="line">    <span class="attr">group:</span> <span class="string">$&#123;SW_CONFIG_NACOS_SERVER_GROUP:skywalking&#125;</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">$&#123;SW_CONFIG_NACOS_SERVER_NAMESPACE:&quot;04b86664-2160-440d-be08-138cc9aeaa92&quot;&#125;</span></span><br><span class="line">    <span class="attr">period:</span> <span class="string">$&#123;SW_CONFIG_NACOS_PERIOD:60&#125;</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">$&#123;SW_CONFIG_NACOS_USERNAME:&quot;nacos&quot;&#125;</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">$&#123;SW_CONFIG_NACOS_PASSWORD:&quot;a2dVNTeFj4NXx@&quot;&#125;</span></span><br><span class="line">    <span class="attr">accessKey:</span> <span class="string">$&#123;SW_CONFIG_NACOS_ACCESSKEY:&quot;&quot;&#125;</span></span><br><span class="line">    <span class="attr">secretKey:</span> <span class="string">$&#123;SW_CONFIG_NACOS_SECRETKEY:&quot;&quot;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="2-6-导出器配置"><a href="#2-6-导出器配置" class="headerlink" title="2.6 导出器配置"></a>2.6 导出器配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">exporter:</span></span><br><span class="line">  <span class="attr">selector:</span> <span class="string">$&#123;SW_EXPORTER:-&#125;</span></span><br><span class="line">  <span class="attr">default:</span></span><br><span class="line">    <span class="comment"># gRPC导出器</span></span><br><span class="line">    <span class="attr">enableGRPCMetrics:</span> <span class="string">$&#123;SW_EXPORTER_ENABLE_GRPC_METRICS:false&#125;</span></span><br><span class="line">    <span class="attr">gRPCTargetHost:</span> <span class="string">$&#123;SW_EXPORTER_GRPC_HOST:127.0.0.1&#125;</span></span><br><span class="line">    <span class="attr">gRPCTargetPort:</span> <span class="string">$&#123;SW_EXPORTER_GRPC_PORT:9870&#125;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Kafka导出器</span></span><br><span class="line">    <span class="attr">enableKafkaTrace:</span> <span class="string">$&#123;SW_EXPORTER_ENABLE_KAFKA_TRACE:true&#125;</span>  <span class="comment"># 启用Kafka追踪</span></span><br><span class="line">    <span class="attr">enableKafkaLog:</span> <span class="string">$&#123;SW_EXPORTER_ENABLE_KAFKA_LOG:false&#125;</span></span><br><span class="line">    <span class="attr">kafkaBootstrapServers:</span> <span class="string">$&#123;SW_EXPORTER_KAFKA_SERVERS:172.53.81.48:9092&#125;</span>  <span class="comment"># Kafka服务器地址</span></span><br><span class="line">    <span class="attr">kafkaProducerConfig:</span> <span class="string">$&#123;SW_EXPORTER_KAFKA_PRODUCER_CONFIG:&quot;&quot;&#125;</span></span><br><span class="line">    <span class="attr">kafkaTopicTrace:</span> <span class="string">$&#123;SW_EXPORTER_KAFKA_TOPIC_TRACE:skywalking-export-trace&#125;</span></span><br><span class="line">    <span class="attr">kafkaTopicLog:</span> <span class="string">$&#123;SW_EXPORTER_KAFKA_TOPIC_LOG:skywalking-export-log&#125;</span></span><br><span class="line">    <span class="attr">exportErrorStatusTraceOnly:</span> <span class="string">$&#123;SW_EXPORTER_KAFKA_TRACE_FILTER_ERROR:false&#125;</span></span><br></pre></td></tr></table></figure><h3 id="2-7-开发参数调整"><a href="#2-7-开发参数调整" class="headerlink" title="2.7 开发参数调整"></a>2.7 开发参数调整</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开发环境需要调整的参数</span></span><br><span class="line"><span class="attr">serviceNameMaxLength:</span> <span class="string">$&#123;SW_SERVICE_NAME_MAX_LENGTH:500&#125;</span></span><br><span class="line"><span class="attr">instanceNameMaxLength:</span> <span class="string">$&#123;SW_INSTANCE_NAME_MAX_LENGTH:500&#125;</span></span><br><span class="line"><span class="attr">endpointNameMaxLength:</span> <span class="string">$&#123;SW_ENDPOINT_NAME_MAX_LENGTH:240&#125;</span></span><br><span class="line"><span class="attr">maxQueryComplexity:</span> <span class="string">$&#123;SW_QUERY_MAX_QUERY_COMPLEXITY:10000&#125;</span></span><br></pre></td></tr></table></figure><h2 id="3-UI界面配置"><a href="#3-UI界面配置" class="headerlink" title="3. UI界面配置"></a>3. UI界面配置</h2><h3 id="3-1-端口配置"><a href="#3-1-端口配置" class="headerlink" title="3.1 端口配置"></a>3.1 端口配置</h3><p>UI界面默认端口：16899</p><h3 id="3-2-启动服务"><a href="#3-2-启动服务" class="headerlink" title="3.2 启动服务"></a>3.2 启动服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动OAP服务器</span></span><br><span class="line"><span class="built_in">cd</span> /data/skywalking-apm-9.7.0/bin</span><br><span class="line">./startup.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动UI界面</span></span><br><span class="line"><span class="built_in">cd</span> /data/skywalking-apm-9.7.0/webapp</span><br><span class="line">./startup.sh</span><br></pre></td></tr></table></figure><h2 id="4-端口说明"><a href="#4-端口说明" class="headerlink" title="4. 端口说明"></a>4. 端口说明</h2><ul><li><strong>OAP gRPC端口：</strong> 11800</li><li><strong>OAP REST端口：</strong> 12800  </li><li><strong>UI界面端口：</strong> 16899</li></ul><h2 id="5-注意事项"><a href="#5-注意事项" class="headerlink" title="5. 注意事项"></a>5. 注意事项</h2><ol><li><strong>IP地址修改：</strong> 每台服务器的gRPCHost需要修改为对应的服务器IP</li><li><strong>Nacos配置：</strong> 确保Nacos集群地址和命名空间配置正确</li><li><strong>ES集群：</strong> 确保Elasticsearch集群地址配置正确</li><li><strong>Kafka配置：</strong> 如果使用Kafka导出，确保Kafka服务器地址正确</li><li><strong>权限设置：</strong> 确保SkyWalking用户对数据目录有适当权限</li></ol>]]></content>
      
      
      <categories>
          
          <category> 部署类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 集群部署 </tag>
            
            <tag> skywalking </tag>
            
            <tag> APM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql部署及升级（docker-compose格式）</title>
      <link href="/posts/22/"/>
      <url>/posts/22/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL部署及升级（docker-compose格式）"><a href="#MySQL部署及升级（docker-compose格式）" class="headerlink" title="MySQL部署及升级（docker-compose格式）"></a>MySQL部署及升级（docker-compose格式）</h1><h2 id="一、传统安装"><a href="#一、传统安装" class="headerlink" title="一、传统安装"></a>一、传统安装</h2><ul><li>前提：准备安装包（tar.gz包）</li><li>详细部署参考：<a href="https://blog.csdn.net/weixin_50367873/article/details/134551859?spm=1001.2014.3001.5506">CSDN文档</a></li><li>MySQL升级参考：<a href="https://blog.csdn.net/m0_52985087/article/details/135169054">CSDN文档</a></li><li>MySQL驱动安装包下载：<a href="https://downloads.mysql.com/archives/c-j/">MySQL Connector</a><ul><li>Operating System：选择Platform Independent</li><li>解压后将jar包放到指定目录（如：&#x2F;data&#x2F;skywalking&#x2F;oap-libs）</li></ul></li></ul><p><strong>注意：</strong> MySQL配置文件路径：<code>/etc/my.cnf</code></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line">skip-grant-tables  <span class="comment"># 表示跳过密码</span></span><br></pre></td></tr></table></figure><ul><li>标准化重启：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/mysql &#123;start|stop|restart|reload|force-reload|status&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="修改密码方法"><a href="#修改密码方法" class="headerlink" title="修改密码方法"></a>修改密码方法</h3><ul><li>MySQL 5.7.6 及更高版本：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;new_password&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li>MySQL 5.7.5 及更低版本：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"><span class="keyword">SET</span> PASSWORD <span class="keyword">FOR</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> <span class="operator">=</span> PASSWORD(<span class="string">&#x27;new_password&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="二、docker-compose部署MySQL"><a href="#二、docker-compose部署MySQL" class="headerlink" title="二、docker-compose部署MySQL"></a>二、docker-compose部署MySQL</h2><h3 id="2-1-docker-compose配置示例"><a href="#2-1-docker-compose配置示例" class="headerlink" title="2.1 docker-compose配置示例"></a>2.1 docker-compose配置示例</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;1.0&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span>         <span class="comment"># 特权模式，权限更大</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">host</span>       <span class="comment"># 主机网络模式</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/data/mysql/mysql_data:/var/lib/mysql</span>   <span class="comment"># 数据目录映射</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/data/mysql/conf:/etc/mysql/conf.d</span>      <span class="comment"># 配置目录映射</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/localtime:/etc/localtime:ro</span>        <span class="comment"># 时区同步</span></span><br><span class="line">    <span class="attr">env_file:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/data/mysql/mysql.env</span>                   <span class="comment"># 环境变量文件</span></span><br><span class="line">    <span class="attr">command:</span> [</span><br><span class="line">      <span class="string">&#x27;--character-set-server=utf8&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;--collation-server=utf8_bin&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;--max_connections=3000&#x27;</span></span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><h3 id="2-2-环境变量文件"><a href="#2-2-环境变量文件" class="headerlink" title="2.2 环境变量文件"></a>2.2 环境变量文件</h3><p><code>/data/mysql/mysql.env</code> 内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MYSQL_ROOT_PASSWORD=sendi@1234</span><br><span class="line">MYSQL_ONETIME_PASSWORD=true</span><br></pre></td></tr></table></figure><h3 id="2-3-启动MySQL"><a href="#2-3-启动MySQL" class="headerlink" title="2.3 启动MySQL"></a>2.3 启动MySQL</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose -f mysql-docker-compose.yml up -d</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 部署类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker-compose </tag>
            
            <tag> mysql </tag>
            
            <tag> 部署升级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker及docker-compose部署</title>
      <link href="/posts/21/"/>
      <url>/posts/21/</url>
      
        <content type="html"><![CDATA[<p>1、解压并移动至&#x2F;usr&#x2F;bin下<br>（安装包：D:\Desktop\申迪\（采集器纳管）zabbix_server\A1-Ctyun安装PG版本\一、docker安装PG数据库\docker-19.03.13.tgz）</p><p>tar -xzvf docker-19.03.9.tgz</p><p>cp docker&#x2F;* &#x2F;usr&#x2F;bin</p><p>2、修改配置文件</p><p>vi &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;docker.service</p><p>[Unit]</p><p>Description&#x3D;DockerApplication Container Engine</p><p>Documentation&#x3D;<a href="https://docs.docker.com/">https://docs.docker.com</a></p><p>After&#x3D;network-online.targetfirewalld.service</p><p>Wants&#x3D;network-online.target</p><p>docker-19.03.13.tgz</p><p>[Service]</p><p>Type&#x3D;notify</p><p>ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;dockerd --data-root&#x3D;&#x2F;data&#x2F;docker</p><p>ExecReload&#x3D;&#x2F;bin&#x2F;kill -s HUP $MAINPID</p><p>LimitNOFILE&#x3D;infinity</p><p>LimitNPROC&#x3D;infinity</p><p>TimeoutStartSec&#x3D;0</p><p>Delegate&#x3D;yes</p><p>KillMode&#x3D;process</p><p>Restart&#x3D;on-failure</p><p>StartLimitBurst&#x3D;3</p><p>StartLimitInterval&#x3D;60s</p><p>[Install]</p><p>WantedBy&#x3D;multi-user.target</p><p>3、启动</p><p>systemctl daemon-reload</p><p>systemctl start docker</p><p>4、上传命令包（安装包：D:\Desktop\申迪\（采集器纳管）zabbix_server\A1-Ctyun安装PG版本\一、docker安装PG数据库\docker-compose-linux-x86_64）arm架构用另一个包</p><p>cp docker-compose-linux &#x2F;usr&#x2F;bin&#x2F;docker-compose</p>]]></content>
      
      
      <categories>
          
          <category> 部署类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> docker-compose </tag>
            
            <tag> 容器部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络接口利用率（带宽）</title>
      <link href="/posts/20/"/>
      <url>/posts/20/</url>
      
        <content type="html"><![CDATA[<p>需求如下：</p><p>网卡是千兆网卡，理论最大带宽为 125 MB&#x2F;s<br>（用ethool取speed可以看到，有些虚拟网卡没有）</p><p>1、定期通过ifconfig或者sar命令采集网卡的 这两个值<br>（脚本是间隔5s采集，然后分别相减得到速率）</p><p>RX bytes​​：接收的字节数（rxkB&#x2F;s ）</p><p>​​TX bytes​​：发送的字节数（txkB&#x2F;s）</p><p>2、计算总带宽使用量（单位时间内，网卡”进+出”所有流量的总和为总带宽使用量）：</p><p>总带宽使用量 (KB&#x2F;s) &#x3D; rxkB&#x2F;s + txkB&#x2F;s &#x3D; 12.34 + 56.78 &#x3D; 69.12 KB&#x2F;s</p><p>3、计算利用率百分比：</p><p>利用率 (%) &#x3D; (总带宽使用量 &#x2F; 网卡最大带宽) * 100</p><p>&#x3D; (69.12 &#x2F; 128000) * 100 ≈ 0.054%</p><p>注意：最大带宽 → （ethool取Speed值）&#x2F;8 → 1000&#x2F;8&#x3D;125兆</p><p>如果这个利用率很高 → 导致<br>上传&#x2F;下载速度变慢;数据迁移失败或中断；丢包和重传</p><p>网卡参数采集：</p><p>#!&#x2F;bin&#x2F;bash</p><p># 获取所有物理网卡名（排除lo、docker、虚拟网卡等）</p><p>ip -o link show | awk -F&#39;: &#39; &#39;{print $2}&#39; | grep -Ev<br>&#39;lo|docker|virbr|br-|veth|tun|tap&#39;</p><p>网络接口使用率如下：</p><p><strong>要用bash执行：bash net_interface_usage.sh $1</strong></p><p>#!&#x2F;bin&#x2F;bash</p><p>if [ $# -eq 0 ]; then</p><p>    echo &quot;Usage: $0 &lt;arguments&gt;&quot;</p><p>    exit 1</p><p>fi</p><p># 默认网卡名，可通过参数指定</p><p>IFACE&#x3D;$1</p><p># 采样间隔（秒）</p><p>INTERVAL&#x3D;5</p><p># 千兆网卡最大带宽（KB&#x2F;s）</p><p>MAX_BW&#x3D;128000</p><p># 检查网卡</p><p>if ! grep -q &quot;^ *$IFACE:&quot; &#x2F;proc&#x2F;net&#x2F;dev; then</p><p>    echo &quot;错误：网卡 $IFACE 不存在！&quot;</p><p>    exit 1</p><p>fi</p><p># 检查ifconfig命令</p><p>command -v ifconfig &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1 || { echo &quot;请先安装net-tools<br>(ifconfig)&quot;; exit 1; }</p><p># 获取初始流量</p><p>get_bytes() { awk -v iface&#x3D;&quot;$1&quot; &#39;$0 ~ iface&quot;:&quot; {gsub(&quot;:&quot;,<br>&quot;&quot;, $1); print $2, $10}&#39; &#x2F;proc&#x2F;net&#x2F;dev; }</p><p>read RX1 TX1 &lt; &lt;(get_bytes $IFACE)</p><p>sleep $INTERVAL</p><p>read RX2 TX2 &lt; &lt;(get_bytes $IFACE)</p><p># 计算速率（KB&#x2F;s）</p><p>RX_RATE&#x3D;$(awk &quot;BEGIN {printf \&quot;%.2f\&quot;,<br>($RX2-$RX1)&#x2F;$INTERVAL&#x2F;1024}&quot;)</p><p>TX_RATE&#x3D;$(awk &quot;BEGIN {printf \&quot;%.2f\&quot;,<br>($TX2-$TX1)&#x2F;$INTERVAL&#x2F;1024}&quot;)</p><p>TOTAL_RATE&#x3D;$(awk &quot;BEGIN {printf \&quot;%.2f\&quot;, $RX_RATE+$TX_RATE}&quot;)</p><p># 计算利用率（百分比，保留4位小数）</p><p>UTIL&#x3D;$(awk &quot;BEGIN {printf \&quot;%.4f\&quot;,<br>($TOTAL_RATE&#x2F;$MAX_BW)*100}&quot;)</p><p># 输出结果</p><p>echo &quot;时间: $(date &#39;+%F %T&#39;)&quot;</p><p>echo &quot;网卡: $IFACE&quot;</p><p>echo &quot;速率: RX ${RX_RATE}KB&#x2F;s, TX ${TX_RATE}KB&#x2F;s, 总计<br>${TOTAL_RATE}KB&#x2F;s&quot;</p><p>echo &quot;最大带宽: ${MAX_BW}KB&#x2F;s (固定为千兆网卡)&quot;</p><p>echo &quot;利用率: ${UTIL}%&quot;</p><p>融合</p><p>#!&#x2F;bin&#x2F;bash</p><p># 采样间隔（秒）</p><p>INTERVAL&#x3D;5</p><p># 千兆网卡最大带宽（KB&#x2F;s）</p><p>MAX_BW&#x3D;128000</p><p># 检查ifconfig命令</p><p>command -v ifconfig &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1 || { echo &quot;请先安装net-tools<br>(ifconfig)&quot;; exit 1; }</p><p># 获取所有物理网卡名（排除lo、docker、虚拟网卡等）</p><p>IFACES&#x3D;$(ip -o link show | awk -F&#39;: &#39; &#39;{print $2}&#39; | grep -Ev<br>&#39;lo|docker|virbr|br-|veth|tun|tap&#39;)</p><p>for IFACE in $IFACES; do</p><p>if ! grep -q &quot;^ *$IFACE:&quot; &#x2F;proc&#x2F;net&#x2F;dev; then</p><p>continue</p><p>fi</p><p>read RX1 TX1 &lt; &lt;(awk -v iface&#x3D;&quot;$IFACE&quot; &#39;$0 ~ iface&quot;:&quot;<br>{gsub(&quot;:&quot;, &quot;&quot;, $1); print $2, $10}&#39; &#x2F;proc&#x2F;net&#x2F;dev)</p><p>sleep $INTERVAL</p><p>read RX2 TX2 &lt; &lt;(awk -v iface&#x3D;&quot;$IFACE&quot; &#39;$0 ~ iface&quot;:&quot;<br>{gsub(&quot;:&quot;, &quot;&quot;, $1); print $2, $10}&#39; &#x2F;proc&#x2F;net&#x2F;dev)</p><p>RX_RATE&#x3D;$(awk &quot;BEGIN {printf \&quot;%.2f\&quot;,<br>($RX2-$RX1)&#x2F;$INTERVAL&#x2F;1024}&quot;)</p><p>TX_RATE&#x3D;$(awk &quot;BEGIN {printf \&quot;%.2f\&quot;,<br>($TX2-$TX1)&#x2F;$INTERVAL&#x2F;1024}&quot;)</p><p>TOTAL_RATE&#x3D;$(awk &quot;BEGIN {printf \&quot;%.2f\&quot;, $RX_RATE+$TX_RATE}&quot;)</p><p>UTIL&#x3D;$(awk &quot;BEGIN {printf \&quot;%.4f\&quot;,<br>($TOTAL_RATE&#x2F;$MAX_BW)*100}&quot;)</p><p>echo &quot;-----------------------------&quot;</p><p>echo &quot;时间: $(date &#39;+%F %T&#39;)&quot;</p><p>echo &quot;网卡: $IFACE&quot;</p><p>echo &quot;速率: RX ${RX_RATE}KB&#x2F;s, TX ${TX_RATE}KB&#x2F;s, 总计<br>${TOTAL_RATE}KB&#x2F;s&quot;</p><p>echo &quot;最大带宽: ${MAX_BW}KB&#x2F;s (固定为千兆网卡)&quot;</p><p>echo &quot;利用率: ${UTIL}%&quot;</p><p>done</p>]]></content>
      
      
      <categories>
          
          <category> 脚本类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络监控 </tag>
            
            <tag> 带宽 </tag>
            
            <tag> 接口利用率 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kafka流量监控及重平衡自愈</title>
      <link href="/posts/19/"/>
      <url>/posts/19/</url>
      
        <content type="html"><![CDATA[<p>[dxwgwh30@ywwlzhwgxt9vm999938 ~]$ cat<br>&#x2F;data&#x2F;kafka&#x2F;kafka-leader-rebalance-polling.sh</p><p>#!&#x2F;bin&#x2F;bash</p><p># Prometheus API 地址</p><p>PROMETHEUS_URL&#x3D;&quot;<a href="http://172.53.81.13:9090/api/v1/query/">http://172.53.81.13:9090/api/v1/query\</a>“</p><p># 公式一到公式四的 PromQL</p><p>QUERY1&#x3D;&#39;irate(node_network_transmit_bytes_total{instance&#x3D;&quot;172.53.81.11:9100&quot;,job&#x3D;&quot;node&quot;,device&#x3D;&quot;eth0&quot;}[1m])*8&#x2F;1000&#x2F;1000&#39;</p><p>QUERY2&#x3D;&#39;irate(node_network_transmit_bytes_total{instance&#x3D;&quot;172.53.81.38:9100&quot;,job&#x3D;&quot;node&quot;,device&#x3D;&quot;eth0&quot;}[1m])*8&#x2F;1000&#x2F;1000&#39;</p><p>QUERY3&#x3D;&#39;irate(node_network_transmit_bytes_total{instance&#x3D;&quot;172.53.81.40:9100&quot;,job&#x3D;&quot;node&quot;,device&#x3D;&quot;eth0&quot;}[1m])*8&#x2F;1000&#x2F;1000&#39;</p><p>QUERY4&#x3D;&#39;sum(kafka_consumergroup_lag{instance&#x3D;&quot;172.53.81.13:9308&quot;,topic&#x3D;~&quot;itmp_zabbix_data&quot;,consumergroup&#x3D;&quot;xingyun-itmp-pm-data-handler&quot;})<br>by (consumergroup, topic)&#39;</p><p># Kafka 自愈命令</p><p>KAFKA_SCRIPT&#x3D;&quot;&#x2F;data&#x2F;kafka&#x2F;kafka_2.12-0.10.2.0&#x2F;bin&#x2F;kafka-preferred-replica-election.sh&quot;</p><p>ZOOKEEPER&#x3D;&quot;ywwg-cdh04:2181,ywwg-cdh05:2181,ywwg-cdh06:2181&quot;</p><p># 函数：解析 JSON 返回值中的具体字段</p><p>parse_value() {</p><p>echo &quot;$1&quot; | grep -o &#39;&quot;value&quot;:[[][^]]*[]]&#39; | grep -o<br>&#39;[0-9.]\+&#39; | tail -n1</p><p>}</p><p># 打印巡检开始时间</p><p>echo &quot;kafka leader自动平衡巡检开始时间：$(date)&quot;</p><p># 发送请求并提取值</p><p>response1&#x3D;$(curl -sG --data-urlencode &quot;query&#x3D;$QUERY1&quot;<br>&quot;$PROMETHEUS_URL&quot;)</p><p>value1&#x3D;$(parse_value &quot;$response1&quot;)</p><p>response2&#x3D;$(curl -sG --data-urlencode &quot;query&#x3D;$QUERY2&quot;<br>&quot;$PROMETHEUS_URL&quot;)</p><p>value2&#x3D;$(parse_value &quot;$response2&quot;)</p><p>response3&#x3D;$(curl -sG --data-urlencode &quot;query&#x3D;$QUERY3&quot;<br>&quot;$PROMETHEUS_URL&quot;)</p><p>value3&#x3D;$(parse_value &quot;$response3&quot;)</p><p>response4&#x3D;$(curl -sG --data-urlencode &quot;query&#x3D;$QUERY4&quot;<br>&quot;$PROMETHEUS_URL&quot;)</p><p>value4&#x3D;$(parse_value &quot;$response4&quot;)</p><p># 检查是否有空值</p><p>if [[ -z &quot;$value1&quot; || -z &quot;$value2&quot; || -z &quot;$value3&quot; ||<br>-z &quot;$value4&quot; ]]; then</p><p>echo &quot;指标数据采集失败，退出程序&quot;</p><p>exit 1</p><p>fi</p><p># 打印调试信息</p><p>echo &quot;81.11的eth0端口传输流量: $value1 MB&#x2F;s&quot;</p><p>echo &quot;81.38的eth0端口传输流量: $value2 MB&#x2F;s&quot;</p><p>echo &quot;81.40的eth0端口传输流量: $value3 MB&#x2F;s&quot;</p><p>echo &quot;xingyun-itmp-pm-data-handler的积压lag: $value4 messages&quot;</p><p># 判断是否触发自愈</p><p>if (( $(echo &quot;$value1 &lt; 50&quot; | bc -l) || $(echo &quot;$value2 &lt;<br>50&quot; | bc -l) || $(echo &quot;$value3 &lt; 50&quot; | bc -l) )) &amp;&amp; ((<br>$(echo &quot;$value4 &lt; 100000&quot; | bc -l) )); then</p><p>echo &quot;触发自愈，执行 Kafka Leader 自动平衡&quot;</p><p>$KAFKA_SCRIPT --zookeeper &quot;$ZOOKEEPER&quot;</p><p>content&#x3D;&quot;（此通知不代表kafka有问题，主要让三个节点流量负载更加均衡）触发Kafka<br>Leader自愈，执行kafka-preferred-replica-election.sh自动平衡，81.11的eth0端口传输流量:<br>$value1 MB&#x2F;s，81.38的eth0端口传输流量: $value2<br>MB&#x2F;s，81.40的eth0端口传输流量: $value3<br>MB&#x2F;s，xingyun-itmp-pm-data-handler的积压lag: $value4 messages&quot;</p><p>curl -X POST <a href="http://172.53.81.13:4400/normalNotify/notify">http://172.53.81.13:4400/normalNotify/notify</a> \</p><p>-H &quot;Content-Type: application&#x2F;json&quot; \</p><p>-d &quot;{\&quot;title\&quot;: \&quot;kafka触发leader自愈\&quot;,\&quot;content\&quot;:<br>\&quot;$content\&quot;,\&quot;notifyTypeSet\&quot;: [\&quot;PROXY\&quot;]}&quot;</p><p>else</p><p>echo &quot;Kafka Leader正常，节点负载均衡&quot;</p><p>fi</p><p># 打印巡检结束时间</p><p>echo &quot;kafka leader自动平衡巡检结束时间：$(date)&quot;</p><p>echo &quot;------&quot;</p>]]></content>
      
      
      <categories>
          
          <category> 脚本类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kafka </tag>
            
            <tag> 监控 </tag>
            
            <tag> 重平衡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zabbix-server的解决无队列延迟</title>
      <link href="/posts/3022554096/"/>
      <url>/posts/3022554096/</url>
      
        <content type="html"><![CDATA[<h1 id="Zabbix-Server队列延迟解决方案"><a href="#Zabbix-Server队列延迟解决方案" class="headerlink" title="Zabbix Server队列延迟解决方案"></a>Zabbix Server队列延迟解决方案</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本文档介绍Zabbix Server队列延迟问题的解决方案，通过优化配置参数来提升Zabbix的性能和并发处理能力。</p><h2 id="1-系统环境"><a href="#1-系统环境" class="headerlink" title="1. 系统环境"></a>1. 系统环境</h2><ul><li><strong>CPU：</strong> 4核心</li><li><strong>内存：</strong> 16GB</li><li><strong>磁盘：</strong> 250GB</li></ul><h2 id="2-Zabbix-Server配置优化"><a href="#2-Zabbix-Server配置优化" class="headerlink" title="2. Zabbix Server配置优化"></a>2. Zabbix Server配置优化</h2><h3 id="2-1-基础配置"><a href="#2-1-基础配置" class="headerlink" title="2.1 基础配置"></a>2.1 基础配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前配置</span></span><br><span class="line"><span class="built_in">sudo</span> egrep -v <span class="string">&quot;^$|#&quot;</span> /etc/zabbix/zabbix_server.conf</span><br></pre></td></tr></table></figure><h3 id="2-2-核心参数配置"><a href="#2-2-核心参数配置" class="headerlink" title="2.2 核心参数配置"></a>2.2 核心参数配置</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基础服务配置</span></span><br><span class="line"><span class="attr">ListenPort</span>=<span class="number">10051</span></span><br><span class="line"><span class="attr">LogFile</span>=/var/log/zabbix/zabbix_server.log</span><br><span class="line"><span class="attr">LogFileSize</span>=<span class="number">1024</span></span><br><span class="line"><span class="attr">DebugLevel</span>=<span class="number">3</span></span><br><span class="line"><span class="attr">PidFile</span>=/var/run/zabbix/zabbix_server.pid</span><br><span class="line"><span class="attr">SocketDir</span>=/var/run/zabbix</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库连接配置</span></span><br><span class="line"><span class="attr">DBHost</span>=localhost</span><br><span class="line"><span class="attr">DBName</span>=zabbix</span><br><span class="line"><span class="attr">DBUser</span>=zabbix</span><br><span class="line"><span class="attr">DBPassword</span>=SqX&amp;<span class="number">9027</span>&lt;&gt;DhSl</span><br><span class="line"><span class="attr">DBSocket</span>=/usr/local/mysql/mysql.sock</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据导出配置</span></span><br><span class="line"><span class="attr">ExportDir</span>=/data/zabbix_data/json_log</span><br><span class="line"><span class="attr">ExportFileSize</span>=<span class="number">256</span>M</span><br></pre></td></tr></table></figure><h3 id="2-3-进程配置优化"><a href="#2-3-进程配置优化" class="headerlink" title="2.3 进程配置优化"></a>2.3 进程配置优化</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 轮询进程配置</span></span><br><span class="line"><span class="attr">StartPollers</span>=<span class="number">200</span>                    <span class="comment"># 主动轮询进程数</span></span><br><span class="line"><span class="attr">StartIPMIPollers</span>=<span class="number">0</span>                  <span class="comment"># IPMI轮询进程数</span></span><br><span class="line"><span class="attr">StartPreprocessors</span>=<span class="number">100</span>              <span class="comment"># 预处理进程数</span></span><br><span class="line"><span class="attr">StartPollersUnreachable</span>=<span class="number">10</span>          <span class="comment"># 不可达主机轮询进程数</span></span><br><span class="line"><span class="attr">StartTrappers</span>=<span class="number">50</span>                    <span class="comment"># 陷阱进程数</span></span><br><span class="line"><span class="attr">StartPingers</span>=<span class="number">100</span>                    <span class="comment"># Ping进程数</span></span><br><span class="line"><span class="attr">StartDiscoverers</span>=<span class="number">10</span>                 <span class="comment"># 发现进程数</span></span><br><span class="line"><span class="attr">StartTimers</span>=<span class="number">10</span>                      <span class="comment"># 定时器进程数</span></span><br><span class="line"><span class="attr">StartVMwareCollectors</span>=<span class="number">0</span>             <span class="comment"># VMware收集器进程数</span></span><br><span class="line"><span class="attr">StartProxyPollers</span>=<span class="number">150</span>               <span class="comment"># 代理轮询进程数</span></span><br><span class="line"><span class="attr">StartLLDProcessors</span>=<span class="number">5</span>                <span class="comment"># 低级别发现进程数</span></span><br><span class="line"><span class="attr">StartDBSyncers</span>=<span class="number">20</span>                   <span class="comment"># 数据库同步进程数</span></span><br></pre></td></tr></table></figure><p><strong>重要说明：</strong></p><ul><li><code>StartPollers=200</code>：每个进程可以处理10-20台主机的监控数据，200个进程可处理2000个监控项</li><li>配置足够好的情况下，可以设置为1000</li></ul><h3 id="2-4-缓存配置优化"><a href="#2-4-缓存配置优化" class="headerlink" title="2.4 缓存配置优化"></a>2.4 缓存配置优化</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 缓存大小配置</span></span><br><span class="line"><span class="attr">CacheSize</span>=<span class="number">8</span>G                        <span class="comment"># 主缓存大小（建议2G足够）</span></span><br><span class="line"><span class="attr">HistoryCacheSize</span>=<span class="number">2</span>G                 <span class="comment"># 历史数据缓存</span></span><br><span class="line"><span class="attr">HistoryIndexCacheSize</span>=<span class="number">2</span>G            <span class="comment"># 历史索引缓存</span></span><br><span class="line"><span class="attr">TrendCacheSize</span>=<span class="number">2</span>G                   <span class="comment"># 趋势数据缓存</span></span><br><span class="line"><span class="attr">ValueCacheSize</span>=<span class="number">8</span>G                   <span class="comment"># 值缓存（建议设置大些，提升性能）</span></span><br></pre></td></tr></table></figure><p><strong>缓存说明：</strong></p><ul><li><code>CacheSize</code>：一般不用设置太大，2G足够</li><li><code>ValueCacheSize</code>：此值设置越大，Zabbix性能越好</li></ul><h3 id="2-5-其他重要配置"><a href="#2-5-其他重要配置" class="headerlink" title="2.5 其他重要配置"></a>2.5 其他重要配置</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># VMware配置</span></span><br><span class="line"><span class="attr">VMwareFrequency</span>=<span class="number">60</span></span><br><span class="line"><span class="attr">VMwarePerfFrequency</span>=<span class="number">60</span></span><br><span class="line"><span class="attr">VMwareCacheSize</span>=<span class="number">256</span>K</span><br><span class="line"><span class="attr">VMwareTimeout</span>=<span class="number">60</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SNMP配置</span></span><br><span class="line"><span class="attr">SNMPTrapperFile</span>=/data/zabbix_data/zabbix_traps.tmp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据清理配置</span></span><br><span class="line"><span class="attr">HousekeepingFrequency</span>=<span class="number">0</span></span><br><span class="line"><span class="attr">MaxHousekeeperDelete</span>=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 超时和脚本配置</span></span><br><span class="line"><span class="attr">Timeout</span>=<span class="number">30</span></span><br><span class="line"><span class="attr">AlertScriptsPath</span>=/usr/lib/zabbix/alertscripts</span><br><span class="line"><span class="attr">ExternalScripts</span>=/usr/lib/zabbix/externalscripts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 慢查询日志</span></span><br><span class="line"><span class="attr">LogSlowQueries</span>=<span class="number">3000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计信息访问控制</span></span><br><span class="line"><span class="attr">StatsAllowedIP</span>=<span class="number">127.0</span>.<span class="number">0.1</span></span><br></pre></td></tr></table></figure><h2 id="3-Agent端配置优化"><a href="#3-Agent端配置优化" class="headerlink" title="3. Agent端配置优化"></a>3. Agent端配置优化</h2><p>除了Zabbix Server，如果Agent上报超时，也需要调整线程数：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Agent配置</span></span><br><span class="line"><span class="attr">StartAgents</span>=<span class="number">50</span>                      <span class="comment"># Agent线程数</span></span><br></pre></td></tr></table></figure><h2 id="4-性能优化建议"><a href="#4-性能优化建议" class="headerlink" title="4. 性能优化建议"></a>4. 性能优化建议</h2><ol><li><strong>进程数调整：</strong> 根据服务器配置和监控主机数量调整进程数</li><li><strong>缓存优化：</strong> 合理设置缓存大小，避免内存不足</li><li><strong>数据库优化：</strong> 确保数据库连接池配置合理</li><li><strong>网络优化：</strong> 检查网络延迟和带宽</li><li><strong>磁盘I&#x2F;O：</strong> 确保磁盘性能满足需求</li></ol><h2 id="5-监控指标"><a href="#5-监控指标" class="headerlink" title="5. 监控指标"></a>5. 监控指标</h2><ul><li>队列延迟时间</li><li>进程使用率</li><li>内存使用情况</li><li>数据库连接数</li><li>网络延迟</li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li><strong>配置备份：</strong> 修改配置前务必备份原配置文件</li><li><strong>逐步调整：</strong> 建议逐步调整参数，观察效果</li><li><strong>监控验证：</strong> 修改后要验证监控数据是否正常</li><li><strong>性能测试：</strong> 在生产环境应用前进行充分测试</li></ol>]]></content>
      
      
      <categories>
          
          <category> 维护类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zabbix </tag>
            
            <tag> 队列延迟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>filebeat无法读取json_log</title>
      <link href="/posts/2309029102/"/>
      <url>/posts/2309029102/</url>
      
        <content type="html"><![CDATA[<h1 id="Filebeat无法读取json-log问题排查"><a href="#Filebeat无法读取json-log问题排查" class="headerlink" title="Filebeat无法读取json_log问题排查"></a>Filebeat无法读取json_log问题排查</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本文档介绍Filebeat无法读取Zabbix json_log文件的故障排查过程，通过对比正常和异常日志来定位问题。</p><h2 id="1-正常日志分析"><a href="#1-正常日志分析" class="headerlink" title="1. 正常日志分析"></a>1. 正常日志分析</h2><h3 id="1-1-正常状态指标"><a href="#1-1-正常状态指标" class="headerlink" title="1.1 正常状态指标"></a>1.1 正常状态指标</h3><p>转换成可读格式会发现filebeat的open_files是50个，running也是50个：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;monitoring&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;metrics&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;filebeat&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;events&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;active&quot;</span><span class="punctuation">:</span> <span class="number">42</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;added&quot;</span><span class="punctuation">:</span> <span class="number">7743</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;done&quot;</span><span class="punctuation">:</span> <span class="number">7701</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;harvester&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;open_files&quot;</span><span class="punctuation">:</span> <span class="number">50</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;running&quot;</span><span class="punctuation">:</span> <span class="number">50</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>关键指标：</strong></p><ul><li><code>open_files: 50</code> - 打开的文件数</li><li><code>running: 50</code> - 运行的harvester数</li><li><code>events.active: 42</code> - 活跃事件数</li></ul><p><img src="/media/image1.png" alt="正常状态监控"></p><h2 id="2-错误日志分析"><a href="#2-错误日志分析" class="headerlink" title="2. 错误日志分析"></a>2. 错误日志分析</h2><h3 id="2-1-异常状态指标"><a href="#2-1-异常状态指标" class="headerlink" title="2.1 异常状态指标"></a>2.1 异常状态指标</h3><p>错误日志显示filebeat的open_files是0个，running也是0个，说明filebeat根本没有操作到zabbix的json_log文件：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;monitoring&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;metrics&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;filebeat&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;harvester&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;open_files&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;running&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;pipeline&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;events&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;active&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>问题指标：</strong></p><ul><li><code>open_files: 0</code> - 没有打开的文件</li><li><code>running: 0</code> - 没有运行的harvester</li><li><code>events.active: 0</code> - 没有活跃事件</li></ul><p><img src="/media/image2.png" alt="异常状态监控"></p><h2 id="3-问题排查"><a href="#3-问题排查" class="headerlink" title="3. 问题排查"></a>3. 问题排查</h2><h3 id="3-1-目录权限检查"><a href="#3-1-目录权限检查" class="headerlink" title="3.1 目录权限检查"></a>3.1 目录权限检查</h3><p>通过检查目录权限发现问题的根本原因：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查目录权限</span></span><br><span class="line">ll /data/zabbix_data/</span><br></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">total 12</span><br><span class="line">drwxr-xr-x 2 zabbix zabbix 12288 Jul 4 00:47 json_log</span><br></pre></td></tr></table></figure><h3 id="3-2-权限分析"><a href="#3-2-权限分析" class="headerlink" title="3.2 权限分析"></a>3.2 权限分析</h3><p>目录权限 <code>drwxr-xr-x</code> 表示：</p><ul><li><code>d</code> - 目录</li><li><code>rwx</code> - 所有者(zabbix)有读、写、执行权限</li><li><code>r-x</code> - 用户组有读、执行权限</li><li><code>r-x</code> - 其他用户有读、执行权限</li></ul><p><strong>问题原因：</strong> <code>/data/zabbix_data/json_log</code> 目录其他人缺少可执行权限</p><h2 id="4-解决方案"><a href="#4-解决方案" class="headerlink" title="4. 解决方案"></a>4. 解决方案</h2><h3 id="4-1-修复目录权限"><a href="#4-1-修复目录权限" class="headerlink" title="4.1 修复目录权限"></a>4.1 修复目录权限</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为其他用户添加执行权限</span></span><br><span class="line"><span class="built_in">chmod</span> o+x /data/zabbix_data/json_log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者为filebeat用户添加完整权限</span></span><br><span class="line"><span class="built_in">chmod</span> 755 /data/zabbix_data/json_log</span><br></pre></td></tr></table></figure><h3 id="4-2-验证修复效果"><a href="#4-2-验证修复效果" class="headerlink" title="4.2 验证修复效果"></a>4.2 验证修复效果</h3><p>修复权限后，检查filebeat监控指标：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看filebeat状态</span></span><br><span class="line">curl -s http://localhost:5066/stats | jq <span class="string">&#x27;.filebeat.harvester&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>期望结果：</strong></p><ul><li><code>open_files</code> 应该大于0</li><li><code>running</code> 应该大于0</li></ul><h2 id="5-预防措施"><a href="#5-预防措施" class="headerlink" title="5. 预防措施"></a>5. 预防措施</h2><ol><li><strong>权限检查：</strong> 部署前检查目录权限设置</li><li><strong>用户权限：</strong> 确保filebeat用户有足够权限访问日志目录</li><li><strong>监控告警：</strong> 设置filebeat状态监控告警</li><li><strong>文档记录：</strong> 记录权限要求，避免重复问题</li></ol><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li><strong>安全考虑：</strong> 不要过度开放权限，遵循最小权限原则</li><li><strong>用户配置：</strong> 确保filebeat以正确的用户身份运行</li><li><strong>路径检查：</strong> 验证filebeat配置中的日志路径是否正确</li><li><strong>重启服务：</strong> 修改权限后可能需要重启filebeat服务</li></ol>]]></content>
      
      
      <categories>
          
          <category> 维护类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日志 </tag>
            
            <tag> filebeat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>authentication failed身份验证失败问题</title>
      <link href="/posts/1960439147/"/>
      <url>/posts/1960439147/</url>
      
        <content type="html"><![CDATA[<h1 id="Authentication-Failed身份验证失败问题"><a href="#Authentication-Failed身份验证失败问题" class="headerlink" title="Authentication Failed身份验证失败问题"></a>Authentication Failed身份验证失败问题</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本文档介绍SSH身份验证失败问题的解决方案，包括root用户登录和用户访问控制配置。</p><h2 id="1-问题排查"><a href="#1-问题排查" class="headerlink" title="1. 问题排查"></a>1. 问题排查</h2><h3 id="1-1-检查SSH配置文件"><a href="#1-1-检查SSH配置文件" class="headerlink" title="1.1 检查SSH配置文件"></a>1.1 检查SSH配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑SSH配置文件</span></span><br><span class="line">vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><h2 id="2-解决方案"><a href="#2-解决方案" class="headerlink" title="2. 解决方案"></a>2. 解决方案</h2><h3 id="2-1-允许Root用户登录"><a href="#2-1-允许Root用户登录" class="headerlink" title="2.1 允许Root用户登录"></a>2.1 允许Root用户登录</h3><p><strong>修改配置：</strong> <code>PermitRootLogin</code> 改成 <code>yes</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑SSH配置文件</span></span><br><span class="line">vim /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到并修改以下行</span></span><br><span class="line">PermitRootLogin <span class="built_in">yes</span></span><br></pre></td></tr></table></figure><p><strong>说明：</strong> 不改yes的话，就是禁止root用户远程登录</p><h3 id="2-2-重启SSH服务"><a href="#2-2-重启SSH服务" class="headerlink" title="2.2 重启SSH服务"></a>2.2 重启SSH服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重启SSH服务</span></span><br><span class="line">systemctl restart sshd</span><br></pre></td></tr></table></figure><h2 id="3-用户访问控制"><a href="#3-用户访问控制" class="headerlink" title="3. 用户访问控制"></a>3. 用户访问控制</h2><h3 id="3-1-AllowUsers配置"><a href="#3-1-AllowUsers配置" class="headerlink" title="3.1 AllowUsers配置"></a>3.1 AllowUsers配置</h3><p>中石油环境使用 <code>AllowUsers</code> 配置来控制允许登录的用户：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑SSH配置文件</span></span><br><span class="line">vim /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加或修改AllowUsers配置</span></span><br><span class="line">AllowUsers root user1 user2</span><br></pre></td></tr></table></figure><p><strong>配置说明：</strong></p><ul><li>服务器只允许 <code>root</code>、<code>user1</code>、<code>user2</code> 登录</li><li>再有新用户产生，是不允许登录服务器的</li></ul><h3 id="3-2-应用配置"><a href="#3-2-应用配置" class="headerlink" title="3.2 应用配置"></a>3.2 应用配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注释后重启sshd即可</span></span><br><span class="line">systemctl restart sshd</span><br></pre></td></tr></table></figure><h2 id="4-验证配置"><a href="#4-验证配置" class="headerlink" title="4. 验证配置"></a>4. 验证配置</h2><h3 id="4-1-检查SSH服务状态"><a href="#4-1-检查SSH服务状态" class="headerlink" title="4.1 检查SSH服务状态"></a>4.1 检查SSH服务状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查SSH服务状态</span></span><br><span class="line">systemctl status sshd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查SSH端口监听</span></span><br><span class="line">netstat -tlnp | grep :22</span><br></pre></td></tr></table></figure><h3 id="4-2-测试连接"><a href="#4-2-测试连接" class="headerlink" title="4.2 测试连接"></a>4.2 测试连接</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试SSH连接</span></span><br><span class="line">ssh root@服务器IP</span><br></pre></td></tr></table></figure><h2 id="5-安全建议"><a href="#5-安全建议" class="headerlink" title="5. 安全建议"></a>5. 安全建议</h2><ol><li><strong>最小权限原则：</strong> 只允许必要的用户登录</li><li><strong>密钥认证：</strong> 建议使用SSH密钥而不是密码</li><li><strong>端口修改：</strong> 考虑修改默认SSH端口</li><li><strong>防火墙配置：</strong> 限制SSH访问来源IP</li><li><strong>日志监控：</strong> 监控SSH登录日志</li></ol><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li><strong>备份配置：</strong> 修改前备份SSH配置文件</li><li><strong>测试验证：</strong> 修改后要测试登录是否正常</li><li><strong>权限控制：</strong> 合理配置用户访问权限</li><li><strong>安全审计：</strong> 定期检查SSH配置安全性</li></ol>]]></content>
      
      
      <categories>
          
          <category> 维护类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> authentication </tag>
            
            <tag> 身份验证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ping不通：Operation not permitted</title>
      <link href="/posts/2259678932/"/>
      <url>/posts/2259678932/</url>
      
        <content type="html"><![CDATA[<h1 id="Ping不通：Operation-not-permitted"><a href="#Ping不通：Operation-not-permitted" class="headerlink" title="Ping不通：Operation not permitted"></a>Ping不通：Operation not permitted</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本文档介绍普通用户无法使用ping命令的故障排查和解决方案，这是一个常见的权限配置问题。</p><h2 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1. 问题描述"></a>1. 问题描述</h2><h3 id="1-1-故障现象"><a href="#1-1-故障现象" class="headerlink" title="1.1 故障现象"></a>1.1 故障现象</h3><p>root用户能ping成功，但普通用户ping不通，报错如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping: socket: Operation not permitted</span><br></pre></td></tr></table></figure><h3 id="1-2-问题影响"><a href="#1-2-问题影响" class="headerlink" title="1.2 问题影响"></a>1.2 问题影响</h3><ul><li>普通用户无法进行网络连通性测试</li><li>影响日常网络故障排查</li><li>可能影响自动化脚本执行</li></ul><h2 id="2-原因分析"><a href="#2-原因分析" class="headerlink" title="2. 原因分析"></a>2. 原因分析</h2><h3 id="2-1-权限机制"><a href="#2-1-权限机制" class="headerlink" title="2.1 权限机制"></a>2.1 权限机制</h3><p>正常情况下，ping命令的权限应为 <code>-rwsr-xr-x</code>，即带有SUID（Set User ID）权限的文件。</p><p><strong>权限说明：</strong></p><ul><li><code>s</code> 表示SUID权限</li><li>允许普通用户以root权限执行ping命令</li><li>一旦该权限被修改，则普通用户无法正常使用</li></ul><h3 id="2-2-常见原因"><a href="#2-2-常见原因" class="headerlink" title="2.2 常见原因"></a>2.2 常见原因</h3><ol><li><strong>权限被误修改：</strong> 系统维护过程中误删SUID权限</li><li><strong>安全策略：</strong> 某些安全策略禁用了ping的SUID权限</li><li><strong>文件损坏：</strong> ping可执行文件被损坏或权限异常</li></ol><h2 id="3-解决方法"><a href="#3-解决方法" class="headerlink" title="3. 解决方法"></a>3. 解决方法</h2><h3 id="3-1-检查当前权限"><a href="#3-1-检查当前权限" class="headerlink" title="3.1 检查当前权限"></a>3.1 检查当前权限</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查ping命令的当前权限</span></span><br><span class="line"><span class="built_in">ls</span> -la /bin/ping</span><br></pre></td></tr></table></figure><p><strong>正常权限示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-rwsr-xr-x 1 root root 64424 Mar 15 10:30 /bin/ping</span><br></pre></td></tr></table></figure><h3 id="3-2-修复权限"><a href="#3-2-修复权限" class="headerlink" title="3.2 修复权限"></a>3.2 修复权限</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为ping命令添加SUID权限</span></span><br><span class="line"><span class="built_in">chmod</span> u+s /bin/ping</span><br></pre></td></tr></table></figure><p><strong>命令说明：</strong></p><ul><li><code>u+s</code> 表示为用户（owner）添加SUID权限</li><li>需要root权限执行此命令</li></ul><h3 id="3-3-验证修复"><a href="#3-3-验证修复" class="headerlink" title="3.3 验证修复"></a>3.3 验证修复</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 验证权限是否修复</span></span><br><span class="line"><span class="built_in">ls</span> -la /bin/ping</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试普通用户ping功能</span></span><br><span class="line">su - normal_user -c <span class="string">&quot;ping -c 1 8.8.8.8&quot;</span></span><br></pre></td></tr></table></figure><h2 id="4-预防措施"><a href="#4-预防措施" class="headerlink" title="4. 预防措施"></a>4. 预防措施</h2><h3 id="4-1-权限监控"><a href="#4-1-权限监控" class="headerlink" title="4.1 权限监控"></a>4.1 权限监控</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建监控脚本检查ping权限</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">PING_PERM=$(<span class="built_in">ls</span> -la /bin/ping | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> [[ ! <span class="variable">$PING_PERM</span> =~ ^-rws ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;警告：ping命令SUID权限异常&quot;</span></span><br><span class="line">    <span class="comment"># 发送告警</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="4-2-安全考虑"><a href="#4-2-安全考虑" class="headerlink" title="4.2 安全考虑"></a>4.2 安全考虑</h3><ol><li><strong>最小权限原则：</strong> 只给必要的命令设置SUID权限</li><li><strong>定期检查：</strong> 定期检查系统关键命令的权限</li><li><strong>备份配置：</strong> 备份重要的权限配置</li><li><strong>文档记录：</strong> 记录权限修改的原因和过程</li></ol><h2 id="5-相关命令"><a href="#5-相关命令" class="headerlink" title="5. 相关命令"></a>5. 相关命令</h2><h3 id="5-1-权限管理"><a href="#5-1-权限管理" class="headerlink" title="5.1 权限管理"></a>5.1 权限管理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看所有SUID文件</span></span><br><span class="line">find / -perm -4000 -<span class="built_in">type</span> f 2&gt;/dev/null</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有SGID文件</span></span><br><span class="line">find / -perm -2000 -<span class="built_in">type</span> f 2&gt;/dev/null</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有可写文件</span></span><br><span class="line">find / -perm -2 -<span class="built_in">type</span> f 2&gt;/dev/null</span><br></pre></td></tr></table></figure><h3 id="5-2-网络测试"><a href="#5-2-网络测试" class="headerlink" title="5.2 网络测试"></a>5.2 网络测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用其他网络测试命令</span></span><br><span class="line">telnet 8.8.8.8 80</span><br><span class="line">nc -zv 8.8.8.8 80</span><br><span class="line">curl -I http://8.8.8.8</span><br></pre></td></tr></table></figure><h2 id="6-故障排查"><a href="#6-故障排查" class="headerlink" title="6. 故障排查"></a>6. 故障排查</h2><h3 id="6-1-检查步骤"><a href="#6-1-检查步骤" class="headerlink" title="6.1 检查步骤"></a>6.1 检查步骤</h3><ol><li><strong>确认用户权限：</strong> 检查用户是否有执行ping的权限</li><li><strong>检查文件完整性：</strong> 确认ping文件未被损坏</li><li><strong>检查系统策略：</strong> 确认没有安全策略阻止ping</li><li><strong>检查网络配置：</strong> 确认网络配置正常</li></ol><h3 id="6-2-替代方案"><a href="#6-2-替代方案" class="headerlink" title="6.2 替代方案"></a>6.2 替代方案</h3><p>如果无法修复ping权限，可以使用其他网络测试方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用telnet测试端口连通性</span></span><br><span class="line">telnet 目标IP 端口</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用nc测试端口连通性</span></span><br><span class="line">nc -zv 目标IP 端口</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用curl测试HTTP连通性</span></span><br><span class="line">curl -I http://目标IP</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li><strong>权限安全：</strong> 修改系统权限时要谨慎，避免安全风险</li><li><strong>备份重要：</strong> 修改前备份相关配置</li><li><strong>测试验证：</strong> 修改后要充分测试功能</li><li><strong>文档记录：</strong> 记录修改过程和原因</li></ol><h2 id="经验总结"><a href="#经验总结" class="headerlink" title="经验总结"></a>经验总结</h2><ul><li>ping命令需要SUID权限才能被普通用户使用</li><li>权限问题通常由误操作或安全策略导致</li><li>修复权限后要验证功能是否正常</li><li>建议设置权限监控，及时发现异常</li></ul>]]></content>
      
      
      <categories>
          
          <category> 维护类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ping </tag>
            
            <tag> 网络故障 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次zabbix反复重启（Too many open files）</title>
      <link href="/posts/3052044412/"/>
      <url>/posts/3052044412/</url>
      
        <content type="html"><![CDATA[<h1 id="记一次zabbix反复重启（Too-many-open-files）"><a href="#记一次zabbix反复重启（Too-many-open-files）" class="headerlink" title="记一次zabbix反复重启（Too many open files）"></a>记一次zabbix反复重启（Too many open files）</h1><h2 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zabbix_server [407]: failed to open <span class="built_in">log</span> file: [24] Too many open files</span><br><span class="line">zabbix_server [407]: failed to write [cannot accept incoming IPC connection: [24] Too many open files] into <span class="built_in">log</span> file</span><br></pre></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="1-修改系统全局配置"><a href="#1-修改系统全局配置" class="headerlink" title="1. 修改系统全局配置"></a>1. 修改系统全局配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">tee</span> -a /etc/sysctl.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">fs.file-max = 1000000  # 原文件没有配置这个，先配置了65535，但是没有成功</span></span><br><span class="line"><span class="string">fs.nr_open = 2000000</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> sysctl -p</span><br></pre></td></tr></table></figure><h3 id="2-修改用户限制"><a href="#2-修改用户限制" class="headerlink" title="2. 修改用户限制"></a>2. 修改用户限制</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">tee</span> -a /etc/security/limits.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">zabbix soft nofile 65535</span></span><br><span class="line"><span class="string">zabbix hard nofile 65535</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><h3 id="3-创建systemd服务覆盖配置"><a href="#3-创建systemd服务覆盖配置" class="headerlink" title="3. 创建systemd服务覆盖配置"></a>3. 创建systemd服务覆盖配置</h3><p><strong>告诉管理工具实际生效！！不改前两步无效</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> /etc/systemd/system/zabbix-server.service.d</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/systemd/system/zabbix-server.service.d/override.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[Service]</span></span><br><span class="line"><span class="string">LimitNOFILE=65535</span></span><br><span class="line"><span class="string">LimitMEMLOCK=infinity</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><h3 id="4-重启观察日志"><a href="#4-重启观察日志" class="headerlink" title="4. 重启观察日志"></a>4. 重启观察日志</h3><h2 id="核心问题分析"><a href="#核心问题分析" class="headerlink" title="核心问题分析"></a>核心问题分析</h2><p>Zabbix需要同时打开<strong>大量网络连接和文件</strong>，但系统默认允许的数量太少，导致Zabbix崩溃重启。</p><h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><p>想象给Zabbix「扩容」，分三步走：</p><h3 id="扩大系统总容量（仓库）"><a href="#扩大系统总容量（仓库）" class="headerlink" title="扩大系统总容量（仓库）"></a>扩大系统总容量（仓库）</h3><ul><li><strong>命令</strong>: <code>fs.file-max = 1000000</code></li><li><strong>作用</strong>: 整个Linux系统最多允许100万个文件&#x2F;连接（默认可能只有几万）</li><li><strong>文件</strong>: <code>/etc/sysctl.conf</code></li><li><strong>风险</strong>: ⭕ 很低（只是放宽上限，不影响实际使用）</li></ul><h3 id="放开单个软件的限制（仓库给个人发名额）"><a href="#放开单个软件的限制（仓库给个人发名额）" class="headerlink" title="放开单个软件的限制（仓库给个人发名额）"></a>放开单个软件的限制（仓库给个人发名额）</h3><ul><li><strong>命令</strong>:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zabbix soft nofile 65535</span><br><span class="line">zabbix hard nofile 65535</span><br></pre></td></tr></table></figure></li><li><strong>作用</strong>: 允许Zabbix软件最多打开<strong>6.5万个</strong>文件&#x2F;连接</li><li><strong>文件</strong>: <code>/etc/security/limits.conf</code></li><li><strong>风险</strong>: ⚠️ 中（设置太高可能导致资源泄露，但6.5万很安全）</li></ul><h3 id="最关键的一步：告诉管理工具实际生效-🚨"><a href="#最关键的一步：告诉管理工具实际生效-🚨" class="headerlink" title="最关键的一步：告诉管理工具实际生效 🚨"></a>最关键的一步：告诉管理工具实际生效 🚨</h3><ul><li><strong>命令</strong>:<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">LimitNOFILE</span>=<span class="number">65535</span></span><br></pre></td></tr></table></figure></li><li><strong>作用</strong>: 强制系统管理器给Zabbix发放6.5万名额（不改这个前两步无效！）</li><li><strong>文件</strong>: <code>/etc/systemd/system/zabbix-server.service.d/override.conf</code></li><li><strong>风险</strong>: ✅ 无（必须做，否则前功尽弃）</li></ul><h2 id="验证是否成功"><a href="#验证是否成功" class="headerlink" title="验证是否成功"></a>验证是否成功</h2><p>执行后重启服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /proc/$(pgrep zabbix_server)/limits | grep <span class="string">&quot;Max open files&quot;</span></span><br></pre></td></tr></table></figure><p>输出看到 <strong>65535</strong> 就成功了！</p>]]></content>
      
      
      <categories>
          
          <category> 故障类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zabbix </tag>
            
            <tag> open files </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kafka配置文件-重要参数</title>
      <link href="/posts/899768981/"/>
      <url>/posts/899768981/</url>
      
        <content type="html"><![CDATA[<p>+—————————————–+——————————————————–+——————————————————————————————————————————————————–+<br>| 参数名称                                | 默认值                                                 | 参数释义                                                                                                                                               |<br>+—————————————–+——————————————————–+——————————————————————————————————————————————————–+<br>| auto.create.topics.enable               | true                                                   | 是否开启自动创建主题功能                                                                                                                               |<br>|                                         |                                                        |                                                                                                                                                        |<br>|                                         |                                                        | <strong>不建议开启</strong>，设置为false，建议直接用脚本的形式去创建主题即可                                                                                        |<br>+—————————————–+——————————————————–+——————————————————————————————————————————————————–+<br>| auto.leader.rebalance.enable            | true                                                   | 是否开启leader再均衡的功能                                                                                                                             |<br>|                                         |                                                        |                                                                                                                                                        |<br>|                                         |                                                        | <strong>不建议开启</strong>，可能会引起客户端一定时间的阻塞，当leader节点不平衡时，建议用kafka-preferred-replica-election.sh去重平衡                                |<br>+—————————————–+——————————————————–+——————————————————————————————————————————————————–+<br>| background.threads                      | producer                                               | 消息的压缩类型。kafka支持的压缩类型有Gzip、Snappy、LZ4等。                                                                                             |<br>|                                         |                                                        |                                                                                                                                                        |<br>|                                         |                                                        | 默认值”producer”表示根据生产者使用的压缩类型压缩，也就是说，生产者不管是否压缩信息，或者使用何种压缩方式都会被”broker”端继承。                         |<br>|                                         |                                                        |                                                                                                                                                        |<br>|                                         |                                                        | <strong>“uncompressed”表示不启用压缩</strong>                                                                                                                       |<br>+—————————————–+——————————————————–+——————————————————————————————————————————————————–+<br>| delete.topic.enable                     | true                                                   | 是否可以删除主题，<strong>生产环境中建议写true</strong>                                                                                                             |<br>+—————————————–+——————————————————–+——————————————————————————————————————————————————–+<br>| leader.imbalance.check.interval.seconds | 300                                                    | 检查leader是否分布不均衡的周期                                                                                                                         |<br>+—————————————–+——————————————————–+——————————————————————————————————————————————————–+<br>| leader.imbalance.per.broker.percentage  | 10                                                     | 允许leader不均衡比例，超过这个值就会出发leader再均衡操作                                                                                               |<br>|                                         |                                                        |                                                                                                                                                        |<br>|                                         |                                                        | （前提是auto.leader.rebalance设定为true）                                                                                                              |<br>+—————————————–+——————————————————–+——————————————————————————————————————————————————–+<br>| log.flush.interval.messages             | 9223372035854775807                                    | 如果日志文件中的消息在存入磁盘前的数量达到这个参数所设定的阈值时，则会强制将这些刷新日志文件到磁盘中。                                                 |<br>|                                         |                                                        |                                                                                                                                                        |<br>|                                         | (Long.MAX_VALUE)                                       | 消息在写入磁盘前还要经历一层操作系统页缓存，如果期间发生掉电，则这些页缓存中的消息会丢失，调小这个参数的大小会增大消息的可靠性，但会降低系统的整体性。 |<br>|                                         |                                                        |                                                                                                                                                        |<br>|                                         |                                                        | 不建议kafka强制刷盘，<strong>刷盘任务应该应交由操作系统去调配</strong>，这种同步刷盘的操作非常影响性能。<strong>（看第4点）</strong>                                             |<br>+—————————————–+——————————————————–+——————————————————————————————————————————————————–+<br>| log.retention.bytes                     | -1 (表示无穷大)                                        | 所有日志文件的大小                                                                                                                                     |<br>+—————————————–+——————————————————–+——————————————————————————————————————————————————–+<br>| log.segment.bytes                       | 1073741824 (1GB)                                       | 单个日志分段                                                                                                                                           |<br>+—————————————–+——————————————————–+——————————————————————————————————————————————————–+<br>| log.cleanup.policy                      | delete&#x2F;compact                                         | **delete:**清除整个日志分段(log.retention)                                                                                                             |<br>|                                         |                                                        |                                                                                                                                                        |<br>|                                         |                                                        | <strong>compact</strong>:日志压缩，针对相同key的消息                                                                                                                |<br>+—————————————–+——————————————————–+——————————————————————————————————————————————————–+<br>| num.partitions                          | 1                                                      | 基于auto.create.topics.enable默认为true时，默认创建分区为1才会生效，<strong>但这个参数不建议开启，手动创建分区即可</strong>                                         |<br>+—————————————–+——————————————————–+——————————————————————————————————————————————————–+<br>| 基础配置1 ： zk.connect                 | zookeeper集群地址                                      |                                                                                                                                                        |<br>+—————————————–+——————————————————–+——————————————————————————————————————————————————–+<br>| 基础配置2 ： listeners                  | protocoll:&#x2F;&#x2F;hostname1:port1，...                      | broker监听客户端连接的地址列表                                                                                                                         |<br>+—————————————–+——————————————————–+——————————————————————————————————————————————————–+<br>| 基础配置3 ： broker.id                  | [设置从0开始，按1递增的数字，比如0,1,2,3...等]{.mark} |                                                                                                                                                        |<br>+—————————————–+——————————————————–+——————————————————————————————————————————————————–+</p><p>1、创建主题：kafka-topic.sh脚本来创建（例如创建一个分区数为4、副本因子为2的主题名为topic-demo）</p><p>bin&#x2F;kafka-topic.sh --zookeeper<br>ywwg-cdh04:2181,ywwg-cdh05:2181,ywwg-cdh06:2181 --create --topic<br>topic-demo --partitions 4 --replication-factor 2</p><p>创建完的分区，kafka会在log.dir和log.dirs参数配置的目录下创建相应的主题分区，默认为&#x2F;tmp&#x2F;kafka-logs，分区数*副本因子&#x3D;创建的文件数量（如例子所示，4*2&#x3D;8），在其中一个broker看只有2个文件夹的话，那另外的6个就分布在其他broker上。</p><p>2、查看分区副本分配的细节（可以看到分区和副本都对应分布到哪些broker上）：</p><p><strong>注：只有leader副本提供对外读写服务，follow副本（即除leader副本外的副本）只负责在内部进行消息同步。如果一个分区的leader不可用，其实就意味着整个分区变得不可用，此时kafka就会从剩余的副本中挑选一个新的作为leader</strong></p><p>&#x2F;data&#x2F;kafka&#x2F;kafka_2.12-0.10.2.0&#x2F;bin&#x2F;kafka-topics.sh --zookeeper<br>ywwg-cdh04:2181,ywwg-cdh05:2181,ywwg-cdh06:2181 --describe --topic<br>zabbix_item_data</p><p>Topic:zabbix_item_data PartitionCount:3 ReplicationFactor:2 Configs:</p><p>Topic: zabbix_item_data Partition: 0 Leader: 2 Replicas: 2,0 Isr: 2,0</p><p>Topic: zabbix_item_data Partition: 1 Leader: 0 Replicas: 0,1 Isr: 1,0</p><p>Topic: zabbix_item_data Partition: 2 Leader: 1 Replicas: 1,2 Isr: 1,2</p><p>3、重平衡的办法：</p><p>&#x2F;data&#x2F;kafka&#x2F;kafka_2.12-0.10.2.0&#x2F;bin&#x2F;kafka-topics.sh --zookeeper<br>ywwg-cdh04:2181,ywwg-cdh05:2181,ywwg-cdh06:2181 --describe --topic<br>zabbix_item_data</p><p>Topic:zabbix_item_data PartitionCount:3 ReplicationFactor:2 Configs:</p><p>Topic: zabbix_item_data Partition: 0 Leader: 2 Replicas: 2,0 Isr: 2,0</p><p>Topic: zabbix_item_data Partition: 1 Leader: 2 Replicas: 0,1 Isr: 1,0</p><p>Topic: zabbix_item_data Partition: 2 Leader: 1 Replicas: 1,2 Isr: 1,2</p><p>如例子所示，Leader节点2负载最高，Leader节点0负载最低，这种情况下，就是负载失衡，需要进行重平衡操作</p><p>重平衡命令：</p><p>&#x2F;data&#x2F;kafka&#x2F;kafka_2.12-0.10.2.0&#x2F;bin&#x2F;kafka-preferred-replica-election.sh<br>--zookeeper ywwg-cdh04:2181,ywwg-cdh05:2181,ywwg-cdh06:2181</p><p>4、操作系统调配刷盘任务**（[ I&#x2F;O 性能调优]{.mark}）**：</p><p>1）vm.dirty_backgroup_ratio参数：当脏页数量达到系统内存的百分之几时会触发刷盘，<strong>一般设置小于10即可，不建议设置为0</strong></p><p>cat &#x2F;proc&#x2F;sys&#x2F;vm&#x2F;dirty_background_ratio</p><p>vim &#x2F;etc&#x2F;sysctl.conf → vm.dirty_background_ratio &#x3D; 8</p><p>sudo sysctl -p</p><p>2）vm.swappiness&#x3D;1：对大量使用系统页缓存的kafka而言，应当尽量避免swap内存交换（把当前活跃进程调入swap，以此把内存空出来让给活跃的进程）；该值的上限是100，100表示积极使用swap分区，下限是0表示不要发生swap分区交换，这里建议该值设置为1，既保留了swap的机制又最大限度地限制了它对kafka性能的影响。</p><p>cat &#x2F;proc&#x2F;sys&#x2F;vm&#x2F;swappiness</p><p>cat &#x2F;proc&#x2F;sys&#x2F;vm&#x2F;swappiness</p><p>&#x2F;etc&#x2F;sysctl.conf → vm.swappiness&#x3D;1</p><p>sudo sysctl -p</p><p>扩容kafka时，重启下swap释放</p><p>swapoff -a</p><p>swapon -a</p>]]></content>
      
      
      <categories>
          
          <category> 故障类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kafka </tag>
            
            <tag> 配置参数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零碎的知识</title>
      <link href="/posts/1503555863/"/>
      <url>/posts/1503555863/</url>
      
        <content type="html"><![CDATA[<p>装完一台服务器，yum安装所有基础命令：</p><p>sudo yum groupinstall &quot;Development Tools&quot; -y</p><p>常用！拉取rpm包</p><p>yum install --downloadonly --downloaddir&#x3D;把包下载至哪个目录下<br>--setopt&#x3D;tsflags&#x3D;all（表示强制下载所有依赖包）<br>iptables-service（软件包名字）</p><p>yum install --downloadonly --downloaddir&#x3D;&#x2F;root&#x2F;iptables<br>--setopt&#x3D;tsflags&#x3D;all iptables-service</p><p>安装：直接rpm -Uvh 或者 yum localinstall -y</p><p>按内存取top10的进程</p><p>ps -eo pcpu,pmem,pid,user,args --sort&#x3D;-pmem | head -n 11</p><p>按cpu取top10的进程</p><p>ps -eo pcpu,pmem,pid,user,args --sort&#x3D;-pcpu | head -n 11</p><p>1、查看密码过期天数：[chage -l [用户名]]{.mark}</p><p>[小型机：需要安装sudo installp -i sysutils&#x2F;usermgmt 才能使用<br>chage]{.mark}</p><p>[2、sql查看每个表的大小]{.mark}</p><p>SELECT</p><p>TABLE_SCHEMA as `Database`,</p><p>TABLE_NAME as `Table`,</p><p>ROUND(SUM(DATA_LENGTH + INDEX_LENGTH) &#x2F; 1024 &#x2F; 1024, 2) as `Total Size<br>in MB`</p><p>FROM</p><p>information_schema.PARTITIONS</p><p>WHERE</p><p>TABLE_SCHEMA &#x3D; &#39;telcompre_data&#39; #这个地方改成你需要的表！</p><p>GROUP BY</p><p>TABLE_SCHEMA, TABLE_NAME</p><p>ORDER BY</p><p>`Total Size in MB` DESC;</p><p>3、看cpu使用率（脚本逻辑对应的是cpu总使用率）</p><p>每2秒取8次id（空闲的值），这8次去做个平均数，100%-id%得到cpu的总使用率<br>（参数-b让它批量输出，而不是实时获取数据）</p><p><img src="/media/image1.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”1.1130413385826772in”}</p><p>[4、路由相关]{.mark}</p><p>(路由在ip ，即网络层【网络层→传输层】)</p><p>本端多网卡去ping对端时，多网卡对应的多个ip也是以metric的优先级去衡量的，当优先级高的ping不通时，就会显示ping不通，并不会往下找优先级次低的去ping</p><p><img src="/media/image2.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”0.8112445319335083in”}</p><p>default via 192.168.62.254 dev ens192 proto static metric 104</p><p>注：</p><p>via<br>192.168.62.254：这意味着默认路由的下一跳地址是 [192.168.62.254]{.mark}，也就是通往互联网的网关地址</p><p>dev<br>ens192：这指定了数据包应该通过名为 [ens192]{.mark} 的网络接口进行转发。</p><p>metric为度量值，当它数值更低时，系统会选择它为默认路由 （数值低的优先）</p><p>改路由度量值的的方法</p><p>ip route change default via 192.168.62.254 dev ens192 metric 100</p><p>[5、设备]{.mark} 172.53.81.66 访问对端<br>172.60.120.49设备，172.60.120.49测试放通过程</p><p>1) 对端ping<br>172.53.81.66通了之后加路由：一般需要加路由的，说明该设备不止一个网卡，流量走错网卡了就不通</p><p>我的设备（源IP）：172.53.81.66</p><p>ip route add 172.53.81.0&#x2F;24 via 172.60.120.1 dev eth0</p><p>ip route add 172.53.81.0&#x2F;24(目的IP) via 172.60.120.1（哪个路由） dev<br>eth0 （该路由对应的网卡）</p><p>5、netstat用法的区别：</p><p>[-p: 显示pid]{.mark}</p><p>-n: 以数字形式显示地址和端口号（而不是尝试查找名称）。</p><p>-t: 显示TCP连接。</p><p>-u: 显示UDP连接。</p><p>[-l: 显示所有正在监听的端口。]{.mark}</p><p> [netstat -pntul]{.mark} 更合适看**[监听端口]{.mark}**的情况！</p><p>[netstat -an<br>更适合连接状态（]{.mark}所有连接的状态，包括监听的、建立的、关闭的等等，[）！！]{.mark}</p><p>[6、ansible分发脚本（原子能力库）：]{.mark}</p><p>ansible -i &#x2F;home&#x2F;sdnmuser&#x2F;hosts all -m script -a<br>&quot;&#x2F;home&#x2F;sdnmuser&#x2F;java.sh&quot; -become</p><p>[-become：相当与赋予hosts里面的用户sudo权限，让他们去执行java.sh脚本]{.mark}</p><p>[7、ansible的主机清单，最好吧ansible_ssh_port<br>写在ansible_ssh_pass前面，防止密码有特殊字符而妨碍端口的认证]{.mark}</p><p>[8、ansible运行过程中，报与selinux相关的错误，可尝试这样修改]{.mark}</p><p>sudo vim &#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;site-packages&#x2F;ansible&#x2F;module_utils&#x2F;basic.py</p><p>......</p><p>def selinux_enabled(self):</p><p>if not HAVE_SELINUX:</p><p>seenabled &#x3D; self.get_bin_path(&#39;selinuxenabled&#39;)</p><p>if seenabled is not None:</p><p>(rc, out, err) &#x3D; self.run_command(seenabled)</p><p>[if rc &#x3D;&#x3D; 0:]{.mark} #########################此处修改值为1</p><p>self.fail_json(msg&#x3D;&quot;Aborting, target uses selinux but python bindings<br>(libselinux-python) aren&#39;t installed!&quot;)</p><p>....….</p><p>修改上面：if rc &#x3D;&#x3D; 1:</p><p>然后再安装agent</p><p>9、Linux系统句柄数问题：</p><p>[报错：]{.mark}&#x2F;bin&#x2F;bash: Too many open files in system</p><p>ulimit -a #查看当前句柄数信息</p><p>.….</p><p>open files (-n) 1024 #当前文件句柄数</p><p>....…</p><p><strong>[修改配置文件：&#x2F;etc&#x2F;security&#x2F;limits.conf]{.mark}</strong></p><p><strong>[在末尾加上：]{.mark}</strong></p><p>....…</p><p># End of file</p><p>soft nofile 65535</p><p>hard nofile 65535</p><p>soft nproc 65535</p><p>hard nproc 65535</p><p>sdnmuser - nofile 65535</p><p>sdnmuser - core 65535</p><p>sdnmuser - nproc 65535</p><p>sdnmuser - stack 65535</p><p>dxwgwh30 - nofile 65535</p><p>dxwgwh30 - core 65535</p><p>dxwgwh30 - nproc 65535</p><p>dxwgwh30 - stack 65535</p><p>......</p><p>10、ssh测试连通性（fo循环的时候，如果密码错误会一直弹出让你试密码）</p><p>ssh -o ConnectTimeout&#x3D;5 -o NumberOfPasswordPrompts&#x3D;1 -o<br>StrictHostKeyChecking&#x3D;no ITMP@$i</p><p>- ConnectTimeout&#x3D;5 ：连接超过5秒直接下一个</p><p>- NumberOfPasswordPrompts&#x3D;1 ：密码错误1次，直接跳下一个</p><p>- StrictHostKeyChecking&#x3D;no：不需要哪个yes&#x2F;no的主机验证</p><p>11、排查某个端口在哪里被限制</p><p>sudo traceroute -T -p 端口 121.33.225.2</p><p>12、虚机两张网卡的问题处理</p><p>如图是有eth0和eth1两个网卡</p><p>**注意：**虚机多网卡不能配置两个网关，也就是172.41.158.1和172.41.194.1不能同时存在。</p><p>解决：把eth1这条网关删掉，留下默认网关172.41.158.1，然后自己写明细路由明细，比如指定目的IP的下一跳走需要的网关172.41.194.1（指定目的IP100.66.211.0&#x2F;24下一跳走指定网关172.41.194.1）</p><p><img src="/media/image3.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”1.4959755030621171in”}</p><p>13、查看raid阵列</p><p>命令：cat &#x2F;proc&#x2F;mdstat</p><p>Personalities : #为空值，说明没有用mdadm 工具创建过raid阵列</p><p># Personalities : [raid1] [raid10] #有些会明确写明</p><p>unused devices: &lt;none&gt;</p><p>14、排查df -Th为什么卡住的命令：</p><p>strace df -Th</p><p>15、3次握手、4次挥手在wireshark中的应用（他们的序号是连续的）</p><p>3次握手是对的（syn和ack），4次挥手应该是不全</p><p>4次挥手：</p><p>① 服务器发送 [FIN, ACK]{.mark} 包。</p><p>② 客户端回复 ACK[ 包确认服务器的 ]{.mark}FIN[ 请求。]{.mark}</p><p>[③]{.mark} 客户端发送 [FIN, ACK]{.mark} 包请求关闭连接。</p><p>④ 服务器发送 [ACK]{.mark} 包确认客户端的 [FIN]{.mark} 请求。</p><p><img src="/media/image4.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”2.6359700349956254in”}</p><p>16、tcpdump抓包</p><p>常规后台抓包：[nohup sudo tcpdump src 100.66.209.200 -w<br>100.66.209.200.pcap &amp;]{.mark}</p><p>客户不知道源IP时的抓包方式（客户在长ping）：tcpdump -i eth0 -w ping.pcap<br>icmp #后面跟的icmp就是需要的协议，eth0是本端我的网卡</p><p>17、udp测试网络</p><p>nc测试网络：nc -uvv 17.108.50.99 161 #超详细输出过程</p><p>nmap测试网络：[nmap -sU 192.168.1.7 -p 52994 -Pn （检测UDP端口）<br>→]{.mark} 关键信息显示： 10050&#x2F;udp <strong>open</strong> → 则表示端口已开启</p><p>18、shell脚本：read -r first_writes first_time &lt; &quot;$STAT_FILE&quot;</p><p>→ read -r [以原始模式读取文件首行内容。]{.mark}</p><p>[→]{.mark} first_writes 和 first_time<br>是我们取的一个名字，不是什么变量之类的</p><p>19、<a href="https://www.cnblogs.com/sky-cheng/p/18428467">排查Linux中free -h 显示的 available 小于 free<br>值</a></p><p>不被计入available的有：</p><p>[sdnmuser@k1n11 ~]$ sysctl vm.nr_hugepages<br>#这里为0，显然没有使用大页内存，不是这个的问题</p><p>vm.nr_hugepages &#x3D; 0</p><p>[sdnmuser@k1n11 ~]$ sysctl vm.min_free_kbytes<br>#操作系统最小保留内存，这里是4G，也就是这4G不被计入available可用内存中，所以要调整这个值</p><p>vm.min_free_kbytes &#x3D; 4096000</p><p>调整如下：</p><p>sudo sysctl -w vm.min_free_kbytes&#x3D;524288 #512M</p><p>20、sftp的使用</p><p>CRT快捷键：Alt+P，进入sftp模式</p><p>&quot;put 文件&quot; ：把本地文件上传上去</p><p>&quot;get 文件&quot; ：把linux的文件下载出来</p><p>21、<strong>仅删除当前目录下的空文件（不递归子目录）​</strong></p><p>find . -maxdepth 1 -type f -size 0 -delete</p><p>22、[ 报错没有设备tty脚本you must have a tty to run sudo&quot; ]{.mark}</p><p>批量修改的方式</p><p>echo &#39;Defaults:ALL !requiretty&#39; | sudo EDITOR&#x3D;&#39;tee -a&#39; visudo</p><p>这条命令通过 sudo 以 root 权限调用 visudo，利用 EDITOR&#x3D;&#39;tee<br>-a&#39; （环境变量）将 Defaults:ALL<br>!requiretty ​​安全追加​​到 &#x2F;etc&#x2F;sudoers 文件末尾</p><p>23、通过进程知道全路径</p><p>ps -ef | grep pro</p><p>root 50394 1 2 Apr22 ? 09:09:50 .&#x2F;prometheus<br>--config.file&#x3D;prometheus.yml</p><p>#得知进程50394</p><p>[root@master ~]# pwdx 50394</p><p>50394: &#x2F;home&#x2F;sendi&#x2F;prometheus-2.39.1.linux-amd64</p><p>24、判断设备是物理机还是虚拟机的办法：</p><p>sudo dmidecode -s system-manufacturer</p><p>sudo dmidecode -s system-product-name</p><p>25、ansible批量下发agent，添加配置zabbix_server的方法：s</p><p>ansible-playbook -i inventory test.yml -e<br>&quot;zabbix_server&#x3D;\&quot;132.126.7.138,132.126.7.139,172.53.81.63,172.53.81.68,132.126.7.140,172.53.81.65,132.126.7.137,132.126.156.243,132.126.156.248,132.126.156.245\&quot;<br>&quot;</p><p>26、查看io繁忙度具体信息</p><p>sudo iotop</p><p>27、判断设备是内网还是公网：</p><p>如果 IP 落在 10.x.x.x、172.16.x.x ~ 172.31.x.x 或 192.168.x.x，则是内网<br>IP → 专门保留给内网使用的</p><p>29、镜像解压</p><p>拿到一个镜像ctyunos2-docker-22.06.03.x86_64.tar.xz</p><p>1、解压为tar包，d 解压.xz文件，k 保留原文件</p><p>xz -dk ctyunos2-docker-22.06.03.x86_64.tar.xz</p><p>2、加载本地镜像到Docker</p><p>docker load -i ctyunos2-docker-22.06.03.x86_64.tar</p><p>docker images #可以查看</p><p>3、建立一个容器</p><p>docker run -d --name ctyunos2 ctyunos2:22.06.3 &#x2F;bin&#x2F;bash</p>]]></content>
      
      
      <categories>
          
          <category> 常用类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识点 </tag>
            
            <tag> 常用技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>防火墙策略（主机ACL）</title>
      <link href="/posts/1563085403/"/>
      <url>/posts/1563085403/</url>
      
        <content type="html"><![CDATA[<p>允许127.0.0.1的策略（回环）</p><p>sudo iptables -I INPUT -i lo -j ACCEPT</p><p>策略保存：</p><p>sudo service iptables save</p><p>sudo iptables-save &gt; &#x2F;etc&#x2F;sysconfig&#x2F;iptables</p><p>sudo iptables -P INPUT DROP</p><p>多端口策略放通：</p><p>sudo iptables -I INPUT -p tcp -s 132.121.132.0&#x2F;24 -m multiport --dports<br>58022,10050 -j ACCEPT</p><p>单端口策略放通：</p><p>iptable -I INPUT -p tcp -s 127.0.0.1 --dport 3306 -j ACCEPT</p><p>使用iprange模块的规则写法放通多IP如下（仅支持连续IP）：</p><p>iptables -A -m iprange --src-range 132.121.109.86-132.121.109.87 -j<br>ACCEPT</p><p>删除单条规则访问3306端口的规则</p><p>sudo iptables -D INPUT -s 132.126.0.0&#x2F;16 -p tcp --dport 3306 -j ACCEPT</p><p>删除访问8888端口的规则</p><p>sudo iptables -D INPUT -s 132.126.0.0&#x2F;16 -p tcp --dport 8888 -j ACCEPT</p>]]></content>
      
      
      <categories>
          
          <category> 常用类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 防火墙 </tag>
            
            <tag> ACL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日志轮询</title>
      <link href="/posts/1065014718/"/>
      <url>/posts/1065014718/</url>
      
        <content type="html"><![CDATA[<p>文件：</p><p>&#x2F;etc&#x2F;logrotate.conf</p><p>&#x2F;etc&#x2F;logrotate.d&#x2F; 下可新建轮转文件</p><p>例子：</p><p>&#x2F;var&#x2F;log&#x2F;messages {</p><p>missingok #如果日志文件丢失，不要报错继续处理下一个日志文件</p><p>weekly #每隔一周检查</p><p>minsize 4G #达到4G及以上，触发轮询</p><p>rotate 1 #只保留一个轮转文件</p><p>create 0600 root root #创建文件的所有者和所属组都是root</p><p>}</p><p>&#x2F;var&#x2F;log&#x2F;zabbix&#x2F;zabbix_server.log {</p><p>weekly#每周轮转一次</p><p>rotate 12#保留最后12个轮换的日志文件</p><p>compress #在轮换时压缩旧日志文件，也就是压缩的一个日志里面有一周的数据</p><p>delaycompress#推迟压缩日志，当前的日志文件会在下次轮换时才被压缩</p><p>missingok #如果日志文件丢失，不会报错。</p><p>notifempty #如果日志文件为空，则不进行轮换。</p><p>create 0664 zabbix zabbix #创建文件的所有者和所属组都是root</p><p>}</p><p>检查配置是否正常执行：</p><p>logrotate -d &#x2F;etc&#x2F;logrotate.conf</p><p>强制进行日志轮转：</p><p>logrotate -f &#x2F;etc&#x2F;logrotate.conf</p>]]></content>
      
      
      <categories>
          
          <category> 常用类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日志 </tag>
            
            <tag> 轮询 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多方式批量测试网络连通性</title>
      <link href="/posts/20181743/"/>
      <url>/posts/20181743/</url>
      
        <content type="html"><![CDATA[<p>for i in $(cat 1.txt)</p><p>do</p><p>if nc -zv -w 3 &quot;$i&quot; 3306 2&gt;&#x2F;dev&#x2F;null; then #<br>2&gt;&#x2F;dev&#x2F;null错误消息不会显示在页面上，而是静默处理</p><p>echo &quot;$i 通&quot;</p><p>else</p><p>echo &quot;$i 不通&quot;</p><p>fi</p><p>done</p><p>多次验证网络脚本：将批量IP写入1.txt文件</p><p>vi network_check.sh</p><p>#!&#x2F;bin&#x2F;bash</p><p># 检查参数</p><p>if [ $# -lt 2 ]; then</p><p>echo &quot;用法: $0 &lt;IP列表文件&gt; &lt;端口1&gt; [端口2] ...&quot;</p><p>echo &quot;示例: $0 1.txt 3306 8888 16700&quot;</p><p>exit 1</p><p>fi</p><p>ip_file&#x3D;&quot;$1&quot;</p><p>shift</p><p>ports&#x3D;(&quot;$@&quot;)</p><p># 检查工具是否存在</p><p>check_tool() {</p><p>if ! command -v &quot;$1&quot; &amp;&gt;&#x2F;dev&#x2F;null; then</p><p>echo &quot;错误: 未安装 $1，请先安装&quot;</p><p>exit 1</p><p>fi</p><p>}</p><p>check_tool nc</p><p>check_tool telnet</p><p>check_tool timeout</p><p># 测试单个端口的函数</p><p>test_port() {</p><p>local ip&#x3D;&quot;$1&quot;</p><p>local port&#x3D;&quot;$2&quot;</p><p># 方案1: 使用 nc 快速检测</p><p>if nc -zv -w 2 &quot;$ip&quot; &quot;$port&quot; &amp;&gt;&#x2F;dev&#x2F;null; then</p><p>echo &quot;✅ 通 (nc)&quot;</p><p>return 0</p><p>fi</p><p># 方案2: 使用 telnet 二次验证（避免 nc 误判）</p><p>if timeout 3 telnet &quot;$ip&quot; &quot;$port&quot; &amp;&gt;&#x2F;dev&#x2F;null &lt;&lt;&lt; EOF; then</p><p>echo &quot;✅ 通 (telnet)&quot;</p><p>return 0</p><p>fi</p><p># 方案3: 使用 &#x2F;dev&#x2F;tcp 最终检查（纯 bash）</p><p>if timeout 3 bash -c &quot;echo &gt;&#x2F;dev&#x2F;tcp&#x2F;$ip&#x2F;$port&quot; &amp;&gt;&#x2F;dev&#x2F;null; then</p><p>echo &quot;✅ 通 (dev&#x2F;tcp)&quot;</p><p>return 0</p><p>fi</p><p># 所有方法均失败</p><p>echo &quot;❌ 不通&quot;</p><p>return 1</p><p>}</p><p># 主循环</p><p>while read -r ip; do</p><p>[[ -z &quot;$ip&quot; || &quot;$ip&quot; &#x3D;~ ^# ]] &amp;&amp; continue</p><p>echo &quot;测试 IP: $ip&quot;</p><p>for port in &quot;${ports[@]}&quot;; do</p><p>echo -n &quot; 端口 $port: &quot;</p><p>test_port &quot;$ip&quot; &quot;$port&quot;</p><p>done</p><p>echo &quot;----------------------&quot;</p><p>done &lt; &quot;$ip_file&quot;</p><p>使用：.&#x2F;network_check.sh 1.txt 3306 8888 16700 16600 端口4 端口5 ...</p>]]></content>
      
      
      <categories>
          
          <category> 常用类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
            <tag> 批量测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ansible模块</title>
      <link href="/posts/187641024/"/>
      <url>/posts/187641024/</url>
      
        <content type="html"><![CDATA[<h1 id="Ansible模块使用指南"><a href="#Ansible模块使用指南" class="headerlink" title="Ansible模块使用指南"></a>Ansible模块使用指南</h1><h2 id="主机清单格式"><a href="#主机清单格式" class="headerlink" title="主机清单格式"></a>主机清单格式</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[nginx]</span></span><br><span class="line">172.53.81.36 <span class="attr">ansible_ssh_user</span>=sdnmuser ansible_ssh_pass=<span class="string">&#x27;k011X#o0NzV&#x27;</span> ansible_ssh_port=<span class="number">58022</span></span><br><span class="line">172.53.81.39 <span class="attr">ansible_ssh_user</span>=sdnmuser ansible_ssh_pass=<span class="string">&#x27;t85$8V&#123;Te%+&#x27;</span> ansible_ssh_port=<span class="number">58022</span></span><br></pre></td></tr></table></figure><h2 id="常用操作示例"><a href="#常用操作示例" class="headerlink" title="常用操作示例"></a>常用操作示例</h2><h3 id="1-切换其他账号执行命令"><a href="#1-切换其他账号执行命令" class="headerlink" title="1. 切换其他账号执行命令"></a>1. 切换其他账号执行命令</h3><p>该用户有最高权限才能切换：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible -i <span class="built_in">test</span> zabbix-server -m shell -a <span class="string">&#x27;systemctl stop nginx&#x27;</span> --become --become-user dxwgwh30</span><br></pre></td></tr></table></figure><h3 id="2-指定脚本运行"><a href="#2-指定脚本运行" class="headerlink" title="2. 指定脚本运行"></a>2. 指定脚本运行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible -i <span class="built_in">test</span> zabbix-server -m scripts -a <span class="string">&#x27;a.sh&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="3-root权限传输文件"><a href="#3-root权限传输文件" class="headerlink" title="3. root权限传输文件"></a>3. root权限传输文件</h3><p>主机清单不需要all，src源端、目的端写清楚：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible all -i test.sh -m copy -a <span class="string">&quot;src=/etc/yum.repos.d/zabbix_rpm.tar.gz dest=/etc/yum.repos.d/ user=&#x27;哪个用户&#x27;&quot;</span> --become</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible -i <span class="built_in">test</span> all -m copy -a <span class="string">&quot;src=/home/dxwgwh30/cron_chage_pass.sh dest=/home/dxwgwh30/cron_chage_pass.sh owner=dxwgwh30 group=dxwgwh30 mode=&#x27;0755&#x27; user=&#x27;dxwgwh30&#x27;&quot;</span> --become --become-user=dxwgwh30</span><br></pre></td></tr></table></figure><h3 id="4-传输定时任务"><a href="#4-传输定时任务" class="headerlink" title="4. 传输定时任务"></a>4. 传输定时任务</h3><p>对应用户名称要指定：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible -i <span class="built_in">test</span> all -m cron -a <span class="string">&quot;name=&#x27;Server Status Check&#x27; minute=&#x27;*/5&#x27; job=&#x27;/usr/bin/python /data/itmp/itmp-availability-check/server_status_check.py &gt; /data/itmp/itmp-availability-check/serverStatus.json 2&gt;&amp;1&#x27; user=&#x27;dxwgwh30&#x27;&quot;</span> --become</span><br></pre></td></tr></table></figure><h3 id="5-更新agent缺少的脚本"><a href="#5-更新agent缺少的脚本" class="headerlink" title="5. 更新agent缺少的脚本"></a>5. 更新agent缺少的脚本</h3><p>将脚本传过去：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible -i /etc/ansible/host/test all -m copy -a <span class="string">&quot;src=/data/itmp/playbook/redhat6_zabbix_agent_install_new_finish/zabbix_agent/scripts/get_MemUsed.sh dest=/home/wh/zabbix_agent/scripts/&quot;</span></span><br></pre></td></tr></table></figure><h3 id="6-playbook传参（-e参数）"><a href="#6-playbook传参（-e参数）" class="headerlink" title="6. playbook传参（-e参数）"></a>6. playbook传参（-e参数）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook -i /etc/ansible/host/test deploy.yml -e <span class="string">&quot;host=all&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 常用类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
            <tag> 自动化运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s存储抽象</title>
      <link href="/posts/3596448230/"/>
      <url>/posts/3596448230/</url>
      
        <content type="html"><![CDATA[<h1 id="k8s存储抽象"><a href="#k8s存储抽象" class="headerlink" title="k8s存储抽象"></a>k8s存储抽象</h1><h2 id="1-NFS共享存储"><a href="#1-NFS共享存储" class="headerlink" title="1. NFS共享存储"></a>1. NFS共享存储</h2><blockquote><p><img src="/media/6tkqpw8u8t3gjjndcog7tn.png"></p></blockquote><p>NFS（Network File System）是一种网络文件系统，支持多台主机共享同一存储目录，实现数据同步。</p><h3 id="1-1-NFS搭建过程"><a href="#1-1-NFS搭建过程" class="headerlink" title="1.1 NFS搭建过程"></a>1.1 NFS搭建过程</h3><ul><li>所有机器安装nfs-utils：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y nfs-utils</span><br></pre></td></tr></table></figure></li></ul><h4 id="NFS主节点（Server端）配置"><a href="#NFS主节点（Server端）配置" class="headerlink" title="NFS主节点（Server端）配置"></a>NFS主节点（Server端）配置</h4><ul><li>编辑导出目录：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;/nfs/data/ *(insecure,rw,sync,no_root_squash)&quot;</span> &gt; /etc/exports</span><br></pre></td></tr></table></figure><ul><li><code>*</code>：所有主机可访问</li><li><code>no_root_squash</code>：root用户拥有目录权限</li></ul></li><li>创建共享目录：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /nfs/data</span><br></pre></td></tr></table></figure></li><li>启动服务：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> rpcbind --now</span><br><span class="line">systemctl <span class="built_in">enable</span> nfs-server --now</span><br></pre></td></tr></table></figure></li></ul><h4 id="NFS从节点（客户端）配置"><a href="#NFS从节点（客户端）配置" class="headerlink" title="NFS从节点（客户端）配置"></a>NFS从节点（客户端）配置</h4><ul><li>查看主节点导出信息：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">showmount -e &lt;主节点IP&gt;</span><br></pre></td></tr></table></figure></li><li>创建挂载路径：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /nfs/data</span><br></pre></td></tr></table></figure></li><li>挂载NFS目录：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount -t nfs &lt;主节点IP&gt;:/nfs/data /nfs/data</span><br></pre></td></tr></table></figure></li><li>测试写入：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello nfs server&quot;</span> &gt; /nfs/data/test.txt</span><br></pre></td></tr></table></figure></li></ul><blockquote><p><img src="/media/dse4f61bvmwg48am9d2qgc.png"></p></blockquote><h2 id="2-k8s存储资源抽象"><a href="#2-k8s存储资源抽象" class="headerlink" title="2. k8s存储资源抽象"></a>2. k8s存储资源抽象</h2><h3 id="2-1-PV与PVC"><a href="#2-1-PV与PVC" class="headerlink" title="2.1 PV与PVC"></a>2.1 PV与PVC</h3><ul><li><strong>PV（PersistentVolume）</strong>：持久卷，类似于“场地”，由管理员预先创建。</li><li><strong>PVC（PersistentVolumeClaim）</strong>：持久卷声明，类似于“场地申请书”，由用户申请。</li></ul><blockquote><p><img src="/media/yzj9e8p1bbdd1szafcikun.png"><br><img src="/media/2x8iyrp0iq8h5fxsx770m.png"><br><img src="/media/bsxi127g5ehcfxn7a612e.png"></p></blockquote><h3 id="2-2-ConfigMap与Secret"><a href="#2-2-ConfigMap与Secret" class="headerlink" title="2.2 ConfigMap与Secret"></a>2.2 ConfigMap与Secret</h3><ul><li><strong>ConfigMap</strong>：用于存储配置信息，可挂载到Pod中。</li><li><strong>Secret</strong>：用于存储敏感信息（如密码），可挂载到Pod中。</li></ul><blockquote><p><img src="/media/k8pka2g8485u4uyijschn.png"></p></blockquote><p>ConfigMap类似于配置中心，修改后会自动同步到容器内，无需进入容器手动修改。</p><p>Secret用于存放加密内容，如密码等。</p>]]></content>
      
      
      <categories>
          
          <category> 学习类 </category>
          
          <category> 云原生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> 存储 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s核心概念</title>
      <link href="/posts/3598747225/"/>
      <url>/posts/3598747225/</url>
      
        <content type="html"><![CDATA[<h1 id="k8s核心概念"><a href="#k8s核心概念" class="headerlink" title="k8s核心概念"></a>k8s核心概念</h1><h2 id="1-Namespace（命名空间）"><a href="#1-Namespace（命名空间）" class="headerlink" title="1. Namespace（命名空间）"></a>1. Namespace（命名空间）</h2><p>命名空间（Namespace）用于对集群资源进行隔离划分，默认只隔离资源，不隔离网络。</p><ul><li>查看命名空间：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get ns</span><br></pre></td></tr></table></figure></li><li>创建命名空间：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create ns &lt;name&gt;</span><br></pre></td></tr></table></figure></li><li>YAML方式创建：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Namespace</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">hello</span></span><br></pre></td></tr></table></figure>应用：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f hello.yaml</span><br></pre></td></tr></table></figure></li><li>删除命名空间（慎重）：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete ns &lt;name&gt;</span><br><span class="line">kubectl delete -f hello.yaml</span><br></pre></td></tr></table></figure></li></ul><blockquote><p><img src="/media/c1qi4wctbxjfclbeslsh9.png"></p></blockquote><p>生产环境常用prod，测试环境用dev。命名空间只隔离资源，不隔离网络。</p><blockquote><p><img src="/media/7wi4o15hvo2tqhph1gz5jo.png"><br><img src="/media/utpairzzi7t6z4yqnuqzan.png"></p></blockquote><h2 id="2-Pod"><a href="#2-Pod" class="headerlink" title="2. Pod"></a>2. Pod</h2><p>Pod是Kubernetes中应用的最小单位，是一组运行中的容器。</p><blockquote><p><img src="/media/m2icult1omodyl97mhj77g.png"></p></blockquote><ul><li>每个Pod内部可包含多个容器（如nginx、mysql、redis等）。</li><li>Pod是资源调度的基本单元。</li></ul><blockquote><p><img src="/media/r2dgbi5a4yg8nyvxrni456.png"></p></blockquote><ul><li>Pod是“宿舍”，容器是“打工人”。</li><li>Pod Ready数如1&#x2F;3，表示有3个容器，1个Ready。</li></ul><h3 id="2-1-Pod管理"><a href="#2-1-Pod管理" class="headerlink" title="2.1 Pod管理"></a>2.1 Pod管理</h3><ul><li>创建Pod：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl run mynginx --image=nginx</span><br></pre></td></tr></table></figure></li><li>查看Pod：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod [-A]</span><br></pre></td></tr></table></figure></li><li>YAML方式创建：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mynginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mynginx</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">nginx</span></span><br></pre></td></tr></table></figure>应用：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f mynginx.yaml</span><br></pre></td></tr></table></figure></li><li>删除Pod：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete pod &lt;name&gt; [-n &lt;namespace&gt;]</span><br><span class="line">kubectl delete -f mynginx.yaml</span><br></pre></td></tr></table></figure></li></ul><blockquote><p><img src="/media/wxa0pbt0xnkrmr7ym3sb.png"><br><img src="/media/93thwg2hiiisa1taphcf.png"></p></blockquote><ul><li>查看Pod详情：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl describe pod &lt;name&gt;</span><br></pre></td></tr></table></figure></li><li>查看日志：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl logs &lt;name&gt;</span><br></pre></td></tr></table></figure></li><li>进入容器：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">exec</span> -it &lt;pod-name&gt; -- /bin/bash</span><br></pre></td></tr></table></figure></li></ul><blockquote><p><img src="/media/euzochazj65viorm55ged.png"></p></blockquote><ul><li>Pod的IP可用于集群内访问。</li><li>每个Pod分配唯一IP。</li></ul><blockquote><p><img src="/media/xlt0oslvdtp21owimsz9ep.png"></p></blockquote><ul><li>可视化界面可直接修改Pod内容。</li></ul><blockquote><p><img src="/media/5xsinwqbmhfnpi8xi4wnm.png"><br><img src="/media/cdma735kf4f0t4p0qbaj10n.png"><br><img src="/media/u9udd38d6rudbi522gmio.png"></p></blockquote><ul><li>Pod通过端口区分服务。</li></ul><blockquote><p><img src="/media/7s4ib6n93ptgg2iuiv4rm.png"></p></blockquote><h2 id="3-Deployment（部署）"><a href="#3-Deployment（部署）" class="headerlink" title="3. Deployment（部署）"></a>3. Deployment（部署）</h2><p>Deployment用于应用部署和管理，支持副本、弹性伸缩、自愈等能力。</p><blockquote><p><img src="/media/sj4ct1s011eaa0mt6genw.png"></p></blockquote><ul><li>推荐使用Deployment而不是直接用kubectl run启动Pod。</li><li>创建Deployment：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create deployment mytomcat --image=tomcat:8.5.68</span><br></pre></td></tr></table></figure></li><li>删除Pod：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete pod &lt;name&gt;</span><br></pre></td></tr></table></figure></li><li>Deployment会自动维护副本数，Pod被删除后会自动拉起新Pod。</li></ul><blockquote><p><img src="/media/gu1wurb0zhhkj993cn1jmd.png"><br><img src="/media/96371141pli7o26az13i2x.png"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习类 </category>
          
          <category> 云原生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> 核心概念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s核心命令</title>
      <link href="/posts/3829659479/"/>
      <url>/posts/3829659479/</url>
      
        <content type="html"><![CDATA[<h1 id="k8s核心命令"><a href="#k8s核心命令" class="headerlink" title="k8s核心命令"></a>k8s核心命令</h1><h2 id="1-基本资源获取"><a href="#1-基本资源获取" class="headerlink" title="1. 基本资源获取"></a>1. 基本资源获取</h2><p>Kubernetes中获取资源主要使用 <code>kubectl get</code> 命令。</p><ul><li>获取所有Pod：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods</span><br></pre></td></tr></table></figure></li><li>获取详细信息：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod -o wide</span><br></pre></td></tr></table></figure></li></ul><blockquote><p><img src="/media/x7wqg5qi4nhpu8sbgptm7.png"></p></blockquote><p>集群中任意机器都能通过Pod的IP地址进行访问。</p><ul><li>访问Pod服务：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl &lt;pod-ip&gt;:&lt;port&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-命名空间（Namespace）"><a href="#2-命名空间（Namespace）" class="headerlink" title="2. 命名空间（Namespace）"></a>2. 命名空间（Namespace）</h2><ul><li>查看所有命名空间：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get ns</span><br></pre></td></tr></table></figure></li><li>创建命名空间：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create ns hello</span><br></pre></td></tr></table></figure></li><li>删除命名空间（慎重）：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete ns &lt;namespace&gt;</span><br></pre></td></tr></table></figure></li><li>查看所有命名空间下的Pod：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods -A</span><br></pre></td></tr></table></figure></li><li>查看指定命名空间下的Pod：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod -n &lt;namespace&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-使用YAML管理资源"><a href="#3-使用YAML管理资源" class="headerlink" title="3. 使用YAML管理资源"></a>3. 使用YAML管理资源</h2><ul><li>用YAML创建命名空间：</li></ul><blockquote><p><img src="/media/8pcc5mpxrinibpe282jpg.png"></p></blockquote><p>hello.yaml 示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Namespace</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">hello</span></span><br></pre></td></tr></table></figure><ul><li>应用YAML文件：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f hello.yaml</span><br></pre></td></tr></table></figure></li><li>删除YAML资源：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete -f hello.yaml</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-Pod管理"><a href="#4-Pod管理" class="headerlink" title="4. Pod管理"></a>4. Pod管理</h2><ul><li><p>启动容器（指定镜像）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl run mynginx --image=nginx</span><br></pre></td></tr></table></figure></li><li><p>查看Pod状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod</span><br></pre></td></tr></table></figure></li><li><p>查看Pod详情（排错）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl describe pod mynginx</span><br></pre></td></tr></table></figure></li><li><p>进入容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">exec</span> -it &lt;pod-name&gt; -- bash</span><br></pre></td></tr></table></figure><blockquote><p><img src="/media/xkcgxr22qtb2goo76j0xe.png"></p></blockquote></li><li><p>删除Pod：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete pod &lt;pod-name&gt;</span><br><span class="line">kubectl delete pod &lt;pod1&gt; &lt;pod2&gt; -n &lt;namespace&gt;</span><br></pre></td></tr></table></figure></li><li><p>查看Pod日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl logs &lt;pod-name&gt;</span><br><span class="line">kubectl logs -f &lt;pod-name&gt;</span><br><span class="line"><span class="comment"># -f 追踪日志</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="5-使用YAML创建Pod"><a href="#5-使用YAML创建Pod" class="headerlink" title="5. 使用YAML创建Pod"></a>5. 使用YAML创建Pod</h2><ul><li>YAML文件结构：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mypod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mycontainer</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">nginx</span></span><br></pre></td></tr></table></figure></li><li>应用YAML文件：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f mypod.yaml</span><br></pre></td></tr></table></figure></li><li>删除Pod：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete -f mypod.yaml</span><br></pre></td></tr></table></figure></li></ul><h2 id="6-可视化界面操作"><a href="#6-可视化界面操作" class="headerlink" title="6. 可视化界面操作"></a>6. 可视化界面操作</h2><ol><li>在界面最右端点击加号，选择“输入并创建”，粘贴YAML内容上传。</li><li>若报“没有找到对应的命名空间”，可在界面顶部选择命名空间，或在YAML中添加 <code>namespace: &lt;name&gt;</code> 字段。</li></ol><blockquote><p><img src="/media/vtocx46gdrjjoizpe52bx.png"><br><img src="/media/jvrt1kkbnqopi4fl4x2o2a.png"><br><img src="/media/d2bod5e85llbdpuuaob6ra.png"></p></blockquote><ul><li>右侧栏带“N”标签的，说明与命名空间有关；未带N的为全局资源。</li><li>可视化界面可直接删除Pod、查看describe等。</li></ul><blockquote><p><img src="/media/ysc6dhqofui8dlokz2fbj5.png"></p></blockquote><h2 id="7-其他常用命令"><a href="#7-其他常用命令" class="headerlink" title="7. 其他常用命令"></a>7. 其他常用命令</h2><ul><li>实时监控Pod状态：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">watch -n 1 kubectl get pod</span><br><span class="line"><span class="comment"># -n 秒数，默认1秒刷新一次</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p><img src="/media/zqqzpv3gcth4t44tssi5lc.png"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习类 </category>
          
          <category> 云原生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> 核心命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s集群搭建</title>
      <link href="/posts/331375146/"/>
      <url>/posts/331375146/</url>
      
        <content type="html"><![CDATA[<h1 id="K8s集群搭建实战"><a href="#K8s集群搭建实战" class="headerlink" title="K8s集群搭建实战"></a>K8s集群搭建实战</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本文档介绍Kubernetes集群的完整搭建过程，包括环境准备、Docker配置、集群初始化和Dashboard部署等步骤。</p><p><strong>参考文档：</strong> <a href="https://www.yuque.com/leifengyang/oncloud/ghnb83">https://www.yuque.com/leifengyang/oncloud/ghnb83</a></p><h2 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h2><h3 id="1-1-系统要求"><a href="#1-1-系统要求" class="headerlink" title="1.1 系统要求"></a>1.1 系统要求</h3><p>Kubernetes是容器编排工具，所有节点都必须安装Docker容器引擎。</p><p><strong>节点规划：</strong></p><ul><li>Master节点：1台</li><li>Worker节点：2台</li><li>操作系统：CentOS 7</li></ul><h3 id="1-2-Docker安装"><a href="#1-2-Docker安装" class="headerlink" title="1.2 Docker安装"></a>1.2 Docker安装</h3><p>在所有节点上安装Docker：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装Docker</span></span><br><span class="line">yum install -y docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动Docker服务</span></span><br><span class="line">systemctl start docker</span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><p><img src="/media/r8l551zlsc92wke9xb5iiq.png" alt="Docker安装"></p><h2 id="2-Docker镜像加速器配置"><a href="#2-Docker镜像加速器配置" class="headerlink" title="2. Docker镜像加速器配置"></a>2. Docker镜像加速器配置</h2><h3 id="2-1-获取镜像加速器地址"><a href="#2-1-获取镜像加速器地址" class="headerlink" title="2.1 获取镜像加速器地址"></a>2.1 获取镜像加速器地址</h3><p>访问阿里云容器镜像服务：<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a></p><p><img src="/media/i7nhg9gv25nvzfb6p60ae.png" alt="镜像加速器配置1"></p><p><img src="/media/gjunuhfmmg58sw7shwamjw.png" alt="镜像加速器配置2"></p><p><img src="/media/b9bqp4mxhhcdgt9i48tc09.png" alt="镜像加速器配置3"></p><h3 id="2-2-配置镜像加速器"><a href="#2-2-配置镜像加速器" class="headerlink" title="2.2 配置镜像加速器"></a>2.2 配置镜像加速器</h3><p><strong>镜像地址：</strong> <code>https://p15n4xfi.mirror.aliyuncs.com/</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建Docker配置目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置镜像加速器</span></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/docker/daemon.json &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;registry-mirrors&quot;: [&quot;https://p15n4xfi.mirror.aliyuncs.com/&quot;]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启Docker服务</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><p><img src="/media/23zjo8ymoaljywrfb4wbhf.png" alt="镜像地址配置"></p><p><img src="/media/lrkteeqht9t46p4v0h2zq.png" alt="镜像配置完成"></p><h2 id="3-安装Kubeadm"><a href="#3-安装Kubeadm" class="headerlink" title="3. 安装Kubeadm"></a>3. 安装Kubeadm</h2><p>在所有节点上安装Kubeadm工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加Kubernetes源</span></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/yum.repos.d/kubernetes.repo &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">[kubernetes]</span></span><br><span class="line"><span class="string">name=Kubernetes</span></span><br><span class="line"><span class="string">baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64</span></span><br><span class="line"><span class="string">enabled=1</span></span><br><span class="line"><span class="string">gpgcheck=1</span></span><br><span class="line"><span class="string">repo_gpgcheck=1</span></span><br><span class="line"><span class="string">gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg</span></span><br><span class="line"><span class="string">exclude=kubelet kubeadm kubectl</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装kubeadm、kubelet、kubectl</span></span><br><span class="line">yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动kubelet服务</span></span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet</span><br><span class="line">systemctl start kubelet</span><br></pre></td></tr></table></figure><p><img src="/media/ihtzu1t719bgirer4s4r.png" alt="Kubeadm安装"></p><h2 id="4-集群初始化"><a href="#4-集群初始化" class="headerlink" title="4. 集群初始化"></a>4. 集群初始化</h2><h3 id="4-1-初始化Master节点"><a href="#4-1-初始化Master节点" class="headerlink" title="4.1 初始化Master节点"></a>4.1 初始化Master节点</h3><p>在Master节点上执行初始化命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">kubeadm init \</span><br><span class="line">  --apiserver-advertise-address=10.0.12.7 \</span><br><span class="line">  --control-plane-endpoint=master \</span><br><span class="line">  --image-repository registry.cn-hangzhou.aliyuncs.com/lfy_k8s_images \</span><br><span class="line">  --kubernetes-version v1.20.9 \</span><br><span class="line">  --service-cidr=10.96.0.0/16 \</span><br><span class="line">  --pod-network-cidr=192.168.0.0/16</span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><ul><li><code>--apiserver-advertise-address</code>：API服务器地址</li><li><code>--control-plane-endpoint</code>：控制平面端点</li><li><code>--image-repository</code>：镜像仓库地址</li><li><code>--kubernetes-version</code>：Kubernetes版本</li><li><code>--service-cidr</code>：Service网络CIDR</li><li><code>--pod-network-cidr</code>：Pod网络CIDR</li></ul><p><img src="/media/7998oboeofwmhz9yfuxdi.png" alt="初始化配置"></p><h3 id="4-2-常见问题解决"><a href="#4-2-常见问题解决" class="headerlink" title="4.2 常见问题解决"></a>4.2 常见问题解决</h3><p><strong>问题：</strong> 提示报错 <code>sysctl -w net.ipv4.ip_forward=1</code></p><p><strong>解决方案：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启用IP转发</span></span><br><span class="line">sysctl -w net.ipv4.ip_forward=1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 永久生效</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;net.ipv4.ip_forward=1&quot;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><p><img src="/media/k17ruj8ke5g1o6c6jhh98p.png" alt="初始化成功"></p><h3 id="4-3-配置kubectl"><a href="#4-3-配置kubectl" class="headerlink" title="4.3 配置kubectl"></a>4.3 配置kubectl</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建kubectl配置目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p <span class="variable">$HOME</span>/.kube</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制配置文件</span></span><br><span class="line"><span class="built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置权限</span></span><br><span class="line"><span class="built_in">chown</span> $(<span class="built_in">id</span> -u):$(<span class="built_in">id</span> -g) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure><h2 id="5-节点加入集群"><a href="#5-节点加入集群" class="headerlink" title="5. 节点加入集群"></a>5. 节点加入集群</h2><h3 id="5-1-获取加入命令"><a href="#5-1-获取加入命令" class="headerlink" title="5.1 获取加入命令"></a>5.1 获取加入命令</h3><p>在Master节点上获取Worker节点加入集群的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm token create --print-join-command</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 令牌24小时过期，过期后需要重新生成。</p><h3 id="5-2-Worker节点加入"><a href="#5-2-Worker节点加入" class="headerlink" title="5.2 Worker节点加入"></a>5.2 Worker节点加入</h3><p>在Worker节点上执行Master节点提供的加入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm <span class="built_in">join</span> 10.0.12.7:6443 --token &lt;token&gt; --discovery-token-ca-cert-hash sha256:&lt;<span class="built_in">hash</span>&gt;</span><br></pre></td></tr></table></figure><p><img src="/media/wj55dbr8ouijc1bp2dnd6g.png" alt="节点加入"></p><h2 id="6-节点管理"><a href="#6-节点管理" class="headerlink" title="6. 节点管理"></a>6. 节点管理</h2><h3 id="6-1-查看节点状态"><a href="#6-1-查看节点状态" class="headerlink" title="6.1 查看节点状态"></a>6.1 查看节点状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get nodes</span><br></pre></td></tr></table></figure><h3 id="6-2-节点故障排查"><a href="#6-2-节点故障排查" class="headerlink" title="6.2 节点故障排查"></a>6.2 节点故障排查</h3><p><strong>问题：</strong> 节点状态为NotReady</p><p><strong>排查步骤：</strong></p><ol><li><p><strong>检查kubelet服务状态</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl status kubelet</span><br><span class="line">systemctl start kubelet</span><br></pre></td></tr></table></figure></li><li><p><strong>检查6443端口</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -tlnp | grep 6443</span><br></pre></td></tr></table></figure></li><li><p><strong>查看节点详细信息</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl describe node &lt;node-name&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="7-部署Dashboard"><a href="#7-部署Dashboard" class="headerlink" title="7. 部署Dashboard"></a>7. 部署Dashboard</h2><h3 id="7-1-安装Dashboard"><a href="#7-1-安装Dashboard" class="headerlink" title="7.1 安装Dashboard"></a>7.1 安装Dashboard</h3><p>部署Kubernetes Dashboard可视化界面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.3.1/aio/deploy/recommended.yaml</span><br></pre></td></tr></table></figure><p><img src="/media/kuabw0z48wmpk70y6zfdcb.png" alt="Dashboard部署"></p><h3 id="7-2-查看部署状态"><a href="#7-2-查看部署状态" class="headerlink" title="7.2 查看部署状态"></a>7.2 查看部署状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods -n kubernetes-dashboard</span><br></pre></td></tr></table></figure><p>等待所有Pod状态为Running。</p><p><img src="/media/eumoqnz5gvczptucx9z3gg.png" alt="Dashboard运行状态"></p><h3 id="7-3-配置访问端口"><a href="#7-3-配置访问端口" class="headerlink" title="7.3 配置访问端口"></a>7.3 配置访问端口</h3><h4 id="修改Service类型"><a href="#修改Service类型" class="headerlink" title="修改Service类型"></a>修改Service类型</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl edit svc kubernetes-dashboard -n kubernetes-dashboard</span><br></pre></td></tr></table></figure><p>将<code>type: ClusterIP</code>改为<code>type: NodePort</code></p><h4 id="查看端口映射"><a href="#查看端口映射" class="headerlink" title="查看端口映射"></a>查看端口映射</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get svc -A | grep kubernetes-dashboard</span><br></pre></td></tr></table></figure><p><img src="/media/958gma63xwl4agdp4vi9kw.png" alt="端口配置"></p><h3 id="7-4-访问Dashboard"><a href="#7-4-访问Dashboard" class="headerlink" title="7.4 访问Dashboard"></a>7.4 访问Dashboard</h3><p><strong>访问地址：</strong> <code>http://&lt;node-ip&gt;:&lt;nodeport&gt;</code></p><p><img src="/media/yy4skv0ifrepadt782ia7c.png" alt="Dashboard界面"></p><p><img src="/media/pf0lpev197fyxypcj67oq.png" alt="登录界面"></p><h3 id="7-5-创建访问账号"><a href="#7-5-创建访问账号" class="headerlink" title="7.5 创建访问账号"></a>7.5 创建访问账号</h3><h4 id="创建管理员用户"><a href="#创建管理员用户" class="headerlink" title="创建管理员用户"></a>创建管理员用户</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt; dash.yaml &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">apiVersion: v1</span></span><br><span class="line"><span class="string">kind: ServiceAccount</span></span><br><span class="line"><span class="string">metadata:</span></span><br><span class="line"><span class="string">  name: admin-user</span></span><br><span class="line"><span class="string">  namespace: kubernetes-dashboard</span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string">apiVersion: rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="string">kind: ClusterRoleBinding</span></span><br><span class="line"><span class="string">metadata:</span></span><br><span class="line"><span class="string">  name: admin-user</span></span><br><span class="line"><span class="string">roleRef:</span></span><br><span class="line"><span class="string">  apiGroup: rbac.authorization.k8s.io</span></span><br><span class="line"><span class="string">  kind: ClusterRole</span></span><br><span class="line"><span class="string">  name: cluster-admin</span></span><br><span class="line"><span class="string">subjects:</span></span><br><span class="line"><span class="string">- kind: ServiceAccount</span></span><br><span class="line"><span class="string">  name: admin-user</span></span><br><span class="line"><span class="string">  namespace: kubernetes-dashboard</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">kubectl apply -f dash.yaml</span><br></pre></td></tr></table></figure><h4 id="获取访问令牌"><a href="#获取访问令牌" class="headerlink" title="获取访问令牌"></a>获取访问令牌</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n kubernetes-dashboard get secret $(kubectl -n kubernetes-dashboard get sa/admin-user -o jsonpath=<span class="string">&quot;&#123;.secrets[0].name&#125;&quot;</span>) -o go-template=<span class="string">&quot;&#123;&#123;.data.token | base64decode&#125;&#125;&quot;</span></span><br></pre></td></tr></table></figure><p><strong>示例Token：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJSUzI1NiIsImtpZCI6IkpOXzF4dkQtRjlWd1FmYVlkVUVYNlcxQWFIMTNqdjFDSHlzQTBPZWpzc0EifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLTliajJ6Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiI5YjJkNWJhNS1mZDZiLTQzODYtOGRhOC02MTUxOGVmMDllOWQiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZXJuZXRlcy1kYXNoYm9hcmQ6YWRtaW4tdXNlciJ9.YAEiSEh6QEnRlQVtwV1gwzdCVPqv61z94yI8VoE0yiIUCkBrjKdZecb7vqM0279h_8BKqFfqX09CqGkRipnQue0CEb1Zf60ION8ty_sfmGAxNK__iZC6ywps2hAWQc4HcJmyV844WfcD_yPa6QoKOOUXHK_Pq4hJtMYiQ4oyYzNxLn7UZErRlJTsinIxAwK_ReKIB8DENH3ojg353zeuzI7iNUtcwcI-2qSRQf8sLbiwT9BNA5kBHOsD39kD94ewUTJyuPFNUtoTHy9IJEstLweOn1mzHQ5Fc988F_5IVPUvPss5JIirVeI80MFD-SYD3a-L2Zlngkwd2AEHsjf_Wg</span><br></pre></td></tr></table></figure><p><img src="/media/1eou98xc86zn7egwke2hi.png" alt="Token输入"></p><p><img src="/media/k0eiuysd84stfn8887ppn.png" alt="部署完成"></p><h2 id="8-实验结束"><a href="#8-实验结束" class="headerlink" title="8. 实验结束"></a>8. 实验结束</h2><p>完成所有配置后，正常关闭集群：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭所有节点</span></span><br><span class="line">shutdown -h now</span><br></pre></td></tr></table></figure><p><img src="/media/y6xtmysytg9bbe6sbqb03b.png" alt="关机"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过以上步骤，我们成功搭建了一个完整的Kubernetes集群，包括：</p><ol><li><strong>环境准备</strong>：安装Docker和配置镜像加速器</li><li><strong>集群初始化</strong>：使用kubeadm初始化Master节点</li><li><strong>节点管理</strong>：Worker节点加入集群</li><li><strong>可视化界面</strong>：部署Dashboard并提供访问方式</li></ol><p>集群搭建完成后，可以开始部署应用程序和进行容器编排管理。</p>]]></content>
      
      
      <categories>
          
          <category> 学习类 </category>
          
          <category> 云原生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> 集群搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s理论基础</title>
      <link href="/posts/4053553735/"/>
      <url>/posts/4053553735/</url>
      
        <content type="html"><![CDATA[<h1 id="Kubernetes理论基础"><a href="#Kubernetes理论基础" class="headerlink" title="Kubernetes理论基础"></a>Kubernetes理论基础</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Kubernetes（K8s）是一个开源的容器编排平台，用于自动化部署、扩展和管理容器化应用程序。本文介绍Kubernetes的基本理论架构和工作原理。</p><h2 id="1-集群架构"><a href="#1-集群架构" class="headerlink" title="1. 集群架构"></a>1. 集群架构</h2><h3 id="1-1-集群组成"><a href="#1-1-集群组成" class="headerlink" title="1.1 集群组成"></a>1.1 集群组成</h3><p>Kubernetes集群由以下组件组成：</p><p><strong>Kubernetes Cluster &#x3D; N Master Node + N Worker Node</strong></p><ul><li><strong>Master节点：</strong> 控制平面节点，负责集群管理和决策</li><li><strong>Worker节点：</strong> 工作节点，负责运行应用程序容器</li><li><strong>节点数量：</strong> N ≥ 1（至少需要1个节点）</li></ul><h3 id="1-2-节点角色说明"><a href="#1-2-节点角色说明" class="headerlink" title="1.2 节点角色说明"></a>1.2 节点角色说明</h3><h4 id="Master节点（控制平面）"><a href="#Master节点（控制平面）" class="headerlink" title="Master节点（控制平面）"></a>Master节点（控制平面）</h4><ul><li><strong>作用：</strong> 集群的”大脑”，负责管理和控制</li><li><strong>数量：</strong> 通常为奇数个（1、3、5等）</li><li><strong>原因：</strong> 使用多数票原则选举新的主节点</li></ul><h4 id="Worker节点（工作节点）"><a href="#Worker节点（工作节点）" class="headerlink" title="Worker节点（工作节点）"></a>Worker节点（工作节点）</h4><ul><li><strong>作用：</strong> 运行应用程序容器</li><li><strong>数量：</strong> 根据业务需求确定</li><li><strong>特点：</strong> 可以动态添加和删除</li></ul><p><img src="/media/baror13krdch7cihl3r9.png" alt="Kubernetes架构图"></p><h2 id="2-核心组件"><a href="#2-核心组件" class="headerlink" title="2. 核心组件"></a>2. 核心组件</h2><h3 id="2-1-控制平面组件"><a href="#2-1-控制平面组件" class="headerlink" title="2.1 控制平面组件"></a>2.1 控制平面组件</h3><h4 id="kubectl（命令行工具）"><a href="#kubectl（命令行工具）" class="headerlink" title="kubectl（命令行工具）"></a>kubectl（命令行工具）</h4><ul><li><strong>作用：</strong> 与Kubernetes集群交互的命令行工具</li><li><strong>部署位置：</strong> 每台机器都可以安装</li><li><strong>功能：</strong> 发送命令到API服务器</li></ul><h4 id="kubelet（节点代理）"><a href="#kubelet（节点代理）" class="headerlink" title="kubelet（节点代理）"></a>kubelet（节点代理）</h4><ul><li><strong>作用：</strong> 每个节点上的主要代理</li><li><strong>部署位置：</strong> 每个节点都必须安装</li><li><strong>功能：</strong> 管理节点上的容器生命周期</li></ul><h4 id="kubeadm（集群管理工具）"><a href="#kubeadm（集群管理工具）" class="headerlink" title="kubeadm（集群管理工具）"></a>kubeadm（集群管理工具）</h4><ul><li><strong>作用：</strong> 快速搭建Kubernetes集群的工具</li><li><strong>功能：</strong> 简化集群初始化和节点加入过程</li></ul><h3 id="2-2-Master节点核心组件"><a href="#2-2-Master节点核心组件" class="headerlink" title="2.2 Master节点核心组件"></a>2.2 Master节点核心组件</h3><h4 id="API-Server（API服务器）"><a href="#API-Server（API服务器）" class="headerlink" title="API Server（API服务器）"></a>API Server（API服务器）</h4><ul><li><strong>作用：</strong> 集群的统一入口</li><li><strong>功能：</strong> 接收和处理所有API请求</li><li><strong>特点：</strong> 只有主节点才有</li></ul><h4 id="etcd（分布式数据库）"><a href="#etcd（分布式数据库）" class="headerlink" title="etcd（分布式数据库）"></a>etcd（分布式数据库）</h4><ul><li><strong>作用：</strong> 存储集群的所有配置数据</li><li><strong>特点：</strong> 高可用、强一致性</li><li><strong>功能：</strong> 保存集群状态信息</li></ul><h4 id="Scheduler（调度器）"><a href="#Scheduler（调度器）" class="headerlink" title="Scheduler（调度器）"></a>Scheduler（调度器）</h4><ul><li><strong>作用：</strong> 决定Pod运行在哪个节点</li><li><strong>功能：</strong> 根据调度策略分配资源</li><li><strong>考虑因素：</strong> 资源需求、亲和性、污点等</li></ul><h4 id="Controller-Manager（控制器管理器）"><a href="#Controller-Manager（控制器管理器）" class="headerlink" title="Controller Manager（控制器管理器）"></a>Controller Manager（控制器管理器）</h4><ul><li><strong>作用：</strong> 维护集群状态</li><li><strong>功能：</strong> 监控集群状态并自动修复</li><li><strong>类型：</strong> 节点控制器、副本控制器等</li></ul><h2 id="3-集群安装逻辑"><a href="#3-集群安装逻辑" class="headerlink" title="3. 集群安装逻辑"></a>3. 集群安装逻辑</h2><h3 id="3-1-初始化流程"><a href="#3-1-初始化流程" class="headerlink" title="3.1 初始化流程"></a>3.1 初始化流程</h3><ol><li><p><strong>安装kubeadm工具</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在所有节点上安装kubeadm</span></span><br><span class="line">yum install -y kubelet kubeadm kubectl</span><br></pre></td></tr></table></figure></li><li><p><strong>初始化Master节点</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在Master节点上执行</span></span><br><span class="line">kubeadm init</span><br></pre></td></tr></table></figure></li><li><p><strong>配置kubectl</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 复制配置文件</span></span><br><span class="line"><span class="built_in">mkdir</span> -p <span class="variable">$HOME</span>/.kube</span><br><span class="line"><span class="built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure></li><li><p><strong>Worker节点加入</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在Worker节点上执行</span></span><br><span class="line">kubeadm <span class="built_in">join</span> &lt;master-ip&gt;:6443 --token &lt;token&gt; --discovery-token-ca-cert-hash sha256:&lt;<span class="built_in">hash</span>&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="3-2-组件启动顺序"><a href="#3-2-组件启动顺序" class="headerlink" title="3.2 组件启动顺序"></a>3.2 组件启动顺序</h3><ol><li><strong>etcd启动</strong> → 存储集群数据</li><li><strong>API Server启动</strong> → 提供API服务</li><li><strong>Controller Manager启动</strong> → 管理集群状态</li><li><strong>Scheduler启动</strong> → 调度Pod</li><li><strong>kubelet启动</strong> → 管理节点容器</li></ol><h2 id="4-集群通信原理"><a href="#4-集群通信原理" class="headerlink" title="4. 集群通信原理"></a>4. 集群通信原理</h2><h3 id="4-1-组件间通信"><a href="#4-1-组件间通信" class="headerlink" title="4.1 组件间通信"></a>4.1 组件间通信</h3><ul><li><strong>kubectl ↔ API Server：</strong> HTTP&#x2F;HTTPS</li><li><strong>API Server ↔ etcd：</strong> gRPC</li><li><strong>API Server ↔ kubelet：</strong> HTTP&#x2F;HTTPS</li><li><strong>API Server ↔ Controller Manager：</strong> HTTP&#x2F;HTTPS</li><li><strong>API Server ↔ Scheduler：</strong> HTTP&#x2F;HTTPS</li></ul><h3 id="4-2-网络模型"><a href="#4-2-网络模型" class="headerlink" title="4.2 网络模型"></a>4.2 网络模型</h3><ul><li><strong>Pod网络：</strong> 每个Pod有唯一IP</li><li><strong>Service网络：</strong> 为Pod提供负载均衡</li><li><strong>节点网络：</strong> 节点间通信网络</li></ul><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><p>Kubernetes通过以下方式实现容器编排：</p><ol><li><strong>分层架构：</strong> 控制平面 + 工作节点</li><li><strong>组件协作：</strong> 各组件通过API Server协调</li><li><strong>状态管理：</strong> etcd存储集群状态</li><li><strong>自动调度：</strong> Scheduler自动分配资源</li><li><strong>故障恢复：</strong> Controller Manager自动修复</li></ol><p>这种架构确保了Kubernetes集群的高可用性和可扩展性。</p>]]></content>
      
      
      <categories>
          
          <category> 学习类 </category>
          
          <category> 云原生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> 理论基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vpc：网络隔离作用</title>
      <link href="/posts/4094235960/"/>
      <url>/posts/4094235960/</url>
      
        <content type="html"><![CDATA[<h1 id="VPC：网络隔离作用"><a href="#VPC：网络隔离作用" class="headerlink" title="VPC：网络隔离作用"></a>VPC：网络隔离作用</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>VPC（Virtual Private Cloud）是云服务商提供的虚拟私有网络，用于在云环境中创建隔离的网络环境。本文介绍VPC的基本概念和网络隔离原理。</p><h2 id="1-IP地址与子网掩码"><a href="#1-IP地址与子网掩码" class="headerlink" title="1. IP地址与子网掩码"></a>1. IP地址与子网掩码</h2><h3 id="1-1-CIDR表示法"><a href="#1-1-CIDR表示法" class="headerlink" title="1.1 CIDR表示法"></a>1.1 CIDR表示法</h3><p>CIDR（无类别域间路由）是一种表示IP地址和子网掩码的方法。</p><p><strong>示例：</strong> <code>192.168.0.0/16</code></p><ul><li><strong>二进制表示：</strong> <code>8位.8位.8位.8位/16</code></li><li><strong>含义：</strong> 前16位固定，后16位可动态变化</li><li><strong>网络范围：</strong> 192.168.0.0 - 192.168.255.255</li></ul><p><img src="/media/p6j8y4g28uh00k3yusvppkdj.png" alt="网络掩码示意图"></p><h3 id="1-2-常见子网掩码示例"><a href="#1-2-常见子网掩码示例" class="headerlink" title="1.2 常见子网掩码示例"></a>1.2 常见子网掩码示例</h3><table><thead><tr><th>CIDR表示法</th><th>子网掩码</th><th>可用IP数量</th><th>说明</th></tr></thead><tbody><tr><td><code>/24</code></td><td>255.255.255.0</td><td>254个</td><td>前24位固定</td></tr><tr><td><code>/16</code></td><td>255.255.0.0</td><td>65,534个</td><td>前16位固定</td></tr><tr><td><code>/8</code></td><td>255.0.0.0</td><td>16,777,214个</td><td>前8位固定</td></tr></tbody></table><p><strong>示例：</strong></p><ul><li><code>192.168.0.0/24</code> → 前24位锁定不变（十进制前3位）</li><li><code>192.168.0.0/18</code> → 前18位锁定不变</li></ul><h2 id="2-VPC专有网络"><a href="#2-VPC专有网络" class="headerlink" title="2. VPC专有网络"></a>2. VPC专有网络</h2><h3 id="2-1-VPC概念"><a href="#2-1-VPC概念" class="headerlink" title="2.1 VPC概念"></a>2.1 VPC概念</h3><p>VPC（Virtual Private Cloud）是云服务商提供的虚拟私有网络，具有以下特点：</p><ul><li><strong>网络隔离：</strong> 不同VPC之间的网络完全隔离</li><li><strong>自定义网段：</strong> 可以自定义IP地址范围</li><li><strong>安全控制：</strong> 通过安全组和网络ACL控制访问</li><li><strong>路由管理：</strong> 可以自定义路由表</li></ul><h3 id="2-2-网络隔离原理"><a href="#2-2-网络隔离原理" class="headerlink" title="2.2 网络隔离原理"></a>2.2 网络隔离原理</h3><p><strong>核心特性：</strong> 不同VPC之间的IP地址无法直接通信</p><p><strong>隔离机制：</strong></p><ol><li><strong>网络层面隔离：</strong> 不同VPC使用不同的网络地址空间</li><li><strong>路由隔离：</strong> VPC内部的路由表相互独立</li><li><strong>安全组隔离：</strong> 每个VPC有独立的安全组规则</li></ol><p><strong>重要说明：</strong> 即使两个VPC使用相同的IP地址段，它们之间也无法直接通信，必须通过网关或VPN等特殊方式连接。</p><h2 id="3-VPC应用场景"><a href="#3-VPC应用场景" class="headerlink" title="3. VPC应用场景"></a>3. VPC应用场景</h2><h3 id="3-1-多租户隔离"><a href="#3-1-多租户隔离" class="headerlink" title="3.1 多租户隔离"></a>3.1 多租户隔离</h3><ul><li><strong>开发环境：</strong> 独立的VPC用于开发测试</li><li><strong>生产环境：</strong> 独立的VPC用于生产部署</li><li><strong>数据隔离：</strong> 不同业务使用不同VPC</li></ul><h3 id="3-2-安全隔离"><a href="#3-2-安全隔离" class="headerlink" title="3.2 安全隔离"></a>3.2 安全隔离</h3><ul><li><strong>DMZ区域：</strong> 公网可访问的服务放在独立VPC</li><li><strong>内网服务：</strong> 私有服务放在隔离的VPC中</li><li><strong>数据库隔离：</strong> 数据库服务使用专用VPC</li></ul><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p>VPC通过以下方式实现网络隔离：</p><ol><li><strong>地址空间隔离：</strong> 不同VPC使用独立的IP地址段</li><li><strong>路由隔离：</strong> 每个VPC有独立的路由表</li><li><strong>安全策略隔离：</strong> 独立的安全组和网络ACL</li><li><strong>物理隔离：</strong> 在云服务商基础设施层面的隔离</li></ol><p>这种隔离机制确保了不同VPC之间的网络安全性，是云原生架构中重要的网络基础组件。</p>]]></content>
      
      
      <categories>
          
          <category> 学习类 </category>
          
          <category> 云原生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vpc </tag>
            
            <tag> 网络隔离 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zabbix-Server配置文件的重要参数解释</title>
      <link href="/posts/624675470/"/>
      <url>/posts/624675470/</url>
      
        <content type="html"><![CDATA[<p>注：数据库的表分区可以设置数据保留时间</p><p>partitiontables_zabbix.sh</p><p>#历史数据保留时间，单位是”天”</p><p>参数：HISTORY_DAYS&#x3D;30</p><p>#趋势数据保留时间，单位是”月”</p><p>参数：TREND_MONTH&#x3D;12</p><p>[itzxyy@ITMPVM914435 ~]$ sudo egrep -v &quot;^$|#&quot;<br>&#x2F;etc&#x2F;zabbix&#x2F;zabbix_server.conf</p><p>ListenPort&#x3D;10051</p><p>LogFile&#x3D;&#x2F;var&#x2F;log&#x2F;zabbix&#x2F;zabbix_server.log</p><p>LogFileSize&#x3D;1024</p><p>DebugLevel&#x3D;3</p><p>PidFile&#x3D;&#x2F;var&#x2F;run&#x2F;zabbix&#x2F;zabbix_server.pid</p><p>SocketDir&#x3D;&#x2F;var&#x2F;run&#x2F;zabbix</p><p>DBHost&#x3D;localhost <strong># DB的主机名，或者IP地址</strong></p><p>DBName&#x3D;zabbix</p><p>DBUser&#x3D;zabbix</p><p>DBPassword&#x3D;SqX&amp;9027&lt;&gt;DhSl</p><p>DBSocket&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;mysql.sock</p><p>ExportDir&#x3D;&#x2F;data&#x2F;zabbix_data&#x2F;json_log <strong>#实时监控数据输入到json文件</strong></p><p>ExportFileSize&#x3D;256M</p><p>StartPollers&#x3D;100 <strong>#<br>重点，等待队列累计多，可调节此参数。被动模式进程开启的个数，通常一个进程可以获取10~20台主机的监控数，最大值为1000，最小值为0，默认为5，硬件配置足够好的情况下，可以一次性调整为1000</strong></p><p>StartIPMIPollers&#x3D;0 <strong>#<br>IPMI进程开启个数，默认值为0，表示关闭IPMI，取值为0~1000</strong></p><p>StartPreprocessors&#x3D;100 <strong>#<br>预处理进程的个数，默认值为3，建议设置为100左右，取值范围为0-1000。此值越大越消耗<br>CPU、内存等资源</strong></p><p>StartPollersUnreachable&#x3D;10 <strong>#<br>当主机不可达时，会再次请求，使用此进程，建议设置为主机数量的3%，即100台主机则设置为3，取值范围为0~1000</strong></p><p>StartTrappers&#x3D;50 <strong>#<br>Trapper进程的数量，使用zabbix_sender命令发送的数据，将由此进程进行处理，默认值为5</strong></p><p>StartPingers&#x3D;100</p><p>StartDiscoverers&#x3D;10</p><p>StartTimers&#x3D;10</p><p>StartVMwareCollectors&#x3D;0</p><p>VMwareFrequency&#x3D;60</p><p>VMwarePerfFrequency&#x3D;60</p><p>VMwareCacheSize&#x3D;256K</p><p>VMwareTimeout&#x3D;60</p><p>SNMPTrapperFile&#x3D;&#x2F;data&#x2F;zabbix_data&#x2F;zabbix_traps.tmp</p><p>HousekeepingFrequency&#x3D;0</p><p>MaxHousekeeperDelete&#x3D;0</p><p>CacheSize&#x3D;2G</p><p>StartDBSyncers&#x3D;30 <strong>#<br>数据库同步进程，也叫历史数据同步进程，取值1~100，功能是将数据从缓存同步到数据库，负责触发器的计算，处理趋势数据，更新item状态，存储告警事件结果。1个DBSyncer可以支持1000个NPVS（每秒处理新请求的数量），4个DBSyncer可以支持4000个NPVS，前提是数据库能够及时同步。注意这个值不能设置太大，太大会造成数据库压力过大，从而导致整体处理速度下降。</strong></p><p>HistoryCacheSize&#x3D;1G</p><p>HistoryIndexCacheSize&#x3D;1G</p><p>TrendCacheSize&#x3D;1G</p><p>ValueCacheSize&#x3D;1G <strong>#<br>监控项（即item）的历史数据，取值范围为128KB~64GB，详见附件图片解释。</strong></p><p>Timeout&#x3D;30</p><p>AlertScriptsPath&#x3D;&#x2F;usr&#x2F;lib&#x2F;zabbix&#x2F;alertscripts</p><p>ExternalScripts&#x3D;&#x2F;usr&#x2F;lib&#x2F;zabbix&#x2F;externalscripts</p><p>LogSlowQueries&#x3D;3000</p><p>StartProxyPollers&#x3D;150</p><p>StartLLDProcessors&#x3D;5</p><p>StatsAllowedIP&#x3D;127.0.0.1</p>]]></content>
      
      
      <categories>
          
          <category> 学习类 </category>
          
          <category> 中间件 </category>
          
          <category> zabbix </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 配置参数 </tag>
            
            <tag> Zabbix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>维护类——记zabbix-server前端页面打不开问题</title>
      <link href="/posts/1647313031/"/>
      <url>/posts/1647313031/</url>
      
        <content type="html"><![CDATA[<h1 id="Zabbix-Server前端页面打不开问题排查"><a href="#Zabbix-Server前端页面打不开问题排查" class="headerlink" title="Zabbix Server前端页面打不开问题排查"></a>Zabbix Server前端页面打不开问题排查</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本文档介绍Zabbix Server前端页面无法访问的常见问题和解决方案，包括数据库连接和Nginx配置问题。</p><h2 id="1-场景一：数据库连接问题"><a href="#1-场景一：数据库连接问题" class="headerlink" title="1. 场景一：数据库连接问题"></a>1. 场景一：数据库连接问题</h2><h3 id="1-1-问题描述"><a href="#1-1-问题描述" class="headerlink" title="1.1 问题描述"></a>1.1 问题描述</h3><p>访问Zabbix页面提示”无法连接数据库”</p><h3 id="1-2-排查过程"><a href="#1-2-排查过程" class="headerlink" title="1.2 排查过程"></a>1.2 排查过程</h3><h4 id="1-2-1-检查PHP配置文件"><a href="#1-2-1-检查PHP配置文件" class="headerlink" title="1.2.1 检查PHP配置文件"></a>1.2.1 检查PHP配置文件</h4><p>Zabbix前端主要是PHP文件，正常时放置在<code>/etc/zabbix/web/zabbix.conf.php</code>下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查配置文件</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">cat</span> /etc/zabbix/web/zabbix.conf.php</span><br></pre></td></tr></table></figure><p><strong>配置文件内容：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// Zabbix GUI configuration file.</span></span><br><span class="line"><span class="keyword">global</span> <span class="variable">$DB</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$DB</span>[<span class="string">&#x27;TYPE&#x27;</span>] = <span class="string">&#x27;MYSQL&#x27;</span>;</span><br><span class="line"><span class="variable">$DB</span>[<span class="string">&#x27;SERVER&#x27;</span>] = <span class="string">&#x27;127.0.0.1&#x27;</span>;</span><br><span class="line"><span class="variable">$DB</span>[<span class="string">&#x27;PORT&#x27;</span>] = <span class="string">&#x27;3306&#x27;</span>;</span><br><span class="line"><span class="variable">$DB</span>[<span class="string">&#x27;DATABASE&#x27;</span>] = <span class="string">&#x27;zabbix&#x27;</span>;</span><br><span class="line"><span class="variable">$DB</span>[<span class="string">&#x27;USER&#x27;</span>] = <span class="string">&#x27;zabbix&#x27;</span>;</span><br><span class="line"><span class="variable">$DB</span>[<span class="string">&#x27;PASSWORD&#x27;</span>] = <span class="string">&#x27;***&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Schema name. Used for IBM DB2 and PostgreSQL.</span></span><br><span class="line"><span class="variable">$DB</span>[<span class="string">&#x27;SCHEMA&#x27;</span>] = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$ZBX_SERVER</span> = <span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"><span class="variable">$ZBX_SERVER_PORT</span> = <span class="string">&#x27;10051&#x27;</span>;</span><br><span class="line"><span class="variable">$ZBX_SERVER_NAME</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$IMAGE_FORMAT_DEFAULT</span> = IMAGE_FORMAT_PNG;</span><br></pre></td></tr></table></figure><h4 id="1-2-2-检查Nginx配置"><a href="#1-2-2-检查Nginx配置" class="headerlink" title="1.2.2 检查Nginx配置"></a>1.2.2 检查Nginx配置</h4><p>查看Nginx配置文件，发现读取的PHP文件来自<code>/usr/local/zabbix-server/php</code>目录：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">8888</span>;</span><br><span class="line">    <span class="attribute">root</span> /usr/local/zabbix-server/php;</span><br><span class="line">    <span class="comment"># ... 其他配置 ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-3-问题定位"><a href="#1-2-3-问题定位" class="headerlink" title="1.2.3 问题定位"></a>1.2.3 问题定位</h4><p>发现<code>/usr/local/zabbix-server/php</code>目录下的<code>zabbix.php</code>配置文件填写的是错误的数据库信息。</p><h3 id="1-3-解决方案"><a href="#1-3-解决方案" class="headerlink" title="1.3 解决方案"></a>1.3 解决方案</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查并修正数据库配置</span></span><br><span class="line">vim /usr/local/zabbix-server/php/zabbix.php</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证数据库连接</span></span><br><span class="line">mysql -u zabbix -p -h 127.0.0.1 zabbix</span><br></pre></td></tr></table></figure><h2 id="2-场景二：Nginx配置问题"><a href="#2-场景二：Nginx配置问题" class="headerlink" title="2. 场景二：Nginx配置问题"></a>2. 场景二：Nginx配置问题</h2><h3 id="2-1-问题描述"><a href="#2-1-问题描述" class="headerlink" title="2.1 问题描述"></a>2.1 问题描述</h3><p>开发反馈Zabbix前端页面报error，接口调用不到，访问地址：<code>http://ip:8888/zabbix/zabbix.php?...</code></p><p>Nginx报错：</p><p><img src="/media/image1.png" alt="Nginx错误截图"></p><h3 id="2-2-问题分析"><a href="#2-2-问题分析" class="headerlink" title="2.2 问题分析"></a>2.2 问题分析</h3><h4 id="2-2-1-URI路径分析"><a href="#2-2-1-URI路径分析" class="headerlink" title="2.2.1 URI路径分析"></a>2.2.1 URI路径分析</h4><p>需要清楚URI对应的Nginx配置位置：</p><p><img src="/media/image2.png" alt="URI路径分析"></p><h4 id="2-2-2-Nginx配置解析"><a href="#2-2-2-Nginx配置解析" class="headerlink" title="2.2.2 Nginx配置解析"></a>2.2.2 Nginx配置解析</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">8888</span>;</span><br><span class="line">    <span class="attribute">root</span> /usr/local/zabbix-server/php;</span><br><span class="line">    </span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ [^/]\.php(/|$)</span> &#123;</span><br><span class="line">        <span class="comment">#fastcgi_pass unix:/run/php-fpm/zabbix.sock;</span></span><br><span class="line">        <span class="attribute">fastcgi_pass</span> unix:/var/run/php-fpm/www.sock;</span><br><span class="line">        <span class="attribute">fastcgi_split_path_info</span><span class="regexp"> ^(.+\.php)(/.+)$</span>;</span><br><span class="line">        <span class="attribute">fastcgi_index</span> index.php;</span><br><span class="line">        <span class="comment">#fastcgi_param DOCUMENT_ROOT /usr/share/zabbix;</span></span><br><span class="line">        <span class="attribute">fastcgi_param</span> DOCUMENT_ROOT /usr/local/zabbix-server/php;</span><br><span class="line">        <span class="attribute">fastcgi_param</span> SCRIPT_FILENAME /usr/local/zabbix-server/php<span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">        <span class="attribute">fastcgi_param</span> PATH_TRANSLATED /usr/local/zabbix-server/php<span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">        <span class="comment"># ... 其他配置 ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>配置说明：</strong></p><ul><li><code>[^/]</code>：<code>[]</code>表示匹配字符，<code>[]</code>之外的<code>^</code>才是以什么开头的意思</li><li>在字符匹配中<code>[^]</code>表示取反，<code>[^/]</code>即不匹配”&#x2F;“号</li><li>匹配模式：<code>*.php/</code></li><li>界面访问应该是：<code>http://ip:8888/*.php</code>之后，才能读取到<code>/usr/local/zabbix-server/php</code>目录下的所有前端相关文件</li></ul><h3 id="2-3-解决方案"><a href="#2-3-解决方案" class="headerlink" title="2.3 解决方案"></a>2.3 解决方案</h3><h4 id="2-3-1-修正访问地址"><a href="#2-3-1-修正访问地址" class="headerlink" title="2.3.1 修正访问地址"></a>2.3.1 修正访问地址</h4><p>开发给的接口信息：<code>http://ip:8888/zabbix/zabbix.php?...</code>有问题</p><p><strong>正确的访问地址应该是：</strong> <code>http://ip:8888/zabbix.php?...</code></p><h4 id="2-3-2-验证修复"><a href="#2-3-2-验证修复" class="headerlink" title="2.3.2 验证修复"></a>2.3.2 验证修复</h4><p>修复后的正常访问：</p><p><img src="/media/image3.png" alt="修复后正常访问"></p><h2 id="3-常见排查步骤"><a href="#3-常见排查步骤" class="headerlink" title="3. 常见排查步骤"></a>3. 常见排查步骤</h2><h3 id="3-1-检查服务状态"><a href="#3-1-检查服务状态" class="headerlink" title="3.1 检查服务状态"></a>3.1 检查服务状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查Zabbix Server状态</span></span><br><span class="line">systemctl status zabbix-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查Nginx状态</span></span><br><span class="line">systemctl status nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查PHP-FPM状态</span></span><br><span class="line">systemctl status php-fpm</span><br></pre></td></tr></table></figure><h3 id="3-2-检查日志"><a href="#3-2-检查日志" class="headerlink" title="3.2 检查日志"></a>3.2 检查日志</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查Zabbix Server日志</span></span><br><span class="line"><span class="built_in">tail</span> -f /var/log/zabbix/zabbix_server.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查Nginx错误日志</span></span><br><span class="line"><span class="built_in">tail</span> -f /var/log/nginx/error.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查PHP-FPM日志</span></span><br><span class="line"><span class="built_in">tail</span> -f /var/log/php-fpm/error.log</span><br></pre></td></tr></table></figure><h3 id="3-3-检查网络连接"><a href="#3-3-检查网络连接" class="headerlink" title="3.3 检查网络连接"></a>3.3 检查网络连接</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查端口监听</span></span><br><span class="line">netstat -tlnp | grep :8888</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试数据库连接</span></span><br><span class="line">mysql -u zabbix -p -h 127.0.0.1 -e <span class="string">&quot;SELECT 1&quot;</span></span><br></pre></td></tr></table></figure><h2 id="4-预防措施"><a href="#4-预防措施" class="headerlink" title="4. 预防措施"></a>4. 预防措施</h2><h3 id="4-1-配置管理"><a href="#4-1-配置管理" class="headerlink" title="4.1 配置管理"></a>4.1 配置管理</h3><ol><li><strong>配置文件备份：</strong> 修改前备份重要配置文件</li><li><strong>版本控制：</strong> 使用版本控制管理配置文件</li><li><strong>文档记录：</strong> 记录配置变更和原因</li><li><strong>测试验证：</strong> 修改后充分测试功能</li></ol><h3 id="4-2-监控告警"><a href="#4-2-监控告警" class="headerlink" title="4.2 监控告警"></a>4.2 监控告警</h3><ol><li><strong>服务监控：</strong> 监控Zabbix Server、Nginx、PHP-FPM服务状态</li><li><strong>页面监控：</strong> 监控Zabbix前端页面可访问性</li><li><strong>数据库监控：</strong> 监控数据库连接状态</li><li><strong>日志监控：</strong> 监控关键错误日志</li></ol><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li><strong>路径一致性：</strong> 确保Nginx配置中的路径与实际文件路径一致</li><li><strong>权限设置：</strong> 确保Web服务器有足够权限访问Zabbix文件</li><li><strong>数据库连接：</strong> 验证数据库连接参数的正确性</li><li><strong>URL规范：</strong> 确保访问URL符合Nginx配置规则</li></ol><h2 id="经验总结"><a href="#经验总结" class="headerlink" title="经验总结"></a>经验总结</h2><ul><li>Zabbix前端问题通常与配置文件路径和数据库连接相关</li><li>Nginx配置中的正则表达式需要仔细理解</li><li>正确的URL格式对接口调用至关重要</li><li>系统化的排查方法能快速定位问题根源</li></ul>]]></content>
      
      
      <categories>
          
          <category> 维护类 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis的一些排查及调优</title>
      <link href="/posts/4033335088/"/>
      <url>/posts/4033335088/</url>
      
        <content type="html"><![CDATA[<h1 id="一、如何在redis中获取占用空间比较大的key"><a href="#一、如何在redis中获取占用空间比较大的key" class="headerlink" title="一、如何在redis中获取占用空间比较大的key?"></a>一、如何在redis中获取占用空间比较大的key?</h1><p>参考：<a href="https://www.cnblogs.com/chuanzhang053/p/17121768.html">如何在redis中获取占用空间比较大的key?</a></p><h2 id="1、找出最大的key："><a href="#1、找出最大的key：" class="headerlink" title="1、找出最大的key："></a>1、找出最大的key：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./redis-cli -p &lt;服务端口&gt; -a &lt;认证密码&gt; --bigkeys</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> /usr/local/redis-4.0.3/src/redis-cli -p 6379 -a *** --bigkeys</span><br></pre></td></tr></table></figure><p>显示内容如下，three就是key：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> /usr/local/redis-4.0.3/src/redis-cli -p 6379 -a *** --bigkeys</span><br><span class="line"></span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line">[00.00%] Biggest string found so far <span class="string">&#x27;three&#x27;</span> with 12 bytes → three就是key</span><br></pre></td></tr></table></figure><h2 id="2、分析key占了多大的内存"><a href="#2、分析key占了多大的内存" class="headerlink" title="2、分析key占了多大的内存"></a>2、分析key占了多大的内存</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> /usr/local/redis-4.0.3/src/redis-cli -p 6379</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379 &gt; auth ***</span><br><span class="line">127.0.0.1:6379&gt; memory usage <span class="string">&quot;three&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 63 <span class="comment"># 单位是bytes 1024 Bytes=1K</span></span><br></pre></td></tr></table></figure><h2 id="3、redis键值以及存活多少查看："><a href="#3、redis键值以及存活多少查看：" class="headerlink" title="3、redis键值以及存活多少查看："></a>3、redis键值以及存活多少查看：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">info keyspace</span><br></pre></td></tr></table></figure><h1 id="二、哨兵模式"><a href="#二、哨兵模式" class="headerlink" title="二、哨兵模式"></a>二、哨兵模式</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sentinel down-after-milliseconds mymaster 90000 <span class="comment"># 默认是30秒没有收到节点的响应，则标记为下线，心跳检测每秒1次，持续30秒；可以延长他的判断时间</span></span><br><span class="line"></span><br><span class="line">sentinel failover-timeout mymaster 180000 <span class="comment"># 故障转移的时间，如果故障转移超过了这时间，那会被定义为转移失败；默认就是180000 毫秒，即 180 秒</span></span><br></pre></td></tr></table></figure><h1 id="三、redis检测内存的相关命令"><a href="#三、redis检测内存的相关命令" class="headerlink" title="三、redis检测内存的相关命令"></a>三、redis检测内存的相关命令</h1><p>（有可能导致占用内存的原因：客户端连接、过期时间设置）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> /usr/local/redis-4.0.3/src/redis-cli -p 6379</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379 &gt; info memory</span><br></pre></td></tr></table></figure><p><img src="/media/image1.png" alt="image.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379 &gt; info keyspace <span class="comment"># 查看key的详细信息</span></span><br></pre></td></tr></table></figure><p><img src="/media/image2.png" alt="image.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379 &gt; memory stats <span class="comment"># 内存的一些详细信息</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; CLIENT LIST <span class="comment">#查看客户端连接的具体信息！</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; CLIENT LIST</span><br><span class="line"></span><br><span class="line">....</span><br><span class="line"><span class="built_in">id</span>=177875 addr=132.121.132.191:51164 fd=11 name= age=142 idle=21 flags=N db=6 sub=0 psub=0 multi=-1 qbuf=0 qbuf-free=0 obl=0 oll=0 omem=0 events=r cmd=ping</span><br><span class="line"></span><br><span class="line">....</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主要关注qbuf、 qbuf-free这两个值，判断是否会因为缓冲区不足而导致阻塞</span></span><br><span class="line"></span><br><span class="line">idle=21 空闲21秒</span><br><span class="line"></span><br><span class="line">age=142 客户端连接21秒</span><br><span class="line"></span><br><span class="line">qbuf 客户端查询缓存区的大小，就是客户端发送命令到redis时，会先存到这里面</span><br><span class="line"></span><br><span class="line">qbuf-free 客户端查询缓冲区剩余可用空间的大小</span><br></pre></td></tr></table></figure><h1 id="四、rdb快照配置含义"><a href="#四、rdb快照配置含义" class="headerlink" title="四、rdb快照配置含义"></a>四、rdb快照配置含义</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0.  save 900 1：表示如果在 900 秒（15 分钟）内至少有 1 次写操作，Redis 就会创建一个内存快照。</span><br><span class="line"></span><br><span class="line">    save 300 100：表示如果在 300 秒（5 分钟）内至少有 100 次写操作，Redis 就会创建一个内存快照。（非默认）</span><br><span class="line"></span><br><span class="line">    save 300 10000：表示如果在 300 秒内至少有 10000 次写操作，Redis 就会创建一个内存快照。（非默认）</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 故障类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 性能调优 </tag>
            
            <tag> 故障排查 </tag>
            
            <tag> 内存管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis持久化</title>
      <link href="/posts/295621084/"/>
      <url>/posts/295621084/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h1><h2 id="RDB持久化"><a href="#RDB持久化" class="headerlink" title="RDB持久化"></a>RDB持久化</h2><p>数据生成快照保存到硬盘</p><h3 id="持久化的过程"><a href="#持久化的过程" class="headerlink" title="持久化的过程"></a>持久化的过程</h3><blockquote><p><img src="/media/vaqc2oib7uhwj7xtr1x2bb.png"></p></blockquote><h3 id="优点：快"><a href="#优点：快" class="headerlink" title="优点：快"></a>优点：快</h3><h3 id="缺点：无法实时持久化，因为bgsave只有触动了配置的规定才会去fork，不可能每时每刻都去fork的"><a href="#缺点：无法实时持久化，因为bgsave只有触动了配置的规定才会去fork，不可能每时每刻都去fork的" class="headerlink" title="缺点：无法实时持久化，因为bgsave只有触动了配置的规定才会去fork，不可能每时每刻都去fork的"></a>缺点：无法实时持久化，因为bgsave只有触动了配置的规定才会去fork，不可能每时每刻都去fork的</h3><h3 id="手动触发（直接命令行执行）"><a href="#手动触发（直接命令行执行）" class="headerlink" title="手动触发（直接命令行执行）"></a>手动触发（直接命令行执行）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">save</span><br><span class="line">bgsave（针对save阻塞做了调整）</span><br></pre></td></tr></table></figure><h3 id="自动触发的4种情况"><a href="#自动触发的4种情况" class="headerlink" title="自动触发的4种情况"></a>自动触发的4种情况</h3><ol><li>配置了save (就是redis.conf设置了)</li><li>主从复制：主从同步数据的时候，主节点会执行bgsave生成一个RDB快照给从节点</li><li>debug reload重载redis时，会触发save<ul><li>debug reload：该命令很危险，会中断所有客户端，要慎重执行</li></ul></li><li>默认shutdown，无aof时会自动执行bgsave</li></ol><h3 id="RDB文件默认自动压缩"><a href="#RDB文件默认自动压缩" class="headerlink" title="RDB文件默认自动压缩"></a>RDB文件默认自动压缩</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config get redbcompression 默认是<span class="built_in">yes</span>的，最好不要关掉</span><br></pre></td></tr></table></figure><h2 id="AOF持久化"><a href="#AOF持久化" class="headerlink" title="AOF持久化"></a>AOF持久化</h2><h3 id="AOF重写"><a href="#AOF重写" class="headerlink" title="AOF重写"></a>AOF重写</h3><p>把多条命令合并为一个，是重写的本质</p><blockquote><p><img src="/media/xzoo92z9vddnwepup882b.png"></p></blockquote><h3 id="AOF缓冲区由appendfsync控制（调用系统的fsync操作）"><a href="#AOF缓冲区由appendfsync控制（调用系统的fsync操作）" class="headerlink" title="AOF缓冲区由appendfsync控制（调用系统的fsync操作）"></a>AOF缓冲区由appendfsync控制（调用系统的fsync操作）</h3><ul><li><strong>always</strong></li><li><strong>everysec</strong> （一般建议是每秒）</li><li><strong>no</strong></li></ul><p>注：fsync操作，Linux内核提供页缓冲区来提高IO性能</p><h3 id="自动触发重写（两个参数要一起开）"><a href="#自动触发重写（两个参数要一起开）" class="headerlink" title="自动触发重写（两个参数要一起开）"></a>自动触发重写（两个参数要一起开）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auto-aof-rewrite-min-size 64mb  <span class="comment"># 文件最小体积</span></span><br><span class="line">auto-aof-rewrite-percentage 100  <span class="comment"># （当前AOF空间：appendonly.aof具体大小- aof_base_size）/aof_base_size 这个比值为100</span></span><br></pre></td></tr></table></figure><ul><li><code>aof_base_size</code>：上一次重写的空间</li><li>用INFO persistence查看</li><li><code>appendonly.aof</code>具体大小应该也是有个参数的<code>aof_current_size</code>，但是用INFO persistence暂时没看到</li></ul><p>两者同时达到会触发</p><ul><li><code>appendonly.aof</code> 文件大小（<code>aof_current_size</code> 有这个参数，但是我暂时找不到）&gt; <code>auto-aof-rewrite-min-size</code> 【在生产上必然大于默认值64mb】</li><li>（<code>appendonly.aof</code>具体大小- <code>aof_base_size</code>）&#x2F; <code>aof_base_size</code> &gt;&#x3D; 100</li></ul><p>注意：重写fork子进程的开销<code>bgrewriteaof</code>等同于<code>bgsave</code></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol><li><p>AOF和RDB都需要开启fork操作，fork之后，子进程占用的内存大小等同于父进程，物理内存不足会直接导致fork失败</p></li><li><p>如果AOF持久化开启，则优先加载AOF文件，如果aof格式错误，有个修复命令：<code>redis_check_aof --fix</code>，<code>diff -u</code> 对比差异，支持人工修复</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习类 </category>
          
          <category> 中间件 </category>
          
          <category> Redis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>企业级代码部署级回滚</title>
      <link href="/posts/2355097414/"/>
      <url>/posts/2355097414/</url>
      
        <content type="html"><![CDATA[<h1 id="代码部署方式："><a href="#代码部署方式：" class="headerlink" title="代码部署方式："></a>代码部署方式：</h1><p>1）<strong>灰度部署（金丝雀）</strong>：生产环境要发布新代码时，不改变原有的版本v1，同时部署一个新版本v2应用作为”金丝雀”【在同一台服务器上，区别于蓝绿】，通过负载均衡的方式，让一部分用户测试新代码是否有问题，如果有问题，则撤销负载均衡，让用户访问原先v1版本的代码</p><p>2）<strong>蓝绿部署</strong>：就相当于有两套正式环境，当版本升级时，在一套环境中运行没问题，则切到对应的那套环境上（这种对于服务器成本比较高，比较少用）</p><p>3）<strong>A&#x2F;B测试</strong>：就是公司分成了A组和B组团队，投入一样的多的资源，开发一样的东西，客户都会用，也就是一个团队开发得好就先用哪个团队的，但是两个版本都可供客户选择，都是生产环境（也很烧钱）</p><p><img src="/media/image1.png" alt="image.png"></p><h2 id="1、新建任务"><a href="#1、新建任务" class="headerlink" title="1、新建任务"></a>1、新建任务</h2><p><img src="/media/image2.png" alt="image.png"></p><h2 id="2、自定义参数"><a href="#2、自定义参数" class="headerlink" title="2、自定义参数"></a>2、自定义参数</h2><p>设置3个参数选项：</p><ul><li><code>METHOD=$1</code> 对应 deploy、rollback</li><li><code>BRANCH=$2</code> 对应 main、develop  </li><li><code>GROUP=$3</code> 对应 Group1（192.168.131.67：灰度环境的设备）、Group2（192.168.131.68&#x2F;70：表示生产环境的设备）</li></ul><p><img src="/media/image3.png" alt="image.png"></p><p><img src="/media/image4.png" alt="image.png"></p><h2 id="3、构建环境（Shell脚本）"><a href="#3、构建环境（Shell脚本）" class="headerlink" title="3、构建环境（Shell脚本）"></a>3、构建环境（Shell脚本）</h2><p><img src="/media/image5.png" alt="image.png"></p><h3 id="shel脚本存放位置："><a href="#shel脚本存放位置：" class="headerlink" title="shel脚本存放位置："></a>shel脚本存放位置：</h3><pre><code class="language-bash">#!/bin/bash# 用法: bash deploy_gray.sh &lt;deploy|rollback|offline|online&gt; &lt;main|develop&gt; &lt;Group1|Group2&gt;# 说明：所有远程操作均以 root 用户执行，如需更换为其他用户，请统一修改 ssh/scp 命令中的用户名部分。export HOME=/var/lib/jenkinschmod 600 /var/lib/jenkins/.ssh/id_rsachmod 700 /var/lib/jenkins/.sshset -e# 参数校验if [ $# -ne 3 ]; thenecho &quot;用法: $0 &lt;deploy|rollback|offline|online&gt; &lt;main|develop&gt; &lt;Group1|Group2&gt;&quot;exit 1fiMETHOD=$1BRANCH=$2GROUP=$3# 配置区REPO_URL=&quot;git@192.168.131.69:xingyun-system/devops.git&quot;WORKDIR=&quot;/tmp/gray_deploy&quot;DATE_TAG=$(date +%Y%m%d_%H%M%S)PACKAGE_NAME=&quot;static_$&#123;DATE_TAG&#125;.tar.gz&quot;REMOTE_BASE=&quot;/data/tomcat&quot;REMOTE_PACKAGES=&quot;$REMOTE_BASE/packages&quot;REMOTE_RELEASES=&quot;$REMOTE_BASE/releases&quot;REMOTE_LINK=&quot;/usr/local/tomcat/webapps/ROOT&quot;HAPROXY_HOST=&quot;192.168.131.66&quot; # 你的HAProxy主机（VIP1）HAPROXY_SOCK=&quot;/var/lib/haproxy/stats&quot;BACKEND_NAME_GROUP1=&quot;group1_backend&quot;BACKEND_NAME_GROUP2=&quot;group2_backend&quot;# 目标服务器if [ &quot;$GROUP&quot; == &quot;Group1&quot; ]; thenSERVERS=(&quot;192.168.131.67&quot;)BACKEND_NAME=$BACKEND_NAME_GROUP1SERVER_NAMES=(&quot;tomcat1&quot;)elif [ &quot;$GROUP&quot; == &quot;Group2&quot; ]; thenSERVERS=(&quot;192.168.131.68&quot; &quot;192.168.131.70&quot;)BACKEND_NAME=$BACKEND_NAME_GROUP2SERVER_NAMES=(&quot;tomcat2&quot; &quot;tomcat3&quot;)elseecho &quot;Group参数错误，只能为 Group1 或 Group2&quot;exit 2fi# 拉取代码并打包（保留 devops 目录名）function git_and_package() &#123;GIT_SSH_COMMAND=&quot;ssh -i /var/lib/jenkins/.ssh/id_rsa -o StrictHostKeyChecking=no&quot; git clone git@192.168.131.69:xingyun-system/devops.git /tmp/gray_deployrm -rf /tmp/gray_deploy /tmp/devopsgit clone -b $BRANCH $REPO_URL $WORKDIRif [ $? -ne 0 ]; thenecho &quot;代码拉取失败&quot;exit 3ficp -r $WORKDIR /tmp/devopscd /tmptar czf $PACKAGE_NAME devopsrm -rf devopscd -&#125;# 上传包到目标服务器function upload_package() &#123;for server in &quot;$&#123;SERVERS[@]&#125;&quot;; dossh root@$server &quot;mkdir -p $REMOTE_PACKAGES $REMOTE_RELEASES&quot;scp /tmp/$PACKAGE_NAME root@$server:$REMOTE_PACKAGES/done&#125;# 远程解压并切换软连接，并重启 Tomcatfunction remote_deploy_and_link() &#123;for server in &quot;$&#123;SERVERS[@]&#125;&quot;; dossh root@$server &quot;mkdir -p $REMOTE_RELEASES/$&#123;DATE_TAG&#125; &amp;&amp;tar xzf $REMOTE_PACKAGES/$PACKAGE_NAME -C $REMOTE_RELEASES/$&#123;DATE_TAG&#125; &amp;&amp;rm -rf $REMOTE_LINK &amp;&amp;ln -sfn $REMOTE_RELEASES/$&#123;DATE_TAG&#125;/devops $REMOTE_LINK &amp;&amp;shutdown.sh &amp;&amp; startup.sh&quot;echo &quot;已部署并切换软连接到 $server，并重启 Tomcat&quot;done&#125;# 回滚到上一个版本（软连接切换到上一个目录/devops，并重启 Tomcat）function rollback_version() &#123;for server in &quot;$&#123;SERVERS[@]&#125;&quot;; doPREV=$(ssh root@$server &quot;ls -dt $REMOTE_RELEASES/* | sed -n &#39;2p&#39;&quot;)if [ -z &quot;$PREV&quot; ]; thenecho &quot;$server 没有可回滚的历史版本&quot;exit 4fissh root@$server &quot;rm -rf $REMOTE_LINK &amp;&amp; ln -sfn $PREV/devops $REMOTE_LINK &amp;&amp; shutdown.sh &amp;&amp; startup.sh&quot;echo &quot;$server 已回滚到 $PREV，并重启 Tomcat&quot;done&#125;# 灰度完成后摘除 group1 节点function offline_group1() &#123;for name in &quot;$&#123;SERVER_NAMES[@]&#125;&quot;; dossh root@$HAPROXY_HOST &quot;echo &#39;disable server $BACKEND_NAME/$name&#39; | socat stdio $HAPROXY_SOCK&quot;echo &quot;$name 已从 $BACKEND_NAME 摘除&quot;done&#125;# 灰度回滚/上线后重新加入 group1 节点function online_group1() &#123;for name in &quot;$&#123;SERVER_NAMES[@]&#125;&quot;; dossh root@$HAPROXY_HOST &quot;echo &#39;enable server $BACKEND_NAME/$name&#39; | socat stdio $HAPROXY_SOCK&quot;echo &quot;$name 已重新加入 $BACKEND_NAME&quot;done&#125;# 主流程case &quot;$METHOD&quot; indeploy)git_and_packageupload_packageremote_deploy_and_link;;rollback)rollback_version;;offline)offline_group1;;online)online_group1;;*)echo &quot;Method参数错误，只能为 deploy、rollback、offline、online&quot;exit 5;;esacecho &quot;操作完成&quot;jenkins中构建选择shell执行bash /var/lib/jenkins/scripts/deploy_gray.sh $METHOD $BRANCH $GROUP![image.png](media/image6.png)## 4、更新gitlab上的版本此时tomcat访问的界面如下：![image.png](media/image7.png)我们针对这两个问题重新提交一次代码1、先将项目拉到本地进行修改git clone http://192.168.131.69/xingyun-system/devops.git # 先将项目拉到本地进行修改[root@131_70 devops]# cat index.html&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt; # 我已经设置了一个UTF-8了，等下验证下界面是否还会乱码&lt;title&gt;第一个html程序&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;hello world!&lt;/h1&gt; # 也加了一个标题hello world! version2 both !!hello world! version3 both !!hello world! version4 both !!&lt;/body&gt;&lt;/html&gt;2、添加至缓存区并提交至本地仓库git add . &amp;&amp; git commit -m &quot;fix title and add h1&quot;3、提交至远程仓库，即gitlabgit push注意：一般灰度测试是测试了开发分支develop成功之后才合并至主分支main的,我刚刚一直在主分支下操作因此我强制更新主分支至开发分支，以便等下用开发分支做测试和部署[root@131_70 ~]# cd devops/ # 还是当前拉下来的main分支项目[root@131_70 devops]# git checkout develop # 直接切换至develop分支下[root@131_70 devops]# git branch # 确认此时在开发分支* developmain[root@131_70 devops]# git reset --hard main # 强制将main分支的内容重置到develop下[root@131_70 devops]# git push origin develop # 推送至gitlab的develop下## 5、jenkins中进行参数构建![image.png](media/image8.png)## 6、灰度更新效果可以发现此时灰度环境：131.67已完成部署，&lt;http://192.168.131.67:8080/&gt;![image.png](media/image9.png)我们用vip访问看看：&lt;http://192.168.131.128:5000/&gt;负载至67、68、70；此时用户如果访问到67，那么他们就是此次升级的灰度用户了！灰度部署的目的也就达成![image.png](media/image10.png)![image.png](media/image11.png)## 7、回滚灰度环境此时如果发现访问的效果不如所愿，则回滚灰度环境![image.png](media/image12.png)![image.png](media/image13.png)## 8、灰度部署成功之后，部署生产设备（即Group2）此时访问vip:&lt;http://192.168.131.128:5000/&gt;不管怎么刷新就都是最新版本看![image.png](media/image14.png)## 9、摘除灰度环境（联动haproxy）1、在jenkins中增加两个参数选项：offline和online**offline灰度完成之后，将灰度环境从生产环境中摘除（也就是让vip只负载至68和70，将灰度环境67摘除）****online上线时，将灰度环境加入生产的负载中**![image.png](media/image15.png)此时我们已经将生产环境升级为最近版本了，但是此时灰度服务器还在负载池中，我们用**offline将灰度环境67从负载池中摘除**  echo &#39;disable server group1_backend/tomcat1&#39; | socat stdio/var/lib/haproxy/haproxy.sock将灰度环境加入负载池，则用enableecho &#39;enable server group1_backend/tomcat1&#39; | socat stdio/var/lib/haproxy/stats</code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习类 </category>
          
          <category> CICD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 部署策略 </tag>
            
            <tag> 灰度部署 </tag>
            
            <tag> 蓝绿部署 </tag>
            
            <tag> 回滚机制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins （CD）</title>
      <link href="/posts/2354803713/"/>
      <url>/posts/2354803713/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Jenkins简介"><a href="#一、Jenkins简介" class="headerlink" title="一、Jenkins简介"></a>一、Jenkins简介</h1><p>jenkins是java语言写的，用于自动化各种任务，包括编译、测试、部署，是插件化服务，拥有1500+插件实现各种功能</p><p>官网：<a href="https://www.jenkins.io/">https://www.jenkins.io/</a></p><h2 id="二、Jenkins怎么实现分布式构建测试部署？"><a href="#二、Jenkins怎么实现分布式构建测试部署？" class="headerlink" title="二、Jenkins怎么实现分布式构建测试部署？"></a>二、Jenkins怎么实现分布式构建测试部署？</h2><p>运用Jenkins的agent (Jenkins remoting)实现编译过程</p><p><img src="/media/image1.png" alt="image.png"></p><h2 id="三、安装"><a href="#三、安装" class="headerlink" title="三、安装"></a>三、安装</h2><p><strong>注意：<strong>直接yum最新的，不然有些插件版本不兼容，<strong>jdk直接下载17</strong>，之前内容太久了，会导致插件安装不成功，2025年我安装的是</strong>Jenkins 2.504.2</strong>，插件安装都很顺利，已将&#x2F;var&#x2F;lib&#x2F;jenkins&#x2F;plugins目录打包，有需要直接解压放在改目录下！！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/lib/jenkins</span><br><span class="line">tar zxvf plugins.tar.gz</span><br></pre></td></tr></table></figure><p>(该包放在”D:\Desktop\自己\jenkins插件安装包”下)</p><h3 id="1、安装jdk"><a href="#1、安装jdk" class="headerlink" title="1、安装jdk"></a>1、安装jdk</h3><p>要看是jenkins是哪个版本的，要对应安装jdk版本</p><h3 id="2、官网下载LTS（长期支持版）"><a href="#2、官网下载LTS（长期支持版）" class="headerlink" title="2、官网下载LTS（长期支持版）"></a>2、官网下载LTS（长期支持版）</h3><p><a href="https://get.jenkins.io/redhat-stable/">https://get.jenkins.io/redhat-stable/</a> （直接跳过去下载rpm包就行)</p><p>→ 目前下载的长期稳定版本是<em><strong>2.346.1</strong></em>，该版本支持Java 8, Java 11, or Java 17</p><p><img src="/media/image2.png" alt="image.png"></p><p><img src="/media/image3.png" alt="image.png"></p><p><img src="/media/image4.png" alt="image.png"></p><h3 id="3、安装"><a href="#3、安装" class="headerlink" title="3、安装"></a>3、安装</h3><h4 id="1、安装："><a href="#1、安装：" class="headerlink" title="1、安装："></a>1、安装：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum localinstall -y jenkins-2.346.1-1.1.noarch.rpm</span><br></pre></td></tr></table></figure><h4 id="2、修改配置文件："><a href="#2、修改配置文件：" class="headerlink" title="2、修改配置文件："></a>2、修改配置文件：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/jenkins</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">JENKINS_PORT=<span class="string">&quot;8086&quot;</span> <span class="comment"># 8080担心被撞了，我改成了8086</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="3、⭐修改自启动文件"><a href="#3、⭐修改自启动文件" class="headerlink" title="3、⭐修改自启动文件"></a>3、⭐修改自启动文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@131_70 jenkins]# egrep -v <span class="string">&quot;^$|#&quot;</span> /usr/lib/systemd/system/jenkins.service</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=Jenkins Continuous Integration Server</span><br><span class="line">Requires=network.target</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">NotifyAccess=main</span><br><span class="line">ExecStart=/usr/bin/jenkins</span><br><span class="line">Restart=on-failure</span><br><span class="line">SuccessExitStatus=143</span><br><span class="line">Environment=<span class="string">&quot;JAVA_HOME=/usr/local/jdk11&quot;</span> <span class="comment"># 添加上java路径</span></span><br><span class="line">Environment=<span class="string">&quot;PATH=/usr/local/jdk11/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin&quot;</span> <span class="comment"># 添加上java路径</span></span><br><span class="line">User=jenkins</span><br><span class="line">Group=jenkins</span><br><span class="line">Environment=<span class="string">&quot;JENKINS_HOME=/var/lib/jenkins&quot;</span></span><br><span class="line">WorkingDirectory=/var/lib/jenkins</span><br><span class="line">Environment=<span class="string">&quot;JENKINS_WEBROOT=%C/jenkins/war&quot;</span></span><br><span class="line">Environment=<span class="string">&quot;JAVA_OPTS=-Djava.awt.headless=true&quot;</span></span><br><span class="line">Environment=<span class="string">&quot;JENKINS_PORT=8086&quot;</span> <span class="comment"># 修改为对应的端口</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><h4 id="4、重启并设置自启动"><a href="#4、重启并设置自启动" class="headerlink" title="4、重启并设置自启动"></a>4、重启并设置自启动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum install fontconfig -y <span class="comment"># 不然后面会报错，jenkins需要必要的字体配置</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl daemon-reload  <span class="comment"># 加载配置文件</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> jenkins <span class="comment"># 设置自启动</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl start jenkins <span class="comment"># 启动</span></span><br></pre></td></tr></table></figure><p>注：如果没有安装字体，这里会遇到一个问题（字体配置为空）：java.lang.RuntimeException: Fontconfig head is null, check your fonts or fonts configuration</p><p>安装sudo yum install fontconfig -y 即可</p><h4 id="4、初始化"><a href="#4、初始化" class="headerlink" title="4、初始化"></a>4、初始化</h4><p>先跳过插件安装，因为推荐安装可能很多插件都有问题<br><strong>(最好安装推荐插件！！！！不然后面邮箱都配置不了！！！！)</strong></p><p><img src="/media/image5.png" alt="image.png"></p><p><img src="/media/image6.png" alt="image.png"></p><p>这里账密设置一致了</p><p>jenkinsadmin&#x2F;jenkinsadmin</p><p><img src="/media/image7.png" alt="image.png"></p><p><img src="/media/image8.png" alt="image.png"></p><h4 id="5、配置镜像地址-配置为国内华为云镜像"><a href="#5、配置镜像地址-配置为国内华为云镜像" class="headerlink" title="5、配置镜像地址(配置为国内华为云镜像)"></a>5、配置镜像地址(配置为国内华为云镜像)</h4><h5 id="1、配置文件1：-root-jenkins-hudson-model-UpdateCenter-xml"><a href="#1、配置文件1：-root-jenkins-hudson-model-UpdateCenter-xml" class="headerlink" title="1、配置文件1：&#x2F;root&#x2F;.jenkins&#x2F;hudson.model.UpdateCenter.xml"></a>1、配置文件1：&#x2F;root&#x2F;.jenkins&#x2F;hudson.model.UpdateCenter.xml</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> /root/.jenkins/hudson.model.UpdateCenter.xml /root/.jenkins/hudson.model.UpdateCenter.xml_bak</span><br><span class="line"></span><br><span class="line">[root@131_70 .jenkins]# <span class="built_in">cat</span> /root/.jenkins/hudson.model.UpdateCenter.xml</span><br><span class="line"></span><br><span class="line">&lt;?xml version=<span class="string">&#x27;1.1&#x27;</span> encoding=<span class="string">&#x27;UTF-8&#x27;</span>?&gt;</span><br><span class="line">&lt;sites&gt;</span><br><span class="line">&lt;site&gt;</span><br><span class="line">&lt;<span class="built_in">id</span>&gt;default&lt;/id&gt;</span><br><span class="line">&lt;url&gt;https://mirrors.huaweicloud.com/jenkins/updates/update-center.json&lt;/url&gt; <span class="comment"># 改成华为云的镜像地址</span></span><br><span class="line">&lt;/site&gt;</span><br></pre></td></tr></table></figure><h5 id="2、配置文件2：-var-lib-jenkins-updates-default-json"><a href="#2、配置文件2：-var-lib-jenkins-updates-default-json" class="headerlink" title="2、配置文件2：&#x2F;var&#x2F;lib&#x2F;jenkins&#x2F;updates&#x2F;default.json"></a>2、配置文件2：&#x2F;var&#x2F;lib&#x2F;jenkins&#x2F;updates&#x2F;default.json</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> /var/lib/jenkins/updates/default.json /var/lib/jenkins/updates/default.json_bak</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&quot;s#www.google.com#www.baidu.com#g&quot;</span> /var/lib/jenkins/updates/default.json</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&quot;s#updates.jenkins.io/download#https://mirrors.huaweicloud.com/jenkins#g&quot;</span> /var/lib/jenkins/updates/default.json</span><br></pre></td></tr></table></figure><h2 id="四、jenkins基础配置"><a href="#四、jenkins基础配置" class="headerlink" title="四、jenkins基础配置"></a>四、jenkins基础配置</h2><h3 id="1、邮件配置"><a href="#1、邮件配置" class="headerlink" title="1、邮件配置"></a>1、邮件配置</h3><p>**目的：**部署有问题时，可以邮件通知运维</p><h4 id="1、配置邮箱-（SSL-TLS协议勾上）"><a href="#1、配置邮箱-（SSL-TLS协议勾上）" class="headerlink" title="1、配置邮箱 （SSL&#x2F;TLS协议勾上）"></a>1、配置邮箱 （SSL&#x2F;TLS协议勾上）</h4><p><img src="/media/image9.png" alt="image.png"></p><p><img src="/media/image10.png" alt="image.png"></p><h4 id="邮箱测试"><a href="#邮箱测试" class="headerlink" title="邮箱测试"></a>邮箱测试</h4><p><img src="/media/image11.png" alt="image.png"></p><p>测试成功！</p><p><img src="/media/image12.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”1.8593613298337708in”}</p><p><strong>2、全局工具配置</strong></p><p><img src="/media/image13.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”3.0389074803149607in”}</p><p><strong>五、Jenkins安装插件的步骤（已安装[Loale为例：本地汉化]{.mark}）</strong></p><p>[1、Manage Jenkins → Manage Plugins →  Available → 搜索 Locale<br>（对应插件） → （对应插件是否有红色警告，没有则直接]{.mark}Download now<br>and install after restart ，否则需要选择版本下载[）]{.mark}</p><p>[2、点击插件 → Releases → checksums → 查找对应的版本 →<br>插件下载成功（locale.hpi）]{.mark}</p><p>[3、回到Jenkins →  Advanced → 找到 Deploy Plugin →<br>选择文件上传插件（点击Deploy）→ 安装成功之后重启 →]{.mark}<br><a href="http://localhost:8080/restart">http:&#x2F;&#x2F;你的jenkins地址&#x2F;restart</a><br>[（使插件生效）]{.mark}</p><p><img src="/media/image14.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”2.7683398950131233in”}</p><p><img src="/media/image15.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”2.124316491688539in”}</p><p><img src="/media/image16.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”2.692759186351706in”}</p><p><img src="/media/image17.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”2.347678258967629in”}</p><p>**注意：**如果下载页面没有红色的警告，点击 Download now and install<br>after restart 就会下载最新版本的插件，安装并重启</p><p>如果有类似：Warning: This plugin is built for Jenkins 2.426.2 or newer.<br>Jenkins will refuse to load this plugin if installed.<br>这样的提示，就表明当前插件的版本和你所下载的 Jenkins<br>的版本不兼容，很大概率会安装不成功，这个时候就需要去下载兼容该 Jenkins<br>版本的插件</p><p>[点击插件 → Releases → checksums → 查找对应的版本 →<br>插件下载成功（locale.hpi）]{.mark}</p><p><img src="/media/image18.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”2.2636122047244096in”}</p><p><img src="/media/image19.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”2.9511165791776026in”}</p><p><img src="/media/image20.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”3.026859142607174in”}</p><p><img src="/media/image21.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”2.1408114610673667in”}</p><p><img src="/media/image22.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”2.626022528433946in”}</p><p><img src="/media/image23.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”2.363248031496063in”}</p><p><img src="/media/image24.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”3.029773622047244in”}</p><p><strong>附：Jenkins默认目录及启停方式</strong></p><p>主配置文件：&#x2F;etc&#x2F;sysconfig&#x2F;jenkins #<br>JENKINS_PORT、JENKINS_HOME、JAVA_OPTS 等</p><p>工作目录（存储数据）：&#x2F;var&#x2F;lib&#x2F;jenkins&#x2F;<br>#包含核心配置文件、插件、构建记录、用户数据等。</p><p>​日志文件：&#x2F;var&#x2F;log&#x2F;jenkins&#x2F;jenkins.log （找不到）→ 查看日志：sudo<br>journalctl -u jenkins -f</p><p>服务管理命令：</p><p>sudo systemctl start jenkins</p><p>sudo systemctl stop jenkins</p><p>sudo systemctl restart jenkins​</p><p>sudo systemctl status jenkins</p><p>systemctl enable jenkins</p><p>sudo systemctl daemon-reload  # 加载配置文件</p>]]></content>
      
      
      <categories>
          
          <category> 学习类 </category>
          
          <category> CICD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> CI/CD </tag>
            
            <tag> 自动化部署 </tag>
            
            <tag> 持续集成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitlab部署（远程私有仓库）</title>
      <link href="/posts/992671829/"/>
      <url>/posts/992671829/</url>
      
        <content type="html"><![CDATA[<h1 id="持续集成-CI-主要就是git、gitlab"><a href="#持续集成-CI-主要就是git、gitlab" class="headerlink" title="持续集成(CI)主要就是git、gitlab"></a>持续集成(CI)主要就是git、gitlab</h1><h2 id="一、gitlab部署条件"><a href="#一、gitlab部署条件" class="headerlink" title="一、gitlab部署条件"></a>一、gitlab部署条件</h2><p>1、<strong>cpu</strong>：最低2C；官网2C支持100个用户（开发），4C支持500个用户；8C支持1000个用户….</p><p>2、<strong>内存</strong>：最低4G，8G支持100个用户，生产最好是8G以上（公司一般就是8C16G至少）</p><p>3、<strong>磁盘</strong>：磁盘要求比较高，因为gitlab是要用很久的</p><ul><li>磁盘够大：2T吧</li><li>IO够快：最好是SSD，没有就RAID10，至少4块盘</li></ul><p>4、<strong>网卡</strong>：越高传输越快，万兆10 Gigabit（10GbE）</p><h2 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h2><p>虚拟机的配置：2C4G20G，centos7</p><p>gitlab-ce版本下载路径：<a href="https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/">https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/</a><br>#gitlab-ce为社区版；gitlab-ee为企业版</p><h3 id="安装如下："><a href="#安装如下：" class="headerlink" title="安装如下："></a>安装如下：</h3><h4 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@131_69 ~]# yum localinstall -y gitlab-ce-14.9.5-ce.0.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><h4 id="2、修改配置文件"><a href="#2、修改配置文件" class="headerlink" title="2、修改配置文件"></a>2、修改配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/gitlab/gitlab.rb</span><br><span class="line"></span><br><span class="line">external_url <span class="string">&#x27;http://192.168.131.69&#x27;</span> <span class="comment"># 改为本机地址或对应域名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置SMTP服务器来发送通知邮件，对应加入这些配置</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_enable&#x27;</span>] = <span class="literal">true</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_address&#x27;</span>] = <span class="string">&quot;smtp.qq.com&quot;</span> <span class="comment"># 这个地方我用的是qq邮箱，如果用163或者公司邮箱，将qq改掉（smtp.163.com）</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_port&#x27;</span>] = 465 <span class="comment"># 一般就是465</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_user_name&#x27;</span>] = <span class="string">&quot;***@qq.com&quot;</span> <span class="comment"># 写账号名</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_password&#x27;</span>] = <span class="string">&quot;***&quot;</span> <span class="comment"># 这个地方不能直接写密码，要写授权码，qq授权码申请见备注</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_domain&#x27;</span>] = <span class="string">&quot;qq.com&quot;</span> <span class="comment"># 域名</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_authentication&#x27;</span>] = <span class="string">&quot;login&quot;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_enable_starttls_auto&#x27;</span>] = <span class="literal">true</span> <span class="comment">#自动加密</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_tls&#x27;</span>] = <span class="literal">true</span> <span class="comment"># 启用加密连接</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;gitlab_email_from&#x27;</span>] = <span class="string">&#x27;***@qq.com&#x27;</span> <span class="comment"># 发件邮箱</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;gitlab_email_reply_to&#x27;</span>] = <span class="string">&#x27;***@qq.com&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="3、首次执行，需要重置应用配置-gitlab-ctl-–help-可查看具体用法，以下这些为常用命令-："><a href="#3、首次执行，需要重置应用配置-gitlab-ctl-–help-可查看具体用法，以下这些为常用命令-：" class="headerlink" title="3、首次执行，需要重置应用配置 ( gitlab-ctl –help 可查看具体用法，以下这些为常用命令)："></a>3、首次执行，需要重置应用配置 ( gitlab-ctl –help 可查看具体用法，以下这些为常用命令)：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@131_69 gitlab]# gitlab-ctl reconfigure <span class="comment"># 每次修改配置文件就要运行一下</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">gitlab Reconfigured!</span><br></pre></td></tr></table></figure><h4 id="4、查看gitlab状态（第8课12：43）："><a href="#4、查看gitlab状态（第8课12：43）：" class="headerlink" title="4、查看gitlab状态（第8课12：43）："></a>4、查看gitlab状态（第8课12：43）：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">[root@131_69 gitlab]# gitlab-ctl status</span><br><span class="line"></span><br><span class="line"><span class="comment">#用于处理prometheus的告警，通过邮件等方式发送告警通知</span></span><br><span class="line">run: alertmanager: (pid 3800) 92s; run: <span class="built_in">log</span>: (pid 3406) 194s</span><br><span class="line"></span><br><span class="line"><span class="comment">#gitlab的核心服务，git仓库的智能服务器</span></span><br><span class="line">run: gitaly: (pid 3822) 91s; run: <span class="built_in">log</span>: (pid 2870) 325s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于导出gitlab的指标数据，供给普罗米修斯收集，以监控Gitlab的运行状态</span></span><br><span class="line">run: gitlab-exporter: (pid 3774) 95s; run: <span class="built_in">log</span>: (pid 3349) 210s</span><br><span class="line"></span><br><span class="line"><span class="comment">#支持 GitLab 与 Kubernetes 集群的集成</span></span><br><span class="line">run: gitlab-kas: (pid 3741) 97s; run: <span class="built_in">log</span>: (pid 3131) 312s</span><br><span class="line"></span><br><span class="line"><span class="comment">#轻量级反向代理服务器，处理一些大文件的上传下载、长连接等，减轻主应用（Puma）的负担</span></span><br><span class="line">run: gitlab-workhorse: (pid 3753) 96s; run: <span class="built_in">log</span>: (pid 3248) 229s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 监控可视化平台</span></span><br><span class="line">run: grafana: (pid 3831) 91s; run: <span class="built_in">log</span>: (pid 3666) 131s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志文件轮转，避免日志文件过大</span></span><br><span class="line">run: logrotate: (pid 2793) 340s; run: <span class="built_in">log</span>: (pid 2802) 337s</span><br><span class="line"></span><br><span class="line"><span class="comment"># Web服务器，作为Gitlab的前端代理，处理Https请求，并将请求转发给gitlab-workhorse(反向代理)或puma（应用服务）</span></span><br><span class="line">run: nginx: (pid 3279) 225s; run: <span class="built_in">log</span>: (pid 3294) 222s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于收集主机系统的指标，以便普罗米修斯进行系统级监控</span></span><br><span class="line">run: node-exporter: (pid 3763) 96s; run: <span class="built_in">log</span>: (pid 3323) 218s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于收集PG数据库的指标，以便监控数据库状态</span></span><br><span class="line">run: postgres-exporter: (pid 3816) 91s; run: <span class="built_in">log</span>: (pid 3433) 186s</span><br><span class="line"></span><br><span class="line"><span class="comment"># Gitlab使用数据库，存储项目、用户、组等元数据</span></span><br><span class="line">run: postgresql: (pid 2989) 321s; run: <span class="built_in">log</span>: (pid 3003) 319s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 监控系统，用于收集和存储Gitlab各个组件的监控指标</span></span><br><span class="line">run: prometheus: (pid 3783) 94s; run: <span class="built_in">log</span>: (pid 3388) 198s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主应用服务器（Ruby应用服务器），处理Web请求和后台作业（puma只会创建后台作业，不会执行，后台任务由Sidekiq执行）</span></span><br><span class="line">run: puma: (pid 3188) 243s; run: <span class="built_in">log</span>: (pid 3199) 240s</span><br><span class="line"></span><br><span class="line"><span class="comment">#缓存数据库，用于会话存储和任务队列（用于sidekiq）</span></span><br><span class="line">run: redis: (pid 2823) 334s; run: <span class="built_in">log</span>: (pid 2832) 330s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 监控redis的指标，以便普罗米修斯监控Redis状态</span></span><br><span class="line">run: redis-exporter: (pid 3776) 94s; run: <span class="built_in">log</span>: (pid 3367) 204s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于处理后台作业（如：发送邮件、处理CI/CD任务等）的异步任务处理框架</span></span><br><span class="line">run: sidekiq: (pid 3206) 237s; run: <span class="built_in">log</span>: (pid 3222) 234s</span><br></pre></td></tr></table></figure><h3 id="备注：qq授权码"><a href="#备注：qq授权码" class="headerlink" title="备注：qq授权码"></a>备注：qq授权码</h3><p><img src="/media/image1.png" alt="image.png"></p><p><img src="/media/image2.png" alt="image.png"></p><p><img src="/media/image3.png" alt="image.png"></p><p>前往绑定，用手机发完短信之后，就会有授权码：***</p><h2 id="三、访问gitlab"><a href="#三、访问gitlab" class="headerlink" title="三、访问gitlab"></a>三、访问gitlab</h2><p>事先环境要配置好，防火墙和selinux要关掉</p><p>直接访问：<a href="http://192.168.131.69/%EF%BC%8C%E7%95%8C%E9%9D%A2%E5%A6%82%E4%B8%8B%EF%BC%9A">http://192.168.131.69/，界面如下：</a></p><p>默认账号是root，<br>密码存放于&#x2F;etc&#x2F;gitlab&#x2F;initial_root_password这个文件夹（24小时会自动清除）</p><p>**注：**我登录时，这个文件已经消失了，直接用命令指定root密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> gitlab-rake <span class="string">&quot;gitlab:password:reset[root]&quot;</span></span><br></pre></td></tr></table></figure><p>（这里我设定是***）</p><p><img src="/media/image4.png" alt="image.png"></p><p>一般gitlab都会关闭注册这个选项，一般不允许开发随便注册账号（记得sign-up才是注册，sign-in是登录，千万不要搞错了！！如果错改了登录限制，需要去数据库修改！）</p><p><img src="/media/image5.png" alt="image.png"></p><p><img src="/media/image6.png" alt="image.png"></p><h2 id="四、gitlab上的一些操作"><a href="#四、gitlab上的一些操作" class="headerlink" title="四、gitlab上的一些操作"></a>四、gitlab上的一些操作</h2><h3 id="1、点击Admin这个扳手可以看到有："><a href="#1、点击Admin这个扳手可以看到有：" class="headerlink" title="1、点击Admin这个扳手可以看到有："></a>1、点击Admin这个扳手可以看到有：</h3><ul><li><strong>服务（project）</strong>：开发自己可以建的</li><li><strong>Users</strong>：开发</li><li><strong>Groups</strong>：项目（一般一个项目有多个服务；本项目的开发一般就看不到其它项目的服务）</li></ul><p><img src="/media/image7.png" alt="image.png"></p><h3 id="2、给开发同事新建账号"><a href="#2、给开发同事新建账号" class="headerlink" title="2、给开发同事新建账号"></a>2、给开发同事新建账号</h3><p><img src="/media/image8.png" alt="image.png"></p><p><img src="/media/image9.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”1.7085411198600176in”}</p><p>3、给指定开发同事修改密码</p><p><img src="/media/image10.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”3.0344050743657043in”}</p><p><img src="/media/image11.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”3.045660542432196in”}</p><p><img src="/media/image12.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”3.0141458880139984in”}</p><p>4、此时，我们用自己建立的账号登录git</p><p>**注意：**一个浏览器只能登录一个git账号；比如谷歌已经登录root了（也就是Admin了），那你此时再用zhengwenyi这个账号去登录，还是只能看到Admin用户，你要重新切换一个浏览器登录普通用户才行。</p><p><img src="/media/image13.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”3.2437521872265966in”}</p><p><strong>五、gitlab授权项目组</strong></p><p>1、我们先自建一个像项目</p><p><img src="/media/image14.png" alt="QQ_1749556026009.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”3.043934820647419in”}</p><p><img src="/media/image15.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”3.0186472003499563in”}</p><p><img src="/media/image16.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”3.0344050743657043in”}</p><p>2、添加组内成员，我们先给zhengwenyi授权项目负责人级别</p><p><img src="/media/image17.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”3.0344050743657043in”}</p><p><img src="/media/image18.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”3.0650109361329836in”}</p><p>3、zhengwenyi就可以编辑project了（一个项目是有很多project的）</p><p><img src="/media/image19.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”2.933108048993876in”}</p><p>⭐ 留个问题！看看后面会不会用到</p><p><img src="/media/image20.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”3.4440944881889766in”}</p><p><strong>六、常用的gitlab信息</strong></p><p># gitlab安装目录：</p><p>&#x2F;etc&#x2F;gitlab # 配置文件目录</p><p>&#x2F;run&#x2F;gitlab # 运行文件目录</p><p>&#x2F;opt&#x2F;gitlab # 安装目录</p><p>&#x2F;var&#x2F;opt&#x2F;gitlab # 数据目录</p><p>&#x2F;var&#x2F;log&#x2F;gitlab # 日志目录</p><p># gitlab-ctl客户端命令</p><p>gitlab-ctl reconfigure # 修改gitlab之后都要运行这个命令</p><p>gitlab-ctl stop|start|restart|status # 服务启停状态</p><p>gitlab-ctl tail nginx # 查看某个组件的日志</p><p><strong>七、模拟日常操作</strong></p><p>前提：可以在本地windows下载一个git bash，可以直接实现linux操作</p><p>我们在远程仓库下建一个文件，方便后续模拟</p><p><img src="/media/image21.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”3.0006397637795277in”}</p><p>我们新建一个index.html文件，默认会在master下</p><p>&lt;html&gt;</p><p>    &lt;head&gt;</p><p>        &lt;title&gt;第一个html程序&lt;&#x2F;title&gt;</p><p>    &lt;&#x2F;head&gt;</p><p>    &lt;body&gt;</p><p>        hello world!</p><p>    &lt;&#x2F;body&gt;</p><p>&lt;&#x2F;html&gt;</p><p><img src="/media/image22.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”3.04576334208224in”}</p><p><strong>1、将gitlab的代码克隆一份到本地</strong></p><p>git clone <a href="http://192.168.131.69/xingyun-system/devops.git">http://192.168.131.69/xingyun-system/devops.git</a></p><p><img src="/media/image23.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”3.1033311461067368in”}</p><p>第一次克隆，会让你输入账号密码zhengwenyi&#x2F;zhengwenyi，后续就不会了（windows有本地账密的托管功能）</p><p><img src="/media/image24.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”2.911130796150481in”}</p><p>此时可以看到已经克隆成功</p><p><img src="/media/image25.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”2.5115234033245843in”}</p><p><strong>2、开发修改代码的全过程</strong></p><p>1、进入devops这个目录：cd devops&#x2F;<br>（这个很重要！git的所有操作都要基于代码目录才能执行！）</p><p>2、修改你的代码：</p><p>vim index.html</p><p>&lt;html&gt;</p><p>&lt;head&gt;</p><p>&lt;title&gt;第一个html程序&lt;&#x2F;title&gt;</p><p>&lt;&#x2F;head&gt;</p><p>&lt;body&gt;</p><p>hello world!</p><p>hello world! version2 both !!</p><p>&lt;&#x2F;body&gt;</p><p>&lt;&#x2F;html&gt;</p><p>3、查看下当前状态：git status</p><p>.…</p><p>(use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</p><p>(use &quot;git restore &lt;file&gt;...&quot; to discard changes in working<br>directory)</p><p>modified: index.html</p><p>.…</p><p>4、我们可以看到当前还在工作区，我们将修改后的代码提交至暂存区</p><p>git add .</p><p>git status</p><p>5、将代码提交至本地仓库（也就是本地，非远程仓库gitlab）</p><p>$ git commit -m &quot;v2版本诞生啦！&quot;</p><p>[main d5ea803] v2版本诞生啦！</p><p>1 file changed, 1 insertion(+)</p><p>$ git status # 此时它提示，可以将代码提交至远程仓库了！</p><p>On branch main</p><p>Your branch is ahead of &#39;origin&#x2F;main&#39; by 1 commit.</p><p>(use &quot;git push&quot; to publish your local commits)</p><p>nothing to commit, working tree clean</p><p><strong>3、提交（推送push）代码到远程仓库gitlab</strong></p><p>$ git push # 最终都提交至gitlab的命令</p><p>Enumerating objects: 5, done.</p><p>Counting objects: 100% (5&#x2F;5), done.</p><p>Delta compression using up to 22 threads</p><p>Compressing objects: 100% (3&#x2F;3), done.</p><p>Writing objects: 100% (3&#x2F;3), 378 bytes | 378.00 KiB&#x2F;s, done.</p><p>Total 3 (delta 1), reused 0 (delta 0), pack-reused 0 (from 0)</p><p>To <a href="http://192.168.131.69/xingyun-system/devops.git">http://192.168.131.69/xingyun-system/devops.git</a></p><p>cd79a46..d5ea803 main -&gt; main</p><p>此时在gitlab上可以看到，我们的代码已经在gitlab上更新了</p><p><img src="/media/image26.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”3.041114391951006in”}</p><p><img src="/media/image27.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”2.696748687664042in”}</p><p><strong>4、将代码拉取到最新</strong></p><p>git pull</p><p>适用场景：开发<strong>每天上班</strong>基本都会<strong>git pull</strong><br>一下，因为这样可以确保他们拉取到最新的代码</p><p>（<strong>git<br>push</strong>类比一下，就是每个开发<strong>每天下班</strong>前，都各自进行一次代码提交）</p><p><strong>八、常用的git命令</strong></p><p><strong>1、Linux使用git最好配置全局信息</strong></p><p>想用Linux进行git操作的话，最好配上全局信息，用于识别你是谁</p><p>[root@131_70 ~]# git config --global user.name &quot;Jane&quot; #配置姓名</p><p>[root@131_70 ~]# git config --global user.email<br>&quot;<a href="mailto:&#x7a;&#104;&#101;&#x6e;&#x67;&#119;&#x65;&#x6e;&#121;&#x40;&#x67;&#122;&#115;&#101;&#x6e;&#x64;&#105;&#46;&#99;&#x6e;">zhengweny@gzsendi.cn</a>&quot; #配置邮箱</p><p>[root@131_70 ~]# git config --global color.ui true #开启颜色识别</p><p><strong>2、.gitignore 文件的使用（隐藏文件）</strong></p><p>开发git<br>push代码到远程仓库gitlab时，有些文件是不想上传的，这时就可以创建一个.gitignore文件，将不需要上传的目录或文件写进去</p><p>场景：比如一些中间件的配置文件，本地用的是测试环境的中间件信息，生产环境有生产环境的配置文件信息，所以此时我们不需要将本地的中间件信息上传至gitlab</p><p>1、同样进入代码目录下，我们进行模拟，新建两个中间件配置文件：</p><p>cd &#x2F;c&#x2F;Users&#x2F;29404&#x2F;gitlab_learn&#x2F;devops</p><p>Mysql文件：vim my.cnf</p><p>[mysql]</p><p>Hostip&#x3D;192.168.131.69</p><p>Redis文件：vim redis.conf</p><p>Redis_ip&#x3D;192.168.131.69</p><p>2、我们创建一个.gitignore文件，将redis.conf写入</p><p>vim .gitignore</p><p>redis.conf # 直接将不想上传的文件写入即可</p><p>3、git status查看下，目前修改的所有文件都还在工作区</p><p>.…</p><p>Untracked files:</p><p>(use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</p><p>.gitignore</p><p>my.cnf</p><p>mysql.cnf</p><p>...</p><p>4、放入暂存区并提交</p><p>$ git add . # 加入暂存区</p><p>warning: in the working copy of &#39;.gitignore&#39;, LF will be replaced by<br>CRLF the next time Git touches it</p><p>warning: in the working copy of &#39;my.cnf&#39;, LF will be replaced by CRLF<br>the next time Git touches it</p><p>warning: in the working copy of &#39;mysql.cnf&#39;, LF will be replaced by<br>CRLF the next time Git touches it</p><p>$ git commit -m &quot;gitignore_test&quot; # 提交</p><p>[main 842c5a5] gitignore_test</p><p>3 files changed, 5 insertions(+)</p><p>create mode 100644 .gitignore</p><p>create mode 100644 my.cnf</p><p>git push 推送至gitlab展示如下（redis.conf就不会被单独推送）：</p><p><img src="/media/image28.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”2.748522528433946in”}</p><p><strong>3、git重要命令</strong></p><p><img src="/media/image29.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”3.573475503062117in”}</p><p><strong>九、Gitlab实现分支管理</strong></p><p>常见的是生产&#x2F;开发模型：master分支与develop分支</p><p><img src="/media/image30.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”2.6666119860017496in”}</p><p><strong>十、分支创建</strong></p><p>一般是生产&#x2F;开发模型：master分支与develop分支</p><p>我们创建develop分支，基于master创建（即main主分支），也就是会从master复制一份到develop分支</p><p><img src="/media/image31.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”2.0326268591426073in”}</p><p>创建develop开发分支如下：</p><p><img src="/media/image32.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”3.2640113735783025in”}</p><p><img src="/media/image33.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”2.7822878390201224in”}</p><p><strong>十一、分支合并</strong></p><p>两种方法：web界面合并&#x2F;命令合并</p><p>1、先创建一个开发账号模拟该场景（zhengwenyi是管理员账号）：Jane&#x2F;12345678<br>（超级管理员Admin创建）</p><p>2、由管理者zhengwenyi邀请Jane进入该项目（以普通开发的权限进入）</p><p><img src="/media/image34.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”3.0614173228346457in”}</p><p><img src="/media/image35.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”2.4468832020997375in”}</p><p><strong>Web分支合并及命令合并模拟</strong></p><p>1、Jane开发指定将develop分支下的代码拉取下来进行开发</p><p>⭐ 指定对应分支代码拉取 git clone -b develop gitlab地址</p><p>[root@131_69 ~]# git config --global user.name Jane</p><p>[root@131_69 ~]# git config --global user.email<br>&quot;<a href="mailto:&#90;&#x68;&#x65;&#110;&#103;&#119;&#101;&#x6e;&#x79;&#x32;&#64;&#x32;&#57;&#x32;&#53;&#x2e;&#99;&#111;&#x6d;">Zhengweny2@2925.com</a>&quot;</p><p>[root@131_69 ~]# git clone -b develop<br><a href="http://192.168.131.69/xingyun-system/devops.git">http://192.168.131.69/xingyun-system/devops.git</a></p><p>Cloning into &#39;devops&#39;...</p><p>Username for &#39;<a href="http://192.168.131.69/">http://192.168.131.69\</a>‘: Jane</p><p>Password for &#39;<a href="http://Jane@192.168.131.69/">http://Jane@192.168.131.69\</a>‘:</p><p>remote: Enumerating objects: 16, done.</p><p>remote: Counting objects: 100% (16&#x2F;16), done.</p><p>remote: Compressing objects: 100% (12&#x2F;12), done.</p><p>remote: Total 16 (delta 2), reused 0 (delta 0), pack-reused 0</p><p>Unpacking objects: 100% (16&#x2F;16), done.</p><p>[root@131_69 ~]# cd devops&#x2F;</p><p>[root@131_69 devops]# git add .</p><p>[root@131_69 devops]# git status</p><p>[root@131_69 devops]# git commit -m &quot;v3版本&quot;</p><p>[root@131_69 devops]# git push # 推送至gitlab</p><p>.…</p><p>Username for &#39;<a href="http://192.168.131.69/">http://192.168.131.69\</a>‘: Jane</p><p>Password for &#39;<a href="http://Jane@192.168.131.69/">http://Jane@192.168.131.69\</a>‘:</p><p>Counting objects: 5, done.</p><p>Delta compression using up to 4 threads.</p><p>Compressing objects: 100% (3&#x2F;3), done.</p><p>Writing objects: 100% (3&#x2F;3), 318 bytes | 0 bytes&#x2F;s, done.</p><p>Total 3 (delta 2), reused 0 (delta 0)</p><p>remote:</p><p>remote: To create a merge request for develop, visit:</p><p>remote:<br><a href="http://192.168.131.69/xingyun-system/devops/-/merge_requests/new?merge_request%5Bsource_branch%5D=develop">http://192.168.131.69/xingyun-system/devops/-/merge_requests/new?merge_request%5Bsource_branch%5D=develop</a></p><p>remote:</p><p>To <a href="http://192.168.131.69/xingyun-system/devops.git">http://192.168.131.69/xingyun-system/devops.git</a></p><p>f24e8e7..6e57315 develop -&gt; develop</p><p>2、开发者Jane用页面进行合并（需发送邮件）</p><p>此时develop是v3版本，main分支还是v2版本</p><p><img src="/media/image36.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”2.7845395888013997in”}</p><p><img src="/media/image37.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”2.548180227471566in”}</p><p>此时普通开发Jane需要提交合并请求给项目管理者zhengwenyi</p><p><img src="/media/image38.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”3.189932195975503in”}</p><p>管理者zhengwenyi收到合并请求</p><p><img src="/media/image39.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”2.8723293963254592in”}</p><p><img src="/media/image40.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”3.2369991251093615in”}</p><p><img src="/media/image41.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”3.345049212598425in”}</p><p>现在我们看看主分支</p><p><img src="/media/image42.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”3.189932195975503in”}</p><p>3、直接用命令合并：git merge</p><p>注意要在有主分区下才能合并：git branch 即可看到当前有什么分支！</p><p><img src="/media/image43.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”2.176281714785652in”}</p><p>命令:</p><p>$ git merge origin&#x2F;develop</p><p>$ git push</p><p><img src="/media/image44.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”1.753170384951881in”}</p><p>此时主分区main和develop就是v4了</p><p><img src="/media/image45.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”3.182311898512686in”}</p><p>十二、gitlab汉化</p><p><img src="/media/image46.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”2.9646227034120733in”}</p><p><img src="/media/image47.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”3.132580927384077in”}</p>]]></content>
      
      
      <categories>
          
          <category> 学习类 </category>
          
          <category> CICD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CI/CD </tag>
            
            <tag> GitLab </tag>
            
            <tag> 私有仓库 </tag>
            
            <tag> 部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git学习——版本控制系统</title>
      <link href="/posts/511148807/"/>
      <url>/posts/511148807/</url>
      
        <content type="html"><![CDATA[<h1 id="版本控制系统：Git"><a href="#版本控制系统：Git" class="headerlink" title="版本控制系统：Git"></a>版本控制系统：Git</h1><h2 id="1、为什么需要git？"><a href="#1、为什么需要git？" class="headerlink" title="1、为什么需要git？"></a>1、为什么需要git？</h2><p>不管我们改了什么，都可以实现版本回退</p><h2 id="2、集中式版本控制系统：SVN服务器（相当于一个中央服务器）"><a href="#2、集中式版本控制系统：SVN服务器（相当于一个中央服务器）" class="headerlink" title="2、集中式版本控制系统：SVN服务器（相当于一个中央服务器）"></a>2、集中式版本控制系统：SVN服务器（相当于一个中央服务器）</h2><p>每个开发写完代码之后都提交到SVN，SVN就相当于每个开发共有的本地仓库，这就导致一个问题，如果SVN挂了，开发们都无法提交</p><h2 id="3、分布式版本控制系统（没有中央服务器之说）"><a href="#3、分布式版本控制系统（没有中央服务器之说）" class="headerlink" title="3、分布式版本控制系统（没有中央服务器之说）"></a>3、分布式版本控制系统（没有中央服务器之说）</h2><p>每个开发本地都有自己的代码仓库，后续再用git命令同步到git服务器&#x2F;github代码仓库</p><h2 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y git</span><br></pre></td></tr></table></figure><h2 id="修改环境变量，定制git的环境（3个重要参数）"><a href="#修改环境变量，定制git的环境（3个重要参数）" class="headerlink" title="修改环境变量，定制git的环境（3个重要参数）"></a>修改环境变量，定制git的环境（3个重要参数）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git config --global ×××.×××</span><br><span class="line"><span class="comment">#全局，只针对当前登录用户生效，git配置写入~/.gitonfig （用得最多）</span></span><br><span class="line"></span><br><span class="line">git config --system ×××.×××</span><br><span class="line"><span class="comment">#对所有登录linux系统的用户都生效，写入到/etc/gitconfig</span></span><br><span class="line"></span><br><span class="line">git config --<span class="built_in">local</span> ×××.×××</span><br><span class="line"><span class="comment">#本地，只针对某一个文件/文件夹生效。（例如/data/databases/文件，则配置位于/data/databases/.git/config</span></span><br></pre></td></tr></table></figure><ul><li><code>--global</code> 全局：只针对当前登录用户生效，git配置写入 <code>~/gitconfig</code></li></ul><h2 id="用户Git信息配置（部分命令）"><a href="#用户Git信息配置（部分命令）" class="headerlink" title="用户Git信息配置（部分命令）"></a>用户Git信息配置（部分命令）</h2><p>想使用git，必须先配置git信息</p><p>git分布式版本控制</p><p>每个人在自己的本地，都可以对代码版本进行管理</p><p>提交v1版本：….提交人姓名….提交人邮箱…提交时间</p><p>提交v2版本：….Jane…Jane邮箱…</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global ...</span><br></pre></td></tr></table></figure><h3 id="1、全局配置命令："><a href="#1、全局配置命令：" class="headerlink" title="1、全局配置命令："></a>1、全局配置命令：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@131_70 ~]# git config --global user.name <span class="string">&quot;Jane&quot;</span> <span class="comment">#配置姓名</span></span><br><span class="line"></span><br><span class="line">[root@131_70 ~]# git config --global user.email <span class="string">&quot;zhengweny@gzsendi.cn&quot;</span> <span class="comment">#配置邮箱</span></span><br><span class="line"></span><br><span class="line">[root@131_70 ~]# git config --global color.ui <span class="literal">true</span> <span class="comment">#开启颜色识别</span></span><br></pre></td></tr></table></figure><h3 id="全局用户信息查看"><a href="#全局用户信息查看" class="headerlink" title="全局用户信息查看"></a>全局用户信息查看</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@131_70 ~]# <span class="built_in">cat</span> .gitconfig</span><br><span class="line"></span><br><span class="line">[user]</span><br><span class="line">name = Jane</span><br><span class="line">email = zhengweny@gzsendi.cn</span><br><span class="line"></span><br><span class="line">[color]</span><br><span class="line">ui = <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="2、系统所有linux用户的通用配置，检查-etc-gitconfig"><a href="#2、系统所有linux用户的通用配置，检查-etc-gitconfig" class="headerlink" title="2、系统所有linux用户的通用配置，检查&#x2F;etc&#x2F;gitconfig"></a>2、系统所有linux用户的通用配置，检查&#x2F;etc&#x2F;gitconfig</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@131_70 ~]# git config --system user.name <span class="string">&quot;Jane Zheng&quot;</span></span><br><span class="line"></span><br><span class="line">[root@131_70 ~]# git config --system uer.email <span class="string">&quot;***@qq.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查</span></span><br><span class="line">[root@131_70 ~]# <span class="built_in">cat</span> /etc/gitconfig</span><br><span class="line"></span><br><span class="line">[user]</span><br><span class="line">name = Jane Zheng</span><br><span class="line"></span><br><span class="line">[uer]</span><br><span class="line">email = ***@qq.com</span><br><span class="line"></span><br><span class="line"><span class="comment">#列表检查</span></span><br><span class="line">[root@131_70 ~]# git config --system --list</span><br><span class="line">user.name=Jane Zheng</span><br><span class="line">uer.email=***@qq.com</span><br></pre></td></tr></table></figure><p><img src="/media/image1.png" alt="image.png"></p><h2 id="重要：Git的核心原理-→-4个区域"><a href="#重要：Git的核心原理-→-4个区域" class="headerlink" title="重要：Git的核心原理 → 4个区域"></a>重要：Git的核心原理 → 4个区域</h2><p>git命令就是用于将文件改动切换到不同空间来记录（4个仓库可按顺序进行来回切换）</p><p>工作区 → 暂存区 → 本地git仓库 → （协调开发）推送到远程代码仓库，github&#x2F;gitlab</p><p><img src="/media/image2.png" alt="image.png"></p><h2 id="Git如何用的三个场景"><a href="#Git如何用的三个场景" class="headerlink" title="Git如何用的三个场景"></a>Git如何用的三个场景</h2><p>⭐当一个文件夹中出现”.git”时，就表明这是一个git仓库，并且被git所管理了，且能执行各种git命令行</p><h3 id="场景一（运维常用）"><a href="#场景一（运维常用）" class="headerlink" title="场景一（运维常用）:"></a>场景一（运维常用）:</h3><p>本地已经有一个代码，需要用git管理<br>(程序员已经把开发好的程序发给了运维，运维要针对这个目录进行git初始化管理)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@131_70 project]# <span class="built_in">ls</span> /data/project <span class="comment">#这是开发的程序</span></span><br><span class="line"></span><br><span class="line">[root@131_70 project]# <span class="built_in">cd</span> /data/project &amp;&amp; git init</span><br><span class="line"><span class="comment">#进入这个开发给的程序，运维进行git初始化</span></span><br><span class="line"></span><br><span class="line">[root@131_70 project]# ll -a <span class="comment">#</span></span><br><span class="line">初始化之后，隐藏目录下有.git就说明这是一个git仓库了</span><br><span class="line"></span><br><span class="line">total 4</span><br><span class="line">drwxr-xr-x 3 root root 34 May 24 04:52 .</span><br><span class="line">drwxr-xr-x. 4 admin admin 41 May 24 04:50 ..</span><br><span class="line">drwxr-xr-x 7 root root 119 May 24 04:52 .git</span><br><span class="line">-rw-r--r-- 1 root root 14 May 24 04:52 hello.sh</span><br></pre></td></tr></table></figure><h3 id="场景二（开发常用）："><a href="#场景二（开发常用）：" class="headerlink" title="场景二（开发常用）："></a>场景二（开发常用）：</h3><p>本地没有代码，要新建一个git版本仓库<br>（程序员一般开始写代码，从开始就会先用git进行版本管理）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@131_70 data]# <span class="built_in">mkdir</span> my_code</span><br><span class="line"></span><br><span class="line">[root@131_70 data]# <span class="built_in">cd</span> my_code/ &amp;&amp; git init <span class="comment"># 只要执行git init就表示git初始化开始，该目录已经被git管理了，以后有任何代码变动，都会被git管理、记录</span></span><br></pre></td></tr></table></figure><h3 id="场景三（运维常用）："><a href="#场景三（运维常用）：" class="headerlink" title="场景三（运维常用）："></a>场景三（运维常用）：</h3><p>本地没有代码，也没有git版本仓库，去github代码托管平台下载一个git版本代码库</p><p><strong>git clone <a href="https://github.com/xxx/xxx">https://github.com/xxx/xxx</a> # git clone命令会去github平台，下载一个已经被git管理的代码仓库了</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@131_70 data]# git <span class="built_in">clone</span> https://github.com/Zhengweny/Zhengweny.github.io.git</span><br><span class="line"></span><br><span class="line">[root@131_70 data]# <span class="built_in">ls</span></span><br><span class="line">hadoop-2.7.3 my_code project Zhengweny.github.io</span><br><span class="line"></span><br><span class="line">[root@131_70 Zhengweny.github.io]# ll <span class="comment"># 就把代码库拉下来了</span></span><br><span class="line">total 52</span><br><span class="line">-rw-r--r-- 1 root root 17213 May 24 05:09 404.html</span><br><span class="line">drwxr-xr-x 2 root root 24 May 24 05:09 about</span><br><span class="line">drwxr-xr-x 3 root root 36 May 24 05:09 archives</span><br><span class="line">drwxr-xr-x 3 root root 38 May 24 05:09 categories</span><br><span class="line">drwxr-xr-x 2 root root 24 May 24 05:09 charts</span><br><span class="line">drwxr-xr-x 2 root root 38 May 24 05:09 css</span><br><span class="line">drwxr-xr-x 4 root root 55 May 24 05:09 images</span><br><span class="line">drwxr-xr-x 2 root root 110 May 24 05:09 img</span><br><span class="line">-rw-r--r-- 1 root root 23523 May 24 05:09 index.html</span><br><span class="line">drwxr-xr-x 3 root root 67 May 24 05:09 js</span><br><span class="line">drwxr-xr-x 3 root root 22 May 24 05:09 posts</span><br><span class="line">-rw-r--r-- 1 root root 4318 May 24 05:09 search.xml</span><br><span class="line">drwxr-xr-x 4 root root 48 May 24 05:09 tags</span><br></pre></td></tr></table></figure><p><img src="/media/image3.png" alt="image.png"></p><h2 id="重要：Git提交的流程——Git生命周期"><a href="#重要：Git提交的流程——Git生命周期" class="headerlink" title="重要：Git提交的流程——Git生命周期"></a>重要：Git提交的流程——Git生命周期</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@131_70 .git]# <span class="built_in">pwd</span></span><br><span class="line">/data/my_code/.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># /data/my_code/ 是工作目录</span></span><br><span class="line"><span class="comment"># .git是本地仓库</span></span><br></pre></td></tr></table></figure><h2 id="工作目录、暂存区、本地仓库分别对应的地方"><a href="#工作目录、暂存区、本地仓库分别对应的地方" class="headerlink" title="工作目录、暂存区、本地仓库分别对应的地方"></a>工作目录、暂存区、本地仓库分别对应的地方</h2><p><img src="/media/image4.png" alt="image.png"></p><p><img src="/media/image5.png" alt="image.png"></p><p>1、文件夹中有&quot;.git&quot;这个隐藏文件夹，就是git的本地仓库了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@131_70 data]# <span class="built_in">cd</span> /data/my_code/</span><br><span class="line"></span><br><span class="line">[root@131_70 my_code]# ll -a</span><br><span class="line"></span><br><span class="line">total 4</span><br><span class="line"></span><br><span class="line">drwxr-xr-x 3 root root 34 May 24 05:02 .</span><br><span class="line"></span><br><span class="line">drwxr-xr-x. 6 admin admin 83 May 24 05:09 ..</span><br><span class="line"></span><br><span class="line">drwxr-xr-x 7 root root 119 May 24 04:59 .git</span><br><span class="line"></span><br><span class="line">-rw-r--r-- 1 root root 11 May 24 05:02 hello.sh</span><br></pre></td></tr></table></figure><p>2、查看工作区的信息（查看文件的变动状态：未跟踪，已跟踪）</p><p>**核心命令：**git status，请经常使用这个命令，掌握git工作区的状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@131_70 my_code]# git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># On branch master</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Initial commit</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Untracked files:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span></span><br><span class="line"><span class="comment"># 这个文件是否要添加到暂存区</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># hello.sh</span></span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use <span class="string">&quot;git add&quot;</span> to</span><br><span class="line">track)</span><br></pre></td></tr></table></figure><p>3、确认要将文件添加到暂存区：git add ×××</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">[root@131_70 my_code]# <span class="built_in">ls</span></span><br><span class="line"></span><br><span class="line">hello.sh</span><br><span class="line"></span><br><span class="line">[root@131_70 my_code]# git add . <span class="comment"># 将项目中变动的hello.sh添加到暂存区</span></span><br><span class="line"></span><br><span class="line">[root@131_70 my_code]# git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># On branch master</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Initial commit</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Changes to be committed: # git 会提示你是否要提交到本地仓库</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage) #</span></span><br><span class="line">当你要在缓存区删除这个文件，可用这个命令</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># new file: hello.sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">4、提交内容至本地仓库：git commit -m <span class="string">&quot;提交注释信息&quot;</span></span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">git commit -m <span class="string">&quot;提交注释信息&quot;</span></span><br><span class="line"></span><br><span class="line">[root@131_70 my_code]# git commit -m <span class="string">&quot;Jane first commit&quot;</span></span><br><span class="line"></span><br><span class="line">[master (root-commit) dc4186f] Jane first commit</span><br><span class="line"></span><br><span class="line">1 file changed, 1 insertion(+)</span><br><span class="line"></span><br><span class="line">create mode 100644 hello.sh</span><br><span class="line"></span><br><span class="line">[root@131_70 my_code]# git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># On branch master</span></span><br><span class="line"></span><br><span class="line">nothing to commit, working directory clean <span class="comment">#</span></span><br><span class="line">说明目前没有什么需要提交至本地仓库的</span><br></pre></td></tr></table></figure><p><strong>Git各种操作</strong></p><p><img src="/media/image6.png" alt="image.png"></p><p><strong>1、git给文件重命名（这是一个坑）</strong></p><p>这里记住一个容易混淆的命令：git checkout有两个用法</p><p>1）切换分支：git checkout 分支名</p><p>2）恢复文件（恢复被放在暂存区被删除的文件）：git checkout 文件名</p><p>场景如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@131_70 mv_test]# <span class="built_in">ls</span> <span class="comment"># 这是目前工作区和暂存区的文档</span></span><br><span class="line"></span><br><span class="line">v1test.txt</span><br><span class="line"></span><br><span class="line">[root@131_70 mv_test]# <span class="built_in">mv</span> v1test.txt v1.txt <span class="comment">#</span></span><br><span class="line">我直接给它像往常操作一样重命名</span><br><span class="line"></span><br><span class="line">此时git status看到这个<span class="built_in">mv</span>操作在git中相当于做了两个步骤</span><br><span class="line"></span><br><span class="line">步骤一：deleted: v1test.txt <span class="comment"># 删除了源文件</span></span><br><span class="line"></span><br><span class="line">步骤二： 创建一个新文件 v1.txt</span><br><span class="line"></span><br><span class="line">此时我们发现不应该这样重命名，我们如何恢复至原状？</span><br><span class="line"></span><br><span class="line">1、删除这个新文件：<span class="built_in">rm</span> -r v1.txt</span><br><span class="line"></span><br><span class="line">2、恢复当时暂存区的旧文件v1test.txt：git checkout v1test.txt</span><br><span class="line"></span><br><span class="line">3、git status 发现恢复如初</span><br><span class="line"></span><br><span class="line">git 重命名正确操作（原linux操作<span class="built_in">mv</span>前面记得加git就是了）</span><br><span class="line"></span><br><span class="line">git <span class="built_in">mv</span> v1test.txt v1.txt</span><br></pre></td></tr></table></figure><p><strong>2、git版本回退</strong></p><p>1、查看存档信息：</p><p>1）存档：git commit -m “解释用途”</p><p>2）查看档案：</p><p>① git log ;</p><p>② git log –oneline； # 信息显示在一行</p><p>③ git log -2 或者 git log –oneline -2 #<br>生产环境有很多log，所以一般都会指定条数输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line">[root@131_70 gitstash_test]# git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line">commit 2a433e003c4da09fb6a3510d9f1febc5dc93b7bd</span><br><span class="line"></span><br><span class="line">Merge: 92f74fe 2c25cc8</span><br><span class="line"></span><br><span class="line">Author: Jane &lt;zhengweny@gzsendi.cn&gt;</span><br><span class="line"></span><br><span class="line">Date: Tue Jun 3 08:54:14 2025 -0400</span><br><span class="line"></span><br><span class="line">合并冲突后的最终版</span><br><span class="line"></span><br><span class="line">commit 92f74fe30c84a421aa815680cbbcc18e52e71d74</span><br><span class="line"></span><br><span class="line">Author: Jane &lt;zhengweny@gzsendi.cn&gt;</span><br><span class="line"></span><br><span class="line">Date: Tue Jun 3 08:41:20 2025 -0400</span><br><span class="line"></span><br><span class="line">第一版测试</span><br><span class="line"></span><br><span class="line">commit 2c25cc8cdcd1c3b64d3e333f8351b5ee1064d6a8</span><br><span class="line"></span><br><span class="line">Author: Jane &lt;zhengweny@gzsendi.cn&gt;</span><br><span class="line"></span><br><span class="line">Date: Tue Jun 3 08:40:41 2025 -0400</span><br><span class="line"></span><br><span class="line">提交一个xixi.sh文件做测试</span><br><span class="line"></span><br><span class="line">commit 907643dae02cbddceef9076f2529884834724f2a</span><br><span class="line"></span><br><span class="line">Author: Jane &lt;zhengweny@gzsendi.cn&gt;</span><br><span class="line"></span><br><span class="line">Date: Tue Jun 3 08:37:00 2025 -0400</span><br><span class="line"></span><br><span class="line">提交版本2的文件</span><br><span class="line"></span><br><span class="line">commit 25799a001afe82058e6b432bb2d2972e29fa0362</span><br><span class="line"></span><br><span class="line">Author: Jane &lt;zhengweny@gzsendi.cn&gt;</span><br><span class="line"></span><br><span class="line">Date: Sun Jun 1 05:37:00 2025 -0400</span><br><span class="line"></span><br><span class="line">修复了v2.txt的bug</span><br><span class="line"></span><br><span class="line">commit 07676500d2db27e5361ade0da38edb4a95ae03b8</span><br><span class="line"></span><br><span class="line">Author: Jane &lt;zhengweny@gzsendi.cn&gt;</span><br><span class="line"></span><br><span class="line">Date: Sun Jun 1 05:11:38 2025 -0400</span><br><span class="line"></span><br><span class="line">首次提交代码</span><br><span class="line"></span><br><span class="line">==============================================================================================</span><br><span class="line"></span><br><span class="line">[root@131_70 gitstash_test]# git <span class="built_in">log</span> --oneline</span><br><span class="line"></span><br><span class="line">2a433e0 合并冲突后的最终版</span><br><span class="line"></span><br><span class="line">92f74fe 第一版测试</span><br><span class="line"></span><br><span class="line">2c25cc8 提交一个xixi.sh文件做测试</span><br><span class="line"></span><br><span class="line">907643d 提交版本2的文件</span><br><span class="line"></span><br><span class="line">25799a0 修复了v2.txt的bug</span><br><span class="line"></span><br><span class="line">0767650 首次提交代码</span><br><span class="line"></span><br><span class="line">==============================================================================================</span><br><span class="line"></span><br><span class="line">[root@131_70 gitstash_test]# git <span class="built_in">log</span> --oneline -2</span><br><span class="line"></span><br><span class="line">2a433e0 合并冲突后的最终版</span><br><span class="line"></span><br><span class="line">92f74fe 第一版测试</span><br><span class="line"></span><br><span class="line">**3、git 历史回退**</span><br><span class="line"></span><br><span class="line">git 版本管理，是通过指针管理的，这个指针名字叫做HEAD</span><br><span class="line"></span><br><span class="line"><span class="comment"># HEAD 表示当前版本</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># HEAD^ 表示上一个版本</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># HEAD^^ 表示上上个版本</span></span><br><span class="line"></span><br><span class="line">⭐版本回退命令：</span><br><span class="line"></span><br><span class="line">用法一：git reset --hard 版本<span class="built_in">id</span>号</span><br><span class="line"></span><br><span class="line">用法二：</span><br><span class="line"></span><br><span class="line">git reset --hard HEAD^ <span class="comment">#回退到上一个版本</span></span><br><span class="line"></span><br><span class="line">git reset --hard HEAD^^ <span class="comment">#回退到上上个版本</span></span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">[root@131_70 git_life]# <span class="built_in">cat</span> git_all.txt <span class="comment">#</span></span><br><span class="line">我们要回退前，先看下这个文件的信息</span><br><span class="line"></span><br><span class="line">learn git now</span><br><span class="line"></span><br><span class="line">modify git_all.txt</span><br><span class="line"></span><br><span class="line">[root@131_70 git_life]# git <span class="built_in">log</span> --oneline</span><br><span class="line"></span><br><span class="line">996d6bc 修改了第一个版本</span><br><span class="line"></span><br><span class="line">eb29f87 提交gitx学习的第一个版本</span><br><span class="line"></span><br><span class="line">[root@131_70 git_life]# git reset --hard eb29f87 <span class="comment">#</span></span><br><span class="line">我们回退至最初的版本</span><br><span class="line"></span><br><span class="line">HEAD is now at eb29f87 提交gitx学习的第一个版本</span><br><span class="line"></span><br><span class="line">[root@131_70 git_life]# <span class="built_in">cat</span> git_all.txt <span class="comment">#</span></span><br><span class="line">此时就是文件最原始的模样了，说明我们回退成功了</span><br><span class="line"></span><br><span class="line">learn git now</span><br><span class="line"></span><br><span class="line">⭐查看版本所有的变动信息</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">此时我们看日志，发现只能看到当前的日志信息了，之前的日志都看不到了，但是我现在发现回退错版本了，我想回去，我得怎么办？</span><br><span class="line"></span><br><span class="line">命令：git reflog</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">[root@131_70 git_life]# git <span class="built_in">log</span> --oneline <span class="comment"># 发现只能看到现有的日志了</span></span><br><span class="line"></span><br><span class="line">eb29f87 提交gitx学习的第一个版本</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们现在查看所有版本变动的记录：</span></span><br><span class="line"></span><br><span class="line">[root@131_70 git_life]# git reflog</span><br><span class="line"></span><br><span class="line">eb29f87 HEAD@&#123;0&#125;: reset: moving to eb29f87</span><br><span class="line"></span><br><span class="line">996d6bc HEAD@&#123;1&#125;: commit: 修改了第一个版本 <span class="comment"># 我们重新回到这里</span></span><br><span class="line"></span><br><span class="line">eb29f87 HEAD@&#123;2&#125;: commit (initial): 提交gitx学习的第一个版本</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时我们再进行版本重置，回到未进行reset的之前的版本：</span></span><br><span class="line"></span><br><span class="line">[root@131_70 git_life]# git reset --hard 996d6bc</span><br><span class="line"></span><br><span class="line">HEAD is now at 996d6bc 修改了第一个版本</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看文件内容，确认已经回去最新的版本了</span></span><br><span class="line"></span><br><span class="line">[root@131_70 git_life]# <span class="built_in">cat</span> git_all.txt</span><br><span class="line"></span><br><span class="line">learn git now</span><br><span class="line"></span><br><span class="line">modify git_all.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时日志也回去了</span></span><br><span class="line"></span><br><span class="line">[root@131_70 git_life]# git <span class="built_in">log</span> --oneline</span><br><span class="line"></span><br><span class="line">996d6bc 修改了第一个版本</span><br><span class="line"></span><br><span class="line">eb29f87 提交gitx学习的第一个版本</span><br><span class="line"></span><br><span class="line">**4、⭐git生命周期全过程演示**</span><br><span class="line"></span><br><span class="line">1、创建一个git项目并初始化：</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">[root@131_70 zhengwenyi_git_test]# <span class="built_in">mkdir</span> git_life</span><br><span class="line"></span><br><span class="line">[root@131_70 zhengwenyi_git_test]# git init git_life</span><br></pre></td></tr></table></figure><p>2、在项目下添加一个文件，此时这个文件就在工作区：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@131_70 zhengwenyi_git_test]# <span class="built_in">cd</span> git_life/</span><br><span class="line"></span><br><span class="line">[root@131_70 git_life]# <span class="built_in">echo</span> <span class="string">&quot;learn git now&quot;</span> &gt;&gt; git_all.txt</span><br><span class="line"></span><br><span class="line">[root@131_70 git_life]# git status</span><br><span class="line"></span><br><span class="line">....</span><br><span class="line"></span><br><span class="line"><span class="comment"># (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># git_all.txt</span></span><br><span class="line"></span><br><span class="line">....</span><br><span class="line"></span><br><span class="line">3、此时将工作区的文件加入暂存区</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">[root@131_70 git_life]# git add git_all.txt</span><br></pre></td></tr></table></figure><p>4、我们将文件提交至本地仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@131_70 git_life]# git commit -m <span class="string">&quot;提交gitx学习的第一个版本&quot;</span></span><br></pre></td></tr></table></figure><p>5、⭐转折 → 此时我们不小心更改了已经提交至本地仓库的git_all.txt内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">[root@131_70 git_life]# <span class="built_in">echo</span> <span class="string">&quot;modify git_all.txt&quot;</span> &gt;&gt; git_all.txt</span><br><span class="line"></span><br><span class="line">[root@131_70 git_life]# git status <span class="comment">#</span></span><br><span class="line">它其实提供了两个选择，我们先选择再次提交至暂存区</span><br><span class="line"></span><br><span class="line">....</span><br><span class="line"></span><br><span class="line"><span class="comment"># (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working</span></span><br><span class="line">directory)</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># modified: git_all.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">6、再次提交提交至暂存区和本地仓库</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">[root@131_70 git_life]# git add git_all.txt &amp;&amp; git commit -m <span class="string">&quot;修改了第一个版本&quot;</span></span><br><span class="line"></span><br><span class="line">[master 996d6bc] 修改了第一个版本</span><br><span class="line"></span><br><span class="line">7、我们查看本地存档信息</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">[root@131_70 git_life]# git <span class="built_in">log</span> --oneline</span><br><span class="line"></span><br><span class="line">996d6bc 修改了第一个版本</span><br><span class="line"></span><br><span class="line">eb29f87 提交gitx学习的第一个版本</span><br><span class="line"></span><br><span class="line">⭐8、我们从本地仓库中，删除对从某个文件的跟踪，也就是让文件从本地仓库回到工作区的命令：</span><br><span class="line"></span><br><span class="line">git <span class="built_in">rm</span> --cache 文件名</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">[root@131_70 git_life]# git <span class="built_in">rm</span> --cache git_all.txt</span><br><span class="line"></span><br><span class="line">[root@131_70 git_life]# git status</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line"></span><br><span class="line"><span class="comment"># (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># git_all.txt</span></span><br><span class="line"></span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line">⭐9、我们一般将文件回退到工作区之后，会有以下的操作动机：</span><br><span class="line"></span><br><span class="line">1）我不想要这个文件了，将文件打回工作区之后的目的是为了直接删除：<span class="built_in">rm</span> -r</span><br><span class="line">git_all.txt</span><br><span class="line"></span><br><span class="line">2\) 我搞错了，撤销刚刚git <span class="built_in">rm</span> --cache 文件，让它重新回到本地仓库：git</span><br><span class="line">reset HEAD <span class="comment"># 回退上一个操作</span></span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">[root@131_70 git_life]# git reset HEAD</span><br><span class="line"></span><br><span class="line">[root@131_70 git_life]# git status <span class="comment">#</span></span><br><span class="line">此时状态干干净净，就像啥也没发生一样</span><br><span class="line"></span><br><span class="line"><span class="comment"># On branch master</span></span><br><span class="line"></span><br><span class="line">nothing to commit, working directory clean</span><br><span class="line"></span><br><span class="line">3）单纯将这个文件撤回工作区，然后修改后，再次git</span><br><span class="line">add到暂存区【但是完全没必要，因为本来就可以随地大小改，然后再提交的，没必要撤回之后再提交】</span><br><span class="line"></span><br><span class="line">**Git stash 临时空间**</span><br><span class="line"></span><br><span class="line">1、定义：git stash用于暂存区未提交的内容，临时存放的区域，便于日后找回</span><br><span class="line"></span><br><span class="line">举个例子：假设你现在在开发功能：</span><br><span class="line"></span><br><span class="line">1、你开发的功能v1.txt、v2.txt 已经git commmit提交到了代码仓库</span><br><span class="line"></span><br><span class="line">2、你此时想完善v2.txt功能，但是你这个功能还没搞完，你已经下班了，此时还未完善好的v2.txt放在了git</span><br><span class="line">add的暂存区</span><br><span class="line"></span><br><span class="line">3、晚上你接到故障通知，说有bug，因此你不得不去修改最原先v2.txt的代码，那此时工作区的v2.txt你完善未完善好的代码怎么办呢？</span><br><span class="line"></span><br><span class="line">4、此时工作区的v2.txt就可以放到git stash</span><br><span class="line">中，然后继续修改原先v2.txt的bug，然后做进一步提交。</span><br><span class="line"></span><br><span class="line">2、场景模拟</span><br><span class="line"></span><br><span class="line">1、首先我们建立一个项目并git init初始化管理整个项目</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line"><span class="built_in">mkdir</span> -p /root/zhengwenyi_git_test/gitstash_test &amp;&amp; git init /root/zhengwenyi_git_test/gitstash_test</span><br></pre></td></tr></table></figure><p>2、模拟这个项目有两个功能：v1.txt、v2.txt并将代码添加至缓存区并提交</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br></pre></td><td class="code"><pre><span class="line">[root@131_70 gitstash_test]# <span class="built_in">echo</span> <span class="string">&quot;一个功能&quot;</span> &gt;&gt; v1.txt</span><br><span class="line"></span><br><span class="line">[root@131_70 gitstash_test]# <span class="built_in">echo</span> <span class="string">&quot;第二个功能&quot;</span> &gt;&gt; v2.txt</span><br><span class="line"></span><br><span class="line">[root@131_70 gitstash_test]# git add .</span><br><span class="line"></span><br><span class="line">[root@131_70 gitstash_test]# git commit -m <span class="string">&quot;首次提交代码&quot;</span></span><br><span class="line"></span><br><span class="line">[master (root-commit) 0767650] 首次提交代码</span><br><span class="line"></span><br><span class="line">2 files changed, 2 insertions(+)</span><br><span class="line"></span><br><span class="line">create mode 100644 v1.txt</span><br><span class="line"></span><br><span class="line">create mode 100644 v2.txt</span><br><span class="line"></span><br><span class="line">3、代码提交后，你还想把v2.txt的功能完善得更好，因此你进行了修改，接着你改到一半你就下班了，你暂时git</span><br><span class="line">add放到了暂存区</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">[root@131_70 gitstash_test]# <span class="built_in">echo</span> <span class="string">&quot;我想把v2.txt完善得更好&quot;</span> &gt;&gt;</span><br><span class="line">v2.txt</span><br><span class="line"></span><br><span class="line">[root@131_70 gitstash_test]# git add .</span><br><span class="line"></span><br><span class="line">[root@131_70 gitstash_test]# <span class="built_in">cat</span> v2.txt</span><br><span class="line"></span><br><span class="line">第二个功能</span><br><span class="line"></span><br><span class="line">我想把v2.txt完善得更好</span><br><span class="line"></span><br><span class="line">4、这天晚上有个紧急故障，你必须修改v2.txt的bug，但是你没有完善好的v2.txt你又不想把它给删了，得怎么办呢？此时就可以使用git</span><br><span class="line">stash放到临时空间</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">[root@131_70 gitstash_test]# git stash save <span class="string">&quot;保存正在完善中的v2.txt&quot;</span></span><br><span class="line"></span><br><span class="line">Saved working directory and index state On master:</span><br><span class="line">保存正在完善中的v2.txt</span><br><span class="line"></span><br><span class="line">HEAD is now at 0767650 首次提交代码</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时我们再次查看v2.txt的内容，已经是代码首次提交的内容了</span></span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">[root@131_70 gitstash_test]# <span class="built_in">cat</span> v2.txt <span class="comment">#再次查看v2.txt</span></span><br><span class="line"></span><br><span class="line">第二个功能</span><br><span class="line"></span><br><span class="line">5、我们修复完v2.txt中的bug后重新提交</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">[root@131_70 gitstash_test]# <span class="built_in">echo</span> <span class="string">&quot;我已经修复了bug&quot;</span> &gt;&gt; v2.txt</span><br><span class="line"></span><br><span class="line">[root@131_70 gitstash_test]# git add .</span><br><span class="line"></span><br><span class="line">[root@131_70 gitstash_test]# git commit -m <span class="string">&quot;修复了v2.txt的bug&quot;</span></span><br><span class="line"></span><br><span class="line">6、我们想要继续完善原先未完成的v2.txt的功能，需要怎么从git</span><br><span class="line">stash中取出呢？</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">[root@131_70 gitstash_test]# git stash list <span class="comment"># 查看stash保存列表及id</span></span><br><span class="line"></span><br><span class="line">stash@&#123;0&#125;: On master: 保存正在完善中的v2.txt</span><br><span class="line"></span><br><span class="line">[root@131_70 gitstash_test]# git stash pop <span class="comment">#</span></span><br><span class="line">恢复最新stash进度到工作区</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">[root@131_70 gitstash_test]# <span class="built_in">cat</span> v2.txt</span><br><span class="line"></span><br><span class="line">第二个功能</span><br><span class="line"></span><br><span class="line">&lt;&lt;&lt; <span class="string">Updated upstream # 第二次提交更新的内容</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">我已经修复了bug</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">=======</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">我想把v2.txt完善得更好</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt;&gt;&gt; Stashed changes # 放入stash中时未完善好的内容</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3、git stash的基础命令</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git statsh save &quot;注释&quot; #将工作区的进度保存至暂存区</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git stash list #查看stash保存的列表以及id</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git stash pop #恢复最新stash进度到工作区</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git stash pop stash_id #恢复指定的stash进度</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git stash drop stash_id #删除一个存储的stash进度</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git stash clear #清空所有存储的stash进度</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">**Git 分支实践**</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1、重要命令</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1、查看当前分支</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git branch</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">* master # 前面有个*号，表示当前所在的分支，此时就表示在master分支下</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2、创建一个&quot;名字&quot;分支，表示某成员可以使用这个分支，这个分支是属于自己独立空间的代码管理</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git branch &quot;×××&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3、切换分支</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git checkout &quot;分支名&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2、git 分支管理的实践流程</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 创建一个分支，叫zhengwenyi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git branch &quot;zhengwenyi&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">```bash</span></span><br><span class="line"><span class="string">[root@131_70 git_fenzhi]# git branch</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">* master</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">zhengwenyi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 切换到该分支下</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git checkout zhengwenyi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">```bash</span></span><br><span class="line"><span class="string">[root@131_70 git_fenzhi]# git checkout zhengwenyi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Switched to branch &#x27;zhengwenyi&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[root@131_70 git_fenzhi]# git branch</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">master</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">* zhengwenyi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 在zhengwenyi分支下创建文件，添加至暂存区以及提交到本地仓库</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">echo &quot;zhengwneyi的git分支学习&quot; &gt;&gt; zhengwenyi_git.txt</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git add .</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git commit -m &quot;zhengwenyi分支第一次提交&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 此时我们可以查看版本提交的信息：git log --oneline</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">```bash</span></span><br><span class="line"><span class="string">[root@131_70 git_fenzhi]# git log --oneline #</span></span><br><span class="line"><span class="string">分支能看到master提交的信息</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">43c9d49 第一次提交分支</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">f0ff623 master分支提交</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#</span></span><br><span class="line"><span class="string">切换到master下做对比,此时master下是没有zhengwenyi_git.txt这个文件的，提交记录也没有&quot;zhengwenyi分支第一次提交&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git branch master</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">```bash</span></span><br><span class="line"><span class="string">[root@131_70 git_fenzhi]# git branch</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">* master</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">zhengwenyi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[root@131_70 git_fenzhi]# ls</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">master.sh</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[root@131_70 git_fenzhi]# git log --oneline #</span></span><br><span class="line"><span class="string">此时只能看到master自己的，看不到分支的内容</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">f0ff623 master分支提交</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">⭐ 重点！：此时可以选择合并分支或删除分支</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1、删除分支，该分支的提交版本也会随之删除，没有被合并时用-D删除：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git branch -D zhengwenyi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">```bash</span></span><br><span class="line"><span class="string">[root@131_70 git_fenzhi]# git branch -D zhengwenyi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Deleted branch zhengwenyi (was 43c9d49).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[root@131_70 git_fenzhi]#</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[root@131_70 git_fenzhi]# git branch</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">* master</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">⭐ 2、选择合并分支的情况：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">记录一个创建分支并切换到该分支的参数：-b → git checkout -b xuexi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">合并分支，也就是合并至master上：git merge xuexi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">（当分支合并之后，该分支就可以删除了，随时用分支，随时创建即可）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">```bash</span></span><br><span class="line"><span class="string">[root@131_70 git_fenzhi]# git checkout -b zhengwenyi_v2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Switched to a new branch &#x27;zhengwenyi_v2&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[root@131_70 git_fenzhi]# git branch</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">master</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">* zhengwenyi_v2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[root@131_70 git_fenzhi]# echo &quot;test&quot; &gt;&gt; zhengwenyi_test #</span></span><br><span class="line"><span class="string">在该分支下搞个内容</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[root@131_70 git_fenzhi]# ls</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">master.sh zhengwenyi_test</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">（一般这里应该也是要放到缓存区和本地仓库的，但是我发现没有存进去直接合并的话，也是会直接在master中显示的）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">```bash</span></span><br><span class="line"><span class="string">[root@131_70 git_fenzhi]# git merge zhengwenyi_v2 #</span></span><br><span class="line"><span class="string">将分支zhengwenyi_v2合并到master</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Already up-to-date.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[root@131_70 git_fenzhi]# git branch master # 切换到master下</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[root@131_70 git_fenzhi]# ls # 此时就能看到分支的内容了</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">master.sh zhengwenyi_test</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">**Git解决分支合并冲突**</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">模拟过程</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1、创建分支并切换新分支</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">旧命令：git checkout -b test （-b: branch）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">新命令：git switch -c test （好理解：swich切换并createcreate）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2、在test下创建一个xixi.sh文件，并提交版本记录</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">echo &quot;嘻嘻嘻&quot; &gt;&gt; xixi.sh</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git add .</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git commit -m &quot;提交一个xixi.sh文件做测试&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3、回到master分支下，写一个同名但内容不一致的文件，同样提交版本记录</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git checkout(switch) master</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">echo &quot;heiheihei&quot; &gt;&gt; xixi.sh</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git add .</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git commit -m &quot;第一版测试&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">4、此时我们合并会观察到什么呢？master下将分支test合并进来</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git merge test</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">```bash</span></span><br><span class="line"><span class="string">[root@131_70 gitstash_test]# git merge test</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Auto-merging xixi.sh</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">CONFLICT (add/add): Merge conflict in xixi.sh # Merge conflict</span></span><br><span class="line"><span class="string">表示合并冲突的意思</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Automatic merge failed; fix conflicts and then commit the result. #</span></span><br><span class="line"><span class="string">修改冲突并提交结果</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">5、git会告诉你哪个分支下的内容是啥，需要人为最终判断及更改保留</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">```bash</span></span><br><span class="line"><span class="string">[root@131_70 gitstash_test]# cat xixi.sh</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;&lt;&lt; HEAD</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">heiheihei</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">=======</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">嘻嘻嘻</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt;&gt;&gt; test</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">6、需要人为合并之后提交</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">做人为修改后的内容：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">```bash</span></span><br><span class="line"><span class="string">[root@131_70 gitstash_test]# cat xixi.sh</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">heiheihei</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">嘻嘻嘻</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">提交：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">```bash</span></span><br><span class="line"><span class="string">[root@131_70 gitstash_test]# git add .</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[root@131_70 gitstash_test]# git commit -m 合并冲突后最终版</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[root@131_70 gitstash_test]# git log --oneline</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2a433e0 合并冲突后的最终版</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">**Git标签**</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git tag ： 便于记忆的标签，可以是字符，也可以是数字</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1、对当前的最新的版本记录加上一个标签</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">参数：-a → 标签的名字 ； -m → 给标签一个注释</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">```bash</span></span><br><span class="line"><span class="string">[root@131_70 git_fenzhi]# git tag -a &quot;v1.0&quot; -m &quot;master分支提交&quot;</span></span><br></pre></td></tr></table></figure><p>2、指定某个commit id ，进行tag打标签</p><p>git tag -a “版本名” commit_id -m “注释”</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@131_70 gitstash_test]# git tag -a <span class="string">&quot;v0.9&quot;</span> 0767650 -m</span><br><span class="line"><span class="string">&quot;小版本0.9&quot;</span></span><br></pre></td></tr></table></figure><p>3、查看版本信息</p><p>#查看现有的所有版本信息(只能看到版本信息)</p><p>git tag</p><p>#查看版本和commitid的对应信息</p><p>git log –oneline –decorate</p><p>git log –oneline –decorate –graph # 图形化显示</p><pre><code class="language-bash">[root@131_70 gitstash_test]# git log --oneline --decorate25799a0 (HEAD, tag: v1.0, master) 修复了v2.txt的bug0767650 (tag: v0.9) 首次提交代码4、查看标签中的具体信息，以及关联版本的具体信息（有详细的内容展示）git show v1.05、删除标签git tag -d &quot;标签&quot;```bash[root@131_70 gitstash_test]# git tag -d v0.9</code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习类 </category>
          
          <category> CICD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 版本控制 </tag>
            
            <tag> 开发工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins_Pipeline_入门实用手册</title>
      <link href="/posts/1234567890/"/>
      <url>/posts/1234567890/</url>
      
        <content type="html"><![CDATA[<h1 id="Jenkins-Pipeline-入门实用手册"><a href="#Jenkins-Pipeline-入门实用手册" class="headerlink" title="Jenkins Pipeline 入门实用手册"></a>Jenkins Pipeline 入门实用手册</h1><h2 id="1-什么是-Jenkins-Pipeline？"><a href="#1-什么是-Jenkins-Pipeline？" class="headerlink" title="1. 什么是 Jenkins Pipeline？"></a>1. 什么是 Jenkins Pipeline？</h2><p>Jenkins Pipeline 是 Jenkins 的一套自动化流程脚本，可以用代码（Jenkinsfile）描述持续集成&#x2F;持续部署（CI&#x2F;CD）过程。它让构建、测试、部署等步骤自动化、可追溯、易维护。</p><h2 id="2-声明式-vs-脚本式-Pipeline"><a href="#2-声明式-vs-脚本式-Pipeline" class="headerlink" title="2. 声明式 vs 脚本式 Pipeline"></a>2. 声明式 vs 脚本式 Pipeline</h2><ul><li><strong>声明式（Declarative）</strong>：结构清晰，推荐新手使用，常见于 <code>pipeline &#123; ... &#125;</code> 语法。</li><li><strong>脚本式（Scripted）</strong>：基于 Groovy 语法，更灵活，适合复杂逻辑，常见于 <code>node &#123; ... &#125;</code> 语法。</li></ul><blockquote><p>建议初学者优先用声明式 Pipeline。</p></blockquote><h2 id="3-Pipeline-基本结构与常用语法"><a href="#3-Pipeline-基本结构与常用语法" class="headerlink" title="3. Pipeline 基本结构与常用语法"></a>3. Pipeline 基本结构与常用语法</h2><h3 id="3-1-最简单的声明式-Pipeline"><a href="#3-1-最简单的声明式-Pipeline" class="headerlink" title="3.1 最简单的声明式 Pipeline"></a>3.1 最简单的声明式 Pipeline</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">&#x27;Hello&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo <span class="string">&#x27;Hello Jenkins Pipeline!&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-主要语法说明"><a href="#3-2-主要语法说明" class="headerlink" title="3.2 主要语法说明"></a>3.2 主要语法说明</h3><ul><li><code>pipeline &#123;&#125;</code>：声明整个流水线</li><li><code>agent any</code>：在哪个节点（机器）上执行，<code>any</code> 表示任意可用节点</li><li><code>stages &#123;&#125;</code>：阶段集合</li><li><code>stage(&#39;名称&#39;) &#123;&#125;</code>：单个阶段</li><li><code>steps &#123;&#125;</code>：具体步骤</li><li><code>echo</code>：打印日志</li></ul><h3 id="3-3-其他常用语法"><a href="#3-3-其他常用语法" class="headerlink" title="3.3 其他常用语法"></a>3.3 其他常用语法</h3><ul><li><code>environment &#123;&#125;</code>：定义环境变量</li><li><code>parameters &#123;&#125;</code>：定义参数化构建</li><li><code>when &#123;&#125;</code>：条件执行</li><li><code>post &#123;&#125;</code>：流水线后置操作（如 always、success、failure）</li></ul><h2 id="4-典型实用示例"><a href="#4-典型实用示例" class="headerlink" title="4. 典型实用示例"></a>4. 典型实用示例</h2><h3 id="4-1-拉取代码、构建、部署"><a href="#4-1-拉取代码、构建、部署" class="headerlink" title="4.1 拉取代码、构建、部署"></a>4.1 拉取代码、构建、部署</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">&#x27;拉取代码&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                git <span class="attr">branch:</span> <span class="string">&#x27;main&#x27;</span>, <span class="attr">url:</span> <span class="string">&#x27;https://github.com/your/repo.git&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">&#x27;构建&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh <span class="string">&#x27;make build&#x27;</span>  <span class="comment">// Linux</span></span><br><span class="line">                <span class="comment">// bat &#x27;build.bat&#x27; // Windows</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">&#x27;部署&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh <span class="string">&#x27;bash deploy.sh&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-参数化构建"><a href="#4-2-参数化构建" class="headerlink" title="4.2 参数化构建"></a>4.2 参数化构建</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    parameters &#123;</span><br><span class="line">        string(<span class="attr">name:</span> <span class="string">&#x27;BRANCH&#x27;</span>, <span class="attr">defaultValue:</span> <span class="string">&#x27;main&#x27;</span>, <span class="attr">description:</span> <span class="string">&#x27;分支名&#x27;</span>)</span><br><span class="line">        choice(<span class="attr">name:</span> <span class="string">&#x27;ENV&#x27;</span>, <span class="attr">choices:</span> [<span class="string">&#x27;dev&#x27;</span>, <span class="string">&#x27;prod&#x27;</span>], <span class="attr">description:</span> <span class="string">&#x27;环境&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">&#x27;参数打印&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo <span class="string">&quot;分支: $&#123;params.BRANCH&#125;, 环境: $&#123;params.ENV&#125;&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-并发分组执行"><a href="#4-3-并发分组执行" class="headerlink" title="4.3 并发分组执行"></a>4.3 并发分组执行</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">&#x27;并发测试&#x27;</span>) &#123;</span><br><span class="line">            parallel &#123;</span><br><span class="line">                stage(<span class="string">&#x27;测试A&#x27;</span>) &#123;</span><br><span class="line">                    steps &#123; echo <span class="string">&#x27;A&#x27;</span> &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                stage(<span class="string">&#x27;测试B&#x27;</span>) &#123;</span><br><span class="line">                    steps &#123; echo <span class="string">&#x27;B&#x27;</span> &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-条件执行"><a href="#4-4-条件执行" class="headerlink" title="4.4 条件执行"></a>4.4 条件执行</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">&#x27;仅在主分支&#x27;</span>) &#123;</span><br><span class="line">            when &#123; branch <span class="string">&#x27;main&#x27;</span> &#125;</span><br><span class="line">            steps &#123; echo <span class="string">&#x27;只在main分支执行&#x27;</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-5-后置操作"><a href="#4-5-后置操作" class="headerlink" title="4.5 后置操作"></a>4.5 后置操作</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">&#x27;任务&#x27;</span>) &#123;</span><br><span class="line">            steps &#123; sh <span class="string">&#x27;exit 1&#x27;</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    post &#123;</span><br><span class="line">        always &#123; echo <span class="string">&#x27;总会执行&#x27;</span> &#125;</span><br><span class="line">        success &#123; echo <span class="string">&#x27;成功才执行&#x27;</span> &#125;</span><br><span class="line">        failure &#123; echo <span class="string">&#x27;失败才执行&#x27;</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-常见问题与调试技巧"><a href="#5-常见问题与调试技巧" class="headerlink" title="5. 常见问题与调试技巧"></a>5. 常见问题与调试技巧</h2><ul><li><strong>Jenkinsfile 语法报错？</strong><ul><li>用”流水线语法”或”Blue Ocean”插件可可视化生成。</li><li>多用 <code>echo</code> 打印变量和流程。</li></ul></li><li><strong>权限问题？</strong><ul><li>检查 Jenkins 节点权限、凭据配置。</li></ul></li><li><strong>Shell 步骤失败？</strong><ul><li>用 <code>sh &#39;set -x&#39;</code> 增加调试输出。</li></ul></li><li><strong>参数未生效？</strong><ul><li>用 <code>$&#123;params.参数名&#125;</code> 访问参数。</li></ul></li></ul><h2 id="6-推荐学习资源"><a href="#6-推荐学习资源" class="headerlink" title="6. 推荐学习资源"></a>6. 推荐学习资源</h2><ul><li>官方文档：<a href="https://www.jenkins.io/zh/doc/book/pipeline/">https://www.jenkins.io/zh/doc/book/pipeline/</a></li><li>Jenkins Pipeline 示例库：<a href="https://github.com/jenkinsci/pipeline-examples">https://github.com/jenkinsci/pipeline-examples</a></li><li>B站&#x2F;Jenkins Pipeline 教程视频</li><li>公众号&#x2F;博客：搜索”Jenkins Pipeline 入门”</li></ul><hr><p>如需更复杂用法（如流水线库、共享脚本、凭据管理等），建议先掌握基础后逐步深入。 </p>]]></content>
      
      
      <categories>
          
          <category> 学习类 </category>
          
          <category> CICD </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>haproxy_cfg参数详解</title>
      <link href="/posts/1/"/>
      <url>/posts/1/</url>
      
        <content type="html"><![CDATA[<h1 id="HAProxy-配置文件参数详解"><a href="#HAProxy-配置文件参数详解" class="headerlink" title="HAProxy 配置文件参数详解"></a>HAProxy 配置文件参数详解</h1><p>本文以实际配置文件为例，详细介绍 HAProxy 各参数的含义和作用，适合初学者快速理解和上手。</p><hr><h2 id="1-global（全局配置）"><a href="#1-global（全局配置）" class="headerlink" title="1. global（全局配置）"></a>1. global（全局配置）</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">global</span><br><span class="line">    log         127.0.0.1 local2</span><br><span class="line">    chroot      /var/lib/haproxy</span><br><span class="line">    pidfile     /var/run/haproxy.pid</span><br><span class="line">    maxconn     4000</span><br><span class="line">    user        haproxy</span><br><span class="line">    group       haproxy</span><br><span class="line">    daemon</span><br><span class="line">    stats socket /var/lib/haproxy/stats</span><br></pre></td></tr></table></figure><ul><li><strong>log</strong>：日志输出地址和日志级别。此处表示日志发送到本地 127.0.0.1 的 syslog，使用 local2 设施。</li><li><strong>chroot</strong>：指定运行时的根目录，提高安全性。</li><li><strong>pidfile</strong>：存放进程号的文件路径。</li><li><strong>maxconn</strong>：允许的最大并发连接数。</li><li><strong>user&#x2F;group</strong>：以哪个用户&#x2F;用户组身份运行。</li><li><strong>daemon</strong>：以守护进程方式运行。</li><li><strong>stats socket</strong>：用于统计和管理的本地 socket 文件。</li></ul><hr><h2 id="2-defaults（默认配置）"><a href="#2-defaults（默认配置）" class="headerlink" title="2. defaults（默认配置）"></a>2. defaults（默认配置）</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">defaults</span><br><span class="line">    mode                    http</span><br><span class="line">    log                     global</span><br><span class="line">    option                  httplog</span><br><span class="line">    option                  dontlognull</span><br><span class="line">    option http-server-close</span><br><span class="line">    option forwardfor       except 127.0.0.0/8</span><br><span class="line">    option                  redispatch</span><br><span class="line">    retries                 3</span><br><span class="line">    timeout http-request    10s</span><br><span class="line">    timeout queue           1m</span><br><span class="line">    timeout connect         10s</span><br><span class="line">    timeout client          1m</span><br><span class="line">    timeout server          1m</span><br><span class="line">    timeout http-keep-alive 10s</span><br><span class="line">    timeout check           10s</span><br><span class="line">    maxconn                 3000</span><br></pre></td></tr></table></figure><ul><li><strong>mode</strong>：工作模式，常用 http 或 tcp。</li><li><strong>log</strong>：日志设置，global 表示继承全局配置。</li><li><strong>option httplog</strong>：以 HTTP 日志格式记录日志。</li><li><strong>option dontlognull</strong>：不记录空连接日志。</li><li><strong>option http-server-close</strong>：每次请求后主动关闭服务器端连接。</li><li><strong>option forwardfor except 127.0.0.0&#x2F;8</strong>：转发客户端真实 IP（X-Forwarded-For），本地回环除外。</li><li><strong>option redispatch</strong>：会话丢失时重新分配到其他可用服务器。</li><li><strong>retries</strong>：连接失败重试次数。</li><li><strong>timeout http-request</strong>：HTTP 请求超时时间。</li><li><strong>timeout queue</strong>：排队超时时间。</li><li><strong>timeout connect</strong>：连接后端服务器超时时间。</li><li><strong>timeout client&#x2F;server</strong>：客户端&#x2F;服务器端连接超时时间。</li><li><strong>timeout http-keep-alive</strong>：HTTP 长连接保持时间。</li><li><strong>timeout check</strong>：健康检查超时时间。</li><li><strong>maxconn</strong>：单个进程最大连接数。</li></ul><hr><h2 id="3-frontend（前端配置）"><a href="#3-frontend（前端配置）" class="headerlink" title="3. frontend（前端配置）"></a>3. frontend（前端配置）</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">frontend  main *:5000</span><br><span class="line">    acl url_static       path_beg       -i /static /images /javascript /stylesheets</span><br><span class="line">    acl url_static       path_end       -i .jpg .gif .png .css .js</span><br><span class="line">    use_backend static          if url_static</span><br><span class="line">    default_backend             app</span><br></pre></td></tr></table></figure><ul><li>*<em>frontend main <em>:5000</em></em>：定义名为 main 的前端，监听所有 IP 的 5000 端口。</li><li><strong>acl</strong>：访问控制列表（Access Control List），用于条件判断。<ul><li><code>path_beg</code>：以指定路径开头。</li><li><code>path_end</code>：以指定字符串结尾。</li><li><code>-i</code>：忽略大小写。</li></ul></li><li><strong>use_backend static if url_static</strong>：如果请求满足 url_static 条件，则转发到 static 后端。</li><li><strong>default_backend app</strong>：其他请求默认转发到 app 后端。</li></ul><hr><h2 id="4-backend（后端配置）"><a href="#4-backend（后端配置）" class="headerlink" title="4. backend（后端配置）"></a>4. backend（后端配置）</h2><h3 id="4-1-static-后端"><a href="#4-1-static-后端" class="headerlink" title="4.1 static 后端"></a>4.1 static 后端</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">backend static</span><br><span class="line">    balance     roundrobin</span><br><span class="line">    server      static 127.0.0.1:4331 check</span><br></pre></td></tr></table></figure><ul><li><strong>backend static</strong>：定义名为 static 的后端。</li><li><strong>balance roundrobin</strong>：采用轮询方式分配请求。</li><li><strong>server static 127.0.0.1:4331 check</strong>：定义一台名为 static 的后端服务器，地址为 127.0.0.1:4331，带健康检查。</li></ul><h3 id="4-2-app-后端"><a href="#4-2-app-后端" class="headerlink" title="4.2 app 后端"></a>4.2 app 后端</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">backend app</span><br><span class="line">    balance     roundrobin</span><br><span class="line">    server  app1 127.0.0.1:5001 check</span><br><span class="line">    server  app2 127.0.0.1:5002 check</span><br><span class="line">    server  app3 127.0.0.1:5003 check</span><br><span class="line">    server  app4 127.0.0.1:5004 check</span><br></pre></td></tr></table></figure><ul><li><strong>backend app</strong>：定义名为 app 的后端。</li><li><strong>balance roundrobin</strong>：轮询分配。</li><li><strong>server appX … check</strong>：定义多台后端服务器，带健康检查。</li></ul><hr><h2 id="5-关键参数说明"><a href="#5-关键参数说明" class="headerlink" title="5. 关键参数说明"></a>5. 关键参数说明</h2><ul><li><strong>acl</strong>：访问控制列表，用于流量分流、条件判断。</li><li><strong>use_backend</strong>：根据条件选择后端。</li><li><strong>default_backend</strong>：默认后端。</li><li><strong>server</strong>：定义后端服务器。</li><li><strong>balance</strong>：负载均衡算法（如 roundrobin、leastconn 等）。</li><li><strong>option</strong>：功能选项，增强灵活性和安全性。</li><li><strong>timeout</strong>：超时设置，防止连接长时间占用资源。</li><li><strong>log</strong>：日志相关设置。</li><li><strong>maxconn</strong>：最大连接数限制。</li></ul><hr><h2 id="6-配置结构小结"><a href="#6-配置结构小结" class="headerlink" title="6. 配置结构小结"></a>6. 配置结构小结</h2><ol><li><strong>global</strong>：全局参数，影响整个 HAProxy 实例。</li><li><strong>defaults</strong>：默认参数，供 frontend&#x2F;backend 继承。</li><li><strong>frontend</strong>：定义入口，决定如何分流。</li><li><strong>backend</strong>：定义后端服务器组及负载均衡方式。</li><li><strong>acl&#x2F;use_backend</strong>：实现灵活的流量分配。</li></ol><hr><p>如需更详细的参数说明，可参考 <a href="https://www.haproxy.org/download/1.4/doc/configuration.txt">HAProxy 官方文档</a>。 </p>]]></content>
      
      
      <categories>
          
          <category> 学习类 </category>
          
          <category> 中间件 </category>
          
          <category> Haproxy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 配置参数 </tag>
            
            <tag> 负载均衡 </tag>
            
            <tag> haproxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HAProxy + Keepalived</title>
      <link href="/posts/2/"/>
      <url>/posts/2/</url>
      
        <content type="html"><![CDATA[<h1 id="HAProxy-Keepalived-高可用负载均衡部署方案"><a href="#HAProxy-Keepalived-高可用负载均衡部署方案" class="headerlink" title="HAProxy + Keepalived 高可用负载均衡部署方案"></a>HAProxy + Keepalived 高可用负载均衡部署方案</h1><h2 id="1-架构说明"><a href="#1-架构说明" class="headerlink" title="1. 架构说明"></a>1. 架构说明</h2><ul><li>192.168.131.71、192.168.131.72 部署 HAProxy + Keepalived，组成主备高可用。</li><li>两个 VIP：<ul><li>vip1: 192.168.131.66:5000（代理 Group1：192.168.131.67:8080）</li><li>vip2: 192.168.131.128:5000（代理 Group2：192.168.131.67&#x2F;68&#x2F;70:8080）</li></ul></li><li>后端为三台 Tomcat（192.168.131.67&#x2F;68&#x2F;70）。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Client]</span><br><span class="line">   |</span><br><span class="line">[前端：VIP1:192.168.131.66:5000]---+--&gt;[HAProxy 71/72]----+--&gt;[后端：192.168.131.67:8080]</span><br><span class="line">[前端：VIP2:192.168.131.69:5000]---+                      +--&gt;[后端：192.168.131.68:8080]</span><br><span class="line">                                                         +--&gt;[后端：192.168.131.70:8080]</span><br><span class="line">1、设备71配置了keepalived是master，设备72配置了keepalived是backup</span><br><span class="line">2、当用户域名访问时（域名是可以配置多个IP的，比如域名：www.example.com对应的就是192.168.131.69和192.168.131.70）</span><br><span class="line">1）用户访问：www.example.com:5000 可能会被分配到访问 VIP1，那么此时访问到的后端就是192.168.131.67:8080</span><br><span class="line">2）同样DNS域名解析时也会被分配到访问VIP2，那么此时访问到的后端就是192.168.131.67/68/70:8080这三台的其中一台</span><br><span class="line">3、HAProxy 71/72的配置必须一致，它的流量取决于keepalived定义的主备的存活，71设备被定义为主节点，那么转发走的就是71上的HAProxy；只有当主节点71挂了，才会走72的HAProxy去转发。</span><br></pre></td></tr></table></figure><h2 id="2-HAProxy-安装与配置"><a href="#2-HAProxy-安装与配置" class="headerlink" title="2. HAProxy 安装与配置"></a>2. HAProxy 安装与配置</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CentOS/RedHat</span></span><br><span class="line"><span class="built_in">sudo</span> yum install -y haproxy</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>假设配置文件路径为 <code>/etc/haproxy/haproxy.cfg</code></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 监听VIP1，代理Group1</span></span><br><span class="line">frontend group1_frontend</span><br><span class="line">    bind 192.168.131.66:5000</span><br><span class="line">    default_backend group1_backend</span><br><span class="line"></span><br><span class="line">backend group1_backend</span><br><span class="line">    server tomcat1 192.168.131.67:8080 check</span><br><span class="line"></span><br><span class="line"><span class="comment"># 监听VIP2，代理Group2</span></span><br><span class="line">frontend group2_frontend</span><br><span class="line">    bind 192.168.131.69:5000</span><br><span class="line">    default_backend group2_backend</span><br><span class="line"></span><br><span class="line">backend group2_backend</span><br><span class="line">    server tomcat1 192.168.131.67:8080 check</span><br><span class="line">    server tomcat2 192.168.131.68:8080 check</span><br><span class="line">    server tomcat3 192.168.131.70:8080 check</span><br></pre></td></tr></table></figure><blockquote><p>注意：如 Tomcat 端口非 8080，请根据实际情况调整。</p></blockquote><h2 id="3-Keepalived-安装与配置"><a href="#3-Keepalived-安装与配置" class="headerlink" title="3. Keepalived 安装与配置"></a>3. Keepalived 安装与配置</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CentOS/RedHat</span></span><br><span class="line"><span class="built_in">sudo</span> yum install -y keepalived</span><br><span class="line"><span class="comment"># Ubuntu/Debian</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install -y keepalived</span><br></pre></td></tr></table></figure><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><p>假设配置文件路径为 <code>/etc/keepalived/keepalived.conf</code></p><h4 id="71-号主机（MASTER）"><a href="#71-号主机（MASTER）" class="headerlink" title="71 号主机（MASTER）"></a>71 号主机（MASTER）</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface eth0  <span class="comment"># 根据设备71实际网卡名修改</span></span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.131.66</span><br><span class="line">        192.168.131.128</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="72-号主机（BACKUP）"><a href="#72-号主机（BACKUP）" class="headerlink" title="72 号主机（BACKUP）"></a>72 号主机（BACKUP）</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface eth0  <span class="comment"># 根据实际网卡名修改</span></span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 90</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.131.66</span><br><span class="line">        192.168.131.128</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><ul><li><code>interface</code> 请用实际的网卡名（如 ens33、eth0 等）。</li><li><code>virtual_router_id</code> 两台需一致。</li><li><code>priority</code> 主高备低。</li></ul></blockquote><h2 id="4-启动与验证"><a href="#4-启动与验证" class="headerlink" title="4. 启动与验证"></a>4. 启动与验证</h2><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> haproxy --now</span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> keepalived --now</span><br><span class="line">注意：启动haproxy时的backup会遇到无法监听vip的情况：cannot <span class="built_in">bind</span> socket [192.168.131.66:5000] and [192.168.131.128:5000]</span><br><span class="line">1、原因：</span><br><span class="line">无法监听是因为backup上的网卡上ens33上只有它自己本机的IP，它现在的行为相当于在绑定/在监听非本地IP，这是不被系统的默认配置允许的；</span><br><span class="line">sysctl -a | grep <span class="built_in">bind</span>  → net.ipv4.ip_nonlocal_bind = 0 <span class="comment">#系统默认参数是0，表示禁止监听非本机IP外的地址</span></span><br><span class="line">2、解决方法：</span><br><span class="line">将master和backup上的相关的配置都修改为1并应用之后，重启haproxy</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;net.ipv4.ip_nonlocal_bind=1&quot;</span> | <span class="built_in">sudo</span> <span class="built_in">tee</span> -a /etc/sysctl.conf    <span class="comment"># tee(写入并显示输出) -a(append追加)</span></span><br><span class="line"><span class="built_in">sudo</span> sysctl -p</span><br></pre></td></tr></table></figure><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><ul><li>用 <code>ip a</code> 查看 VIP 是否漂移到主机（mater节点上能查到定义的两个vip,backup上看不到正常，因为目前还没发生故障转移）。</li><li>用浏览器或 curl 访问 VIP1&#x2F;VIP2，确认能访问后端 Tomcat。</li><li>停掉主节点 keepalived，VIP 是否自动漂移到备节点。</li></ul><h2 id="5-注意事项"><a href="#5-注意事项" class="headerlink" title="5. 注意事项"></a>5. 注意事项</h2><ul><li>防火墙需放行 VIP 端口（如 80）。</li><li>两台 HAProxy 配置需保持一致。</li><li>keepalived 配置需主备区分 priority。</li><li>后端 Tomcat 需健康运行。</li><li>如有多网卡，interface 需指定正确。</li></ul><h2 id="6-HAProxy-动态管理与验证方法"><a href="#6-HAProxy-动态管理与验证方法" class="headerlink" title="6. HAProxy 动态管理与验证方法"></a>6. HAProxy 动态管理与验证方法</h2><h3 id="6-1-动态下线-上线后端节点"><a href="#6-1-动态下线-上线后端节点" class="headerlink" title="6.1 动态下线&#x2F;上线后端节点"></a>6.1 动态下线&#x2F;上线后端节点</h3><p>HAProxy 支持通过 socket 动态下线（摘除）或上线后端服务器，无需 reload 配置。</p><ul><li><strong>下线后端节点（摘除流量）：</strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;disable server &lt;backend_name&gt;/&lt;server_name&gt;&#x27;</span> | socat stdio /var/lib/haproxy/stats</span><br><span class="line"><span class="comment"># 例：</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;disable server group1_backend/tomcat1&#x27;</span> | socat stdio /var/lib/haproxy/stats</span><br></pre></td></tr></table></figure></li><li><strong>上线后端节点（恢复流量）：</strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;enable server &lt;backend_name&gt;/&lt;server_name&gt;&#x27;</span> | socat stdio /var/lib/haproxy/stats</span><br><span class="line"><span class="comment"># 例：</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;enable server group1_backend/tomcat1&#x27;</span> | socat stdio /var/lib/haproxy/stats</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>注意：<code>/var/lib/haproxy/stats</code> 路径需与 haproxy.cfg 配置一致，且执行用户需有权限访问该 socket 文件。</p></blockquote><h3 id="6-2-验证后端节点状态"><a href="#6-2-验证后端节点状态" class="headerlink" title="6.2 验证后端节点状态"></a>6.2 验证后端节点状态</h3><ul><li><p><strong>查看所有后端节点状态：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;show stat&#x27;</span> | socat stdio /var/lib/haproxy/stats</span><br></pre></td></tr></table></figure><p>输出中 <code>status</code> 字段：</p><ul><li><code>UP</code>   ：节点在线，参与流量分发</li><li><code>MAINT</code>：节点被动态下线（摘除），不参与流量分发</li></ul></li><li><p><strong>交互式查看（可多条命令）：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">socat - UNIX-CONNECT:/var/lib/haproxy/stats</span><br><span class="line"><span class="comment"># 然后输入 show stat 回车</span></span><br><span class="line"><span class="comment"># 还可输入 disable/enable server ... 等命令</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="6-3-常见问题与权限说明"><a href="#6-3-常见问题与权限说明" class="headerlink" title="6.3 常见问题与权限说明"></a>6.3 常见问题与权限说明</h3><ul><li><strong>socket 文件权限</strong>：<ul><li>推荐配置 <code>stats socket /var/lib/haproxy/stats mode 666</code>，确保 root 用户可操作。</li><li>若用 chroot，建议 <code>stats socket /stats mode 666</code> 并设置 systemd WorkingDirectory。</li></ul></li><li><strong>属主问题</strong>：<ul><li>systemd 启动时 socket 属主通常为 root，root 用户可操作。</li><li>若需用 haproxy 用户操作，需保证 socket 属主为 haproxy。</li></ul></li><li><strong>动态操作不会修改配置文件</strong>，重启&#x2F;reload 后会恢复配置文件状态。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 部署类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HAProxy </tag>
            
            <tag> Keepalived </tag>
            
            <tag> 负载均衡 </tag>
            
            <tag> 高可用 </tag>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES单节点转集群</title>
      <link href="/posts/2/"/>
      <url>/posts/2/</url>
      
        <content type="html"><![CDATA[<h3 id="ES单节点升级集群方案"><a href="#ES单节点升级集群方案" class="headerlink" title="ES单节点升级集群方案"></a>ES单节点升级集群方案</h3><h4 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Elasticserch7.x版本</span><br><span class="line">1、主分片以及副本分片，主分片可以修改，副本分片不可以修改但是可查询主要于高可用，理论上来说主分片数越多查询速度越快，对于3个节点的集群来说，可以设置5个主分片，1个副本分片（主分片数量设置应该根据服务器cpu及内存大小来配置，注意必须修改jvm配置文件）。</span><br><span class="line">2、默认分片不能通过配置文件来修改</span><br><span class="line">3、单节点重新配置成集群时（1master,3data-node）,单节点上的主分片以及副本分片默认会重新平衡以及重新分配，防止发生主机点变成新增的两个节点之一以及防止第三个节点未启动就开始分配分片，需要设置cluster.initial_master_nodes仅原单节点为master，gateway.recover_after_nodes配置设置为仅只有两台节点都起来才能进行分片分配（数据量太大可能会出现堵塞问题，可以研究是否限制同步的流量）</span><br><span class="line">4、当主节点挂掉之后，再重新加入集群会重新分配未分配的分片</span><br><span class="line">5、在任一节点上都可以创建、查看索引</span><br></pre></td></tr></table></figure><h4 id="二、单节点升级集群方案"><a href="#二、单节点升级集群方案" class="headerlink" title="二、单节点升级集群方案"></a>二、单节点升级集群方案</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">操作步骤</span><br><span class="line">First of all</span><br><span class="line">备份数据</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1、原单节点修改配置</span><br><span class="line">cluster.name: es-cluster</span><br><span class="line">node.name: node01</span><br><span class="line">path.data: /data/data</span><br><span class="line">path.logs: /data/data/log</span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line">http.port: 9200</span><br><span class="line">cluster.initial_master_nodes: [&quot;node01&quot;] 此配置不需要修改</span><br><span class="line">node.data: true</span><br><span class="line">node.master: true</span><br><span class="line">以下是新增配置</span><br><span class="line">discovery.seed_hosts: [&quot;172.53.81.47&quot;] 设置仅检测主节点连通性</span><br><span class="line">path.repo: [&quot;/data/esbak&quot;] 设置存储备份目录</span><br><span class="line">gateway.recover_after_nodes: 2 注意，此配置最重要，设置其他两个节点都起来才进行数据分片同步</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、在扩容节点上安装es（不启动）</span><br><span class="line">修改配置</span><br><span class="line">cluster.name: es-cluster</span><br><span class="line">node.name: node03</span><br><span class="line">network.host: 172.53.81.83</span><br><span class="line">http.port: 9200</span><br><span class="line">path.data: /data/elasticsearch-7.7.0/data</span><br><span class="line">path.logs: /data/elasticsearch-7.7.0/logs</span><br><span class="line">transport.tcp.port: 9300</span><br><span class="line">node.data: true</span><br><span class="line">node.master: true</span><br><span class="line">#discovery.seed_hosts: [&quot;172.53.81.47:9300&quot;,&quot;172.53.81.82:9300&quot;,&quot;172.53.81.83:9300&quot;]</span><br><span class="line">#cluster.initial_master_nodes: [&quot;node01&quot;,&quot;node02&quot;,&quot;node03&quot;]</span><br><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br><span class="line">discovery.seed_hosts: [&quot;172.53.81.47&quot;]</span><br><span class="line">cluster.initial_master_nodes: [&quot;node01&quot;] 设置主节点初始为node1</span><br><span class="line">path.repo: [&quot;/data/esbak&quot;]</span><br><span class="line">3、重启原单节点es，再依次重启新节点</span><br><span class="line">4、等待分片数据分配到新节点</span><br><span class="line">5、分配分片完成后，再进行配置文件修改</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">6、修改三台节点配置文件</span><br><span class="line">cluster.name: es-cluster</span><br><span class="line">node.name: node03</span><br><span class="line">network.host: 172.53.81.83</span><br><span class="line">http.port: 9200</span><br><span class="line">path.data: /data/elasticsearch-7.7.0/data</span><br><span class="line">path.logs: /data/elasticsearch-7.7.0/logs</span><br><span class="line">transport.tcp.port: 9300</span><br><span class="line">node.data: true</span><br><span class="line">node.master: true</span><br><span class="line">#discovery.seed_hosts: [&quot;172.53.81.47:9300&quot;,&quot;172.53.81.82:9300&quot;,&quot;172.53.81.83:9300&quot;]</span><br><span class="line">#cluster.initial_master_nodes: [&quot;node01&quot;,&quot;node02&quot;,&quot;node03&quot;]</span><br><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br><span class="line">discovery.seed_hosts: [&quot;172.53.81.47&quot;]</span><br><span class="line">cluster.initial_master_nodes: [&quot;node01&quot;] 设置主节点初始为node1</span><br><span class="line">path.repo: [&quot;/data/esbak&quot;]</span><br></pre></td></tr></table></figure><h3 id="原环境注意事项"><a href="#原环境注意事项" class="headerlink" title="原环境注意事项"></a>原环境注意事项</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">1、数据量大概30G，注意重启node节点同步时是否会造成网络堵塞</span><br><span class="line">默认重新分配分片的同步数量是2，可以设置同步数量多一点，注意性能</span><br><span class="line"></span><br><span class="line">2、原ES数据库内绝大多数索引都是一个主分片以及一个副本分片总共2个分片，对于三个节点的es集群来说，虽然保证了高可用，但是可能会造成磁盘分配不均匀以及查询速度慢的问题</span><br><span class="line"></span><br><span class="line">初始配置</span><br><span class="line">配置文件内容</span><br><span class="line">cluster.name: es-cluster  </span><br><span class="line">node.name: node01</span><br><span class="line">node.master: true</span><br><span class="line">node.data: true</span><br><span class="line">network.host: 192.168.62.32</span><br><span class="line">http.port: 9200</span><br><span class="line">path.data: /data/elasticsearch/elasticsearch-7.7.0/data</span><br><span class="line">path.logs: /data/elasticsearch/elasticsearch-7.7.0/logs</span><br><span class="line">transport.tcp.port: 9300</span><br><span class="line">discovery.seed_hosts: [&quot;192.168.62.32:9300&quot;,&quot;192.168.62.33:9300&quot;,&quot;192.168.62.34:9300&quot;]</span><br><span class="line">cluster.initial_master_nodes: [&quot;node01&quot;,&quot;node02&quot;,&quot;node03&quot;]</span><br><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br><span class="line"></span><br><span class="line">配置文件解释</span><br><span class="line">cluster.name: es-cluster    #集群名称，各节点相同</span><br><span class="line">node.name: node01       #节点名称，用于区别节点，master做数据节点也是node</span><br><span class="line">node.master: true         #是否可以成为master，不是设置此节点为master</span><br><span class="line">node.data: true           #是否是数据节点，即是否可以存储分片数据</span><br><span class="line">network.host: 192.168.62.32  #监听地址，访问时的地址</span><br><span class="line">http.port: 9200             #监听端口</span><br><span class="line">path.data: /data/elasticsearch/elasticsearch-7.7.0/data   #数据目录</span><br><span class="line">path.logs: /data/elasticsearch/elasticsearch-7.7.0/logs    #日志目录</span><br><span class="line">transport.tcp.port: 9300      #node之间的通信端口，也是选举master时的检测端口</span><br><span class="line">discovery.seed_hosts: [&quot;192.168.62.32:9300&quot;,&quot;192.168.62.33:9300&quot;,&quot;192.168.62.34:9300&quot;] #节点之间的通信配置</span><br><span class="line">cluster.initial_master_nodes: [&quot;node01&quot;,&quot;node02&quot;,&quot;node03&quot;] #初始化配置了node.master: true的节点，使仅仅这些节点可以成为master并在启动时在里面选择一个为master</span><br><span class="line">http.cors.enabled: true        #允许跨域的访问</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;      #允许所有ip跨域访问</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">集群开启数据重平衡</span><br><span class="line">curl -XPUT &quot;http://192.168.62.32:9200/_cluster/settings?pretty&quot; -H &#x27;Content-Type:application/json&#x27; -d \</span><br><span class="line">&#x27;&#123;</span><br><span class="line">  &quot;persistent&quot; :&#123;</span><br><span class="line">      &quot;cluster.routing.rebalance.enable&quot;: &quot;all&quot; </span><br><span class="line">   &#125;,</span><br><span class="line">     &quot;transient&quot; :&#123;</span><br><span class="line">      &quot;cluster.routing.rebalance.enable&quot;: &quot;all&quot;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;&#x27;</span><br><span class="line">Persistent：永久开启</span><br><span class="line">Transient：临时开启</span><br><span class="line"></span><br><span class="line">查询集群配置命令</span><br><span class="line">curl -XGET &quot;http://192.168.62.34:9200/_cluster/settings?pretty&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 部署类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
            <tag> 集群部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop集群部署</title>
      <link href="/posts/20250414/"/>
      <url>/posts/20250414/</url>
      
        <content type="html"><![CDATA[<h1 id="前提：机器规划情况"><a href="#前提：机器规划情况" class="headerlink" title="前提：机器规划情况"></a><strong>前提：机器规划情况</strong></h1><p>hadoop各组件下载情况：<a href="https://archive.apache.org/dist/">https://archive.apache.org/dist/</a></p><table><thead><tr><th>主机IP</th><th>主机名</th><th>部署内容</th><th>角色</th></tr></thead><tbody><tr><td>192.168.131.67</td><td>131_67</td><td></td><td>master</td></tr><tr><td>192.168.131.68</td><td>131_68</td><td></td><td>slave01</td></tr><tr><td>192.168.131.69</td><td>131_69</td><td></td><td>slave02</td></tr><tr><td>192.168.131.70</td><td>131_70</td><td></td><td>slave03</td></tr></tbody></table><h1 id="一、环境检查："><a href="#一、环境检查：" class="headerlink" title="一、环境检查："></a><strong>一、环境检查：</strong></h1><p>1、防火墙关闭：systemctl stop firewalld</p><p>2、selinux关闭：sed -i ‘s&#x2F;SELINUX&#x3D;enforcing&#x2F;SELINUX&#x3D;disabled&#x2F;‘ &#x2F;etc&#x2F;selinux&#x2F;config</p><p>3、每台集群节点配置&#x2F;etc&#x2F;hosts文件映射</p><p>192.168.131.67 master 192.168.131.68 slave01 192.168.131.69 slave02 192.168.131.70 slave03</p><h1 id="二、安装jdk"><a href="#二、安装jdk" class="headerlink" title="二、安装jdk"></a><strong>二、安装jdk</strong></h1><p>参见部署类——jdk下载及安装 </p><h1 id="三、解压安装hadoop-（尝试用普通用户admin部署）"><a href="#三、解压安装hadoop-（尝试用普通用户admin部署）" class="headerlink" title="三、解压安装hadoop （尝试用普通用户admin部署）"></a><strong>三、解压安装hadoop （尝试用普通用户admin部署）</strong></h1><p>安装配置完一台，其它的scp过去即可</p><p>mkdir &#x2F;data   (root建完&#x2F;data，chown -R admin.admin &#x2F;data 全部授权给普通用户admin) tar zvxf hadoop-2.7.3.tar.gz -C &#x2F;data</p><h1 id="四、配置hadoop的6个配置文件"><a href="#四、配置hadoop的6个配置文件" class="headerlink" title="四、配置hadoop的6个配置文件"></a><strong>四、配置hadoop的6个配置文件</strong></h1><table><thead><tr><th>配置文件</th><th>用途</th><th>配置文件中加入或修改</th></tr></thead><tbody><tr><td>hadoop-env.sh</td><td>hadoop环境变量定义</td><td>export JAVA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;jdk1.8.0_231export HDFS_NAMENODE_USER&#x3D;”admin”export HDFS_DATANODE_USER&#x3D;”admin”export  HDFS_SECONDARYNAMENODE_USER&#x3D;”admin”export  YARN_RESOURCEMANAGER_USER&#x3D;”admin”export  YARN_NODEMANAGER_USER&#x3D;”admin”</td></tr><tr><td>core-site.xml</td><td>核心配置文件</td><td><strong>1、创建存放临时数据的公共目录：&#x2F;data&#x2F;hadoop-2.7.3&#x2F;tmp</strong>2、属性1：定义角色  #为一组属性     属性2：定义数据存放目录</td></tr><tr><td>hdfs-site.xml</td><td>副本数及web访问定义</td><td>1、副本数定义：hdfs副本数，表示可以存多少份相同的数据，有几个从节点就配置几个2、web端访问地址配置</td></tr><tr><td>yarn-site.xml</td><td>指定resourcemanager</td><td>1、nodemanager获取数据的方式：混洗方式shuffle2、指定<strong>yarn的老大也就是resourcemanager</strong>3、环境变量继承4、关闭虚拟内存检查，开启检查时，虚拟内存不足会导致nodemanager的自杀</td></tr><tr><td>mapred-site.xml</td><td>yarn是mapreduce的第二代，用于资源计算</td><td>指定MapReduce运行在YARN上</td></tr><tr><td>slaves（3.0之后叫workers）</td><td>指定从节点</td><td>指定从节点</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 部署类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 集群部署 </tag>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>维护类-为已编译安装后的nginx添加模块</title>
      <link href="/posts/2024041404/"/>
      <url>/posts/2024041404/</url>
      
        <content type="html"><![CDATA[<h1 id="为已编译安装后的Nginx添加模块"><a href="#为已编译安装后的Nginx添加模块" class="headerlink" title="为已编译安装后的Nginx添加模块"></a>为已编译安装后的Nginx添加模块</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本文档介绍如何为已编译安装的Nginx添加新模块（如SSL模块），避免重新安装整个Nginx服务。</p><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><h3 id="1-1-检查现有模块"><a href="#1-1-检查现有模块" class="headerlink" title="1.1 检查现有模块"></a>1.1 检查现有模块</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前Nginx版本和已编译模块</span></span><br><span class="line">nginx -V</span><br></pre></td></tr></table></figure><p><strong>输出示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nginx version: nginx/1.23.1</span><br><span class="line">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC)</span><br><span class="line">configure arguments: --prefix=/usr/local/nginx-1.23.1 --with-http_ssl_module</span><br></pre></td></tr></table></figure><h3 id="1-2-确定Nginx安装目录"><a href="#1-2-确定Nginx安装目录" class="headerlink" title="1.2 确定Nginx安装目录"></a>1.2 确定Nginx安装目录</h3><p>根据<code>nginx -V</code>输出确定安装目录，例如：<code>/usr/local/nginx-1.23.1</code></p><h2 id="2-重新编译添加模块"><a href="#2-重新编译添加模块" class="headerlink" title="2. 重新编译添加模块"></a>2. 重新编译添加模块</h2><h3 id="2-1-进入Nginx源码目录"><a href="#2-1-进入Nginx源码目录" class="headerlink" title="2.1 进入Nginx源码目录"></a>2.1 进入Nginx源码目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入Nginx源码目录</span></span><br><span class="line"><span class="built_in">cd</span> /path/to/nginx-1.23.1</span><br></pre></td></tr></table></figure><h3 id="2-2-配置编译参数"><a href="#2-2-配置编译参数" class="headerlink" title="2.2 配置编译参数"></a>2.2 配置编译参数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重新配置，添加新模块</span></span><br><span class="line">./configure --prefix=/usr/local/nginx-1.23.1 \</span><br><span class="line">--with-http_ssl_module \</span><br><span class="line">--with-http_realip_module \</span><br><span class="line">--with-http_stub_status_module \</span><br><span class="line">--with-http_gzip_static_module \</span><br><span class="line">--with-http_v2_module \</span><br><span class="line">--with-stream \</span><br><span class="line">--with-stream_ssl_module \</span><br><span class="line">--with-pcre \</span><br><span class="line">--with-zlib</span><br></pre></td></tr></table></figure><p><strong>重要说明：</strong></p><ul><li>必须包含原有的所有模块参数</li><li>添加需要的新模块参数</li><li><strong>不要执行 <code>make install</code></strong>，避免覆盖原有配置</li></ul><h3 id="2-3-编译"><a href="#2-3-编译" class="headerlink" title="2.3 编译"></a>2.3 编译</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编译Nginx</span></span><br><span class="line">make</span><br></pre></td></tr></table></figure><h2 id="3-替换可执行文件"><a href="#3-替换可执行文件" class="headerlink" title="3. 替换可执行文件"></a>3. 替换可执行文件</h2><h3 id="3-1-备份原有nginx"><a href="#3-1-备份原有nginx" class="headerlink" title="3.1 备份原有nginx"></a>3.1 备份原有nginx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 备份原有nginx可执行文件</span></span><br><span class="line"><span class="built_in">mv</span> /usr/local/nginx-1.23.1/sbin/nginx /usr/local/nginx-1.23.1/sbin/nginx_bak</span><br></pre></td></tr></table></figure><h3 id="3-2-复制新编译的nginx"><a href="#3-2-复制新编译的nginx" class="headerlink" title="3.2 复制新编译的nginx"></a>3.2 复制新编译的nginx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用新编译的nginx覆盖原有</span></span><br><span class="line"><span class="built_in">cp</span> objs/nginx /usr/local/nginx-1.23.1/sbin/</span><br></pre></td></tr></table></figure><h2 id="4-重启并验证"><a href="#4-重启并验证" class="headerlink" title="4. 重启并验证"></a>4. 重启并验证</h2><h3 id="4-1-重启Nginx服务"><a href="#4-1-重启Nginx服务" class="headerlink" title="4.1 重启Nginx服务"></a>4.1 重启Nginx服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 停止Nginx服务</span></span><br><span class="line">/usr/local/nginx-1.23.1/sbin/nginx -s stop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动Nginx服务</span></span><br><span class="line">/usr/local/nginx-1.23.1/sbin/nginx</span><br></pre></td></tr></table></figure><h3 id="4-2-验证模块"><a href="#4-2-验证模块" class="headerlink" title="4.2 验证模块"></a>4.2 验证模块</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 验证新模块是否生效</span></span><br><span class="line">nginx -V</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查Nginx配置</span></span><br><span class="line">nginx -t</span><br></pre></td></tr></table></figure><h2 id="5-常见模块参数"><a href="#5-常见模块参数" class="headerlink" title="5. 常见模块参数"></a>5. 常见模块参数</h2><h3 id="5-1-常用模块"><a href="#5-1-常用模块" class="headerlink" title="5.1 常用模块"></a>5.1 常用模块</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># SSL模块</span></span><br><span class="line">--with-http_ssl_module</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实时状态模块</span></span><br><span class="line">--with-http_stub_status_module</span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩模块</span></span><br><span class="line">--with-http_gzip_static_module</span><br><span class="line"></span><br><span class="line"><span class="comment"># HTTP/2模块</span></span><br><span class="line">--with-http_v2_module</span><br><span class="line"></span><br><span class="line"><span class="comment"># 流模块</span></span><br><span class="line">--with-stream</span><br><span class="line"></span><br><span class="line"><span class="comment"># 流SSL模块</span></span><br><span class="line">--with-stream_ssl_module</span><br><span class="line"></span><br><span class="line"><span class="comment"># 真实IP模块</span></span><br><span class="line">--with-http_realip_module</span><br><span class="line"></span><br><span class="line"><span class="comment"># 代理模块</span></span><br><span class="line">--with-http_proxy_module</span><br><span class="line"></span><br><span class="line"><span class="comment"># 缓存模块</span></span><br><span class="line">--with-http_cache_module</span><br></pre></td></tr></table></figure><h3 id="5-2-第三方模块"><a href="#5-2-第三方模块" class="headerlink" title="5.2 第三方模块"></a>5.2 第三方模块</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加第三方模块</span></span><br><span class="line">--add-module=/path/to/third-party-module</span><br></pre></td></tr></table></figure><h2 id="6-故障排查"><a href="#6-故障排查" class="headerlink" title="6. 故障排查"></a>6. 故障排查</h2><h3 id="6-1-编译错误"><a href="#6-1-编译错误" class="headerlink" title="6.1 编译错误"></a>6.1 编译错误</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查依赖库</span></span><br><span class="line">yum install -y pcre-devel zlib-devel openssl-devel</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理编译缓存</span></span><br><span class="line">make clean</span><br></pre></td></tr></table></figure><h3 id="6-2-模块验证"><a href="#6-2-模块验证" class="headerlink" title="6.2 模块验证"></a>6.2 模块验证</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查模块是否加载</span></span><br><span class="line">nginx -V 2&gt;&amp;1 | grep -o <span class="string">&quot;with-http_[a-z_]*_module&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查配置文件语法</span></span><br><span class="line">nginx -t</span><br></pre></td></tr></table></figure><h2 id="7-最佳实践"><a href="#7-最佳实践" class="headerlink" title="7. 最佳实践"></a>7. 最佳实践</h2><h3 id="7-1-操作建议"><a href="#7-1-操作建议" class="headerlink" title="7.1 操作建议"></a>7.1 操作建议</h3><ol><li><strong>备份重要：</strong> 操作前备份原有nginx可执行文件</li><li><strong>记录参数：</strong> 记录完整的configure参数</li><li><strong>测试验证：</strong> 编译后充分测试功能</li><li><strong>版本管理：</strong> 记录nginx版本和模块版本</li></ol><h3 id="7-2-安全考虑"><a href="#7-2-安全考虑" class="headerlink" title="7.2 安全考虑"></a>7.2 安全考虑</h3><ol><li><strong>权限设置：</strong> 确保nginx可执行文件权限正确</li><li><strong>用户配置：</strong> 保持原有的用户和组设置</li><li><strong>配置文件：</strong> 不要覆盖原有的配置文件</li><li><strong>日志目录：</strong> 保持原有的日志目录结构</li></ol><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li><strong>不要make install：</strong> 避免覆盖全部配置和文件</li><li><strong>备份重要：</strong> 操作前务必备份原有文件</li><li><strong>参数完整：</strong> 重新配置时必须包含所有原有参数</li><li><strong>测试验证：</strong> 编译后要验证功能是否正常</li></ol><h2 id="经验总结"><a href="#经验总结" class="headerlink" title="经验总结"></a>经验总结</h2><ul><li>添加模块需重新编译，注意备份原有可执行文件</li><li>不要执行make install，避免覆盖全部配置</li><li>检查模块是否生效用<code>nginx -V</code></li><li>记录完整的configure参数，便于后续维护</li></ul>]]></content>
      
      
      <categories>
          
          <category> 维护类 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>维护类-http改https解决明文传输问题</title>
      <link href="/posts/2024041403/"/>
      <url>/posts/2024041403/</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP改HTTPS解决明文传输问题"><a href="#HTTP改HTTPS解决明文传输问题" class="headerlink" title="HTTP改HTTPS解决明文传输问题"></a>HTTP改HTTPS解决明文传输问题</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本文档介绍如何通过Nginx配置SSL证书，将HTTP服务升级为HTTPS，解决明文传输的安全隐患。</p><h2 id="1-背景说明"><a href="#1-背景说明" class="headerlink" title="1. 背景说明"></a>1. 背景说明</h2><h3 id="1-1-安全问题"><a href="#1-1-安全问题" class="headerlink" title="1.1 安全问题"></a>1.1 安全问题</h3><p>HTTP明文传输存在以下安全隐患：</p><ul><li>敏感信息（如账号密码）易被窃取</li><li>数据传输过程中可能被中间人攻击</li><li>不符合现代网络安全要求</li></ul><h3 id="1-2-解决方案"><a href="#1-2-解决方案" class="headerlink" title="1.2 解决方案"></a>1.2 解决方案</h3><p>通过Nginx配置SSL，实现：</p><ul><li>HTTP自动跳转到HTTPS</li><li>数据加密传输</li><li>提升整体安全性</li></ul><h2 id="2-实施步骤"><a href="#2-实施步骤" class="headerlink" title="2. 实施步骤"></a>2. 实施步骤</h2><h3 id="2-1-生成SSL自签证书"><a href="#2-1-生成SSL自签证书" class="headerlink" title="2.1 生成SSL自签证书"></a>2.1 生成SSL自签证书</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建SSL证书目录</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> /etc/nginx/ssl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成自签证书</span></span><br><span class="line"><span class="built_in">sudo</span> openssl req -x509 -nodes -days 365 -newkey rsa:2048 \</span><br><span class="line">-keyout /etc/nginx/ssl/zabbix.key \</span><br><span class="line">-out /etc/nginx/ssl/zabbix.crt \</span><br><span class="line">-subj <span class="string">&quot;/CN=服务器IP或域名&quot;</span></span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><ul><li><code>-x509</code>：生成X.509证书</li><li><code>-nodes</code>：不加密私钥</li><li><code>-days 365</code>：证书有效期365天</li><li><code>-newkey rsa:2048</code>：生成2048位RSA密钥</li></ul><h3 id="2-2-配置Nginx"><a href="#2-2-配置Nginx" class="headerlink" title="2.2 配置Nginx"></a>2.2 配置Nginx</h3><h4 id="2-2-1-HTTP自动跳转HTTPS"><a href="#2-2-1-HTTP自动跳转HTTPS" class="headerlink" title="2.2.1 HTTP自动跳转HTTPS"></a>2.2.1 HTTP自动跳转HTTPS</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># HTTP服务配置（自动跳转）</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">8888</span>;</span><br><span class="line">    <span class="attribute">server_name</span> _;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 301永久重定向到HTTPS</span></span><br><span class="line">    <span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$host</span><span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-2-配置HTTPS服务"><a href="#2-2-2-配置HTTPS服务" class="headerlink" title="2.2.2 配置HTTPS服务"></a>2.2.2 配置HTTPS服务</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># HTTPS服务配置</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">server_name</span> _;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># SSL证书配置</span></span><br><span class="line">    <span class="attribute">ssl_certificate</span> /etc/nginx/ssl/zabbix.crt;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /etc/nginx/ssl/zabbix.key;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 代理到后端服务</span></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://localhost:8888;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 设置代理头信息</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">        <span class="attribute">proxy_hide_header</span> X-Powered-By;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-3-修改原有8888服务"><a href="#2-2-3-修改原有8888服务" class="headerlink" title="2.2.3 修改原有8888服务"></a>2.2.3 修改原有8888服务</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改原有服务（只允许本地访问）</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">127.0.0.1:8888</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 其余配置保持不变</span></span><br><span class="line">    <span class="comment"># ... 原有配置 ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-验证配置"><a href="#3-验证配置" class="headerlink" title="3. 验证配置"></a>3. 验证配置</h2><h3 id="3-1-检查Nginx配置"><a href="#3-1-检查Nginx配置" class="headerlink" title="3.1 检查Nginx配置"></a>3.1 检查Nginx配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查配置文件语法</span></span><br><span class="line">nginx -t</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载配置</span></span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><h3 id="3-2-测试访问"><a href="#3-2-测试访问" class="headerlink" title="3.2 测试访问"></a>3.2 测试访问</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试HTTP跳转</span></span><br><span class="line">curl -I http://服务器IP:8888</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试HTTPS访问</span></span><br><span class="line">curl -I https://服务器IP</span><br></pre></td></tr></table></figure><h2 id="4-安全优化"><a href="#4-安全优化" class="headerlink" title="4. 安全优化"></a>4. 安全优化</h2><h3 id="4-1-SSL配置优化"><a href="#4-1-SSL配置优化" class="headerlink" title="4.1 SSL配置优化"></a>4.1 SSL配置优化</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在HTTPS server块中添加</span></span><br><span class="line"><span class="attribute">ssl_protocols</span> TLSv1.<span class="number">2</span> TLSv1.<span class="number">3</span>;</span><br><span class="line"><span class="attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;</span><br><span class="line"><span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line"><span class="attribute">ssl_session_cache</span> shared:SSL:<span class="number">10m</span>;</span><br><span class="line"><span class="attribute">ssl_session_timeout</span> <span class="number">10m</span>;</span><br></pre></td></tr></table></figure><h3 id="4-2-安全头配置"><a href="#4-2-安全头配置" class="headerlink" title="4.2 安全头配置"></a>4.2 安全头配置</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加安全响应头</span></span><br><span class="line"><span class="attribute">add_header</span> Strict-Transport-Security <span class="string">&quot;max-age=31536000; includeSubDomains&quot;</span> always;</span><br><span class="line"><span class="attribute">add_header</span> X-Frame-Options DENY;</span><br><span class="line"><span class="attribute">add_header</span> X-Content-Type-Options nosniff;</span><br><span class="line"><span class="attribute">add_header</span> X-XSS-Protection <span class="string">&quot;1; mode=block&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="5-注意事项"><a href="#5-注意事项" class="headerlink" title="5. 注意事项"></a>5. 注意事项</h2><ol><li><strong>证书管理：</strong> 自签证书浏览器会显示警告，生产环境建议使用CA证书</li><li><strong>权限设置：</strong> 确保证书文件权限正确，防止被其他用户读取</li><li><strong>防火墙配置：</strong> 确保443端口开放</li><li><strong>监控告警：</strong> 设置证书过期监控告警</li><li><strong>备份配置：</strong> 修改前备份Nginx配置文件</li></ol><h2 id="6-故障排查"><a href="#6-故障排查" class="headerlink" title="6. 故障排查"></a>6. 故障排查</h2><h3 id="6-1-常见问题"><a href="#6-1-常见问题" class="headerlink" title="6.1 常见问题"></a>6.1 常见问题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查SSL证书</span></span><br><span class="line">openssl x509 -<span class="keyword">in</span> /etc/nginx/ssl/zabbix.crt -text -noout</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查Nginx错误日志</span></span><br><span class="line"><span class="built_in">tail</span> -f /var/log/nginx/error.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查端口监听</span></span><br><span class="line">netstat -tlnp | grep :443</span><br></pre></td></tr></table></figure><h3 id="6-2-性能优化"><a href="#6-2-性能优化" class="headerlink" title="6.2 性能优化"></a>6.2 性能优化</h3><ol><li><strong>启用SSL会话缓存</strong></li><li><strong>使用OCSP Stapling</strong></li><li><strong>配置HTTP&#x2F;2支持</strong></li><li><strong>启用gzip压缩</strong></li></ol><h2 id="经验总结"><a href="#经验总结" class="headerlink" title="经验总结"></a>经验总结</h2><ul><li>明文传输极易泄露敏感信息，务必使用HTTPS</li><li>Nginx配置SSL时注意证书路径和权限</li><li>HTTP跳转HTTPS可提升整体安全性</li><li>定期更新证书和配置，保持安全性</li></ul>]]></content>
      
      
      <categories>
          
          <category> 维护类 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>维护类-Linux内核信号量问题-agent的cannot create semaphore set</title>
      <link href="/posts/2024041405/"/>
      <url>/posts/2024041405/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux内核信号量问题-agent的cannot-create-semaphore-set"><a href="#Linux内核信号量问题-agent的cannot-create-semaphore-set" class="headerlink" title="Linux内核信号量问题-agent的cannot create semaphore set"></a>Linux内核信号量问题-agent的cannot create semaphore set</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本文档介绍Zabbix Agent启动时遇到的Linux内核信号量问题，以及相应的排查和解决方案。</p><h2 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1. 问题描述"></a>1. 问题描述</h2><p>Zabbix Agent启动时报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cannot create semaphore set: [28] No space left on device</span><br></pre></td></tr></table></figure><h2 id="2-问题排查"><a href="#2-问题排查" class="headerlink" title="2. 问题排查"></a>2. 问题排查</h2><h3 id="2-1-查看内核信号量参数"><a href="#2-1-查看内核信号量参数" class="headerlink" title="2.1 查看内核信号量参数"></a>2.1 查看内核信号量参数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前内核信号量配置</span></span><br><span class="line"><span class="built_in">cat</span> /etc/sysctl.conf | grep kernel.sem</span><br></pre></td></tr></table></figure><p><strong>示例输出：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kernel.sem=250 32000 100 200</span><br></pre></td></tr></table></figure><h3 id="2-2-参数含义解析"><a href="#2-2-参数含义解析" class="headerlink" title="2.2 参数含义解析"></a>2.2 参数含义解析</h3><p>内核信号量参数格式：<code>kernel.sem=SEMMSL SEMMNS SEMOPM SEMMNI</code></p><ul><li><strong>SEMMSL&#x3D;250：</strong> 单个信号量集最大信号量数</li><li><strong>SEMMNS&#x3D;32000：</strong> 信号量总数</li><li><strong>SEMOPM&#x3D;100：</strong> 可执行的信号量操作数量上限</li><li><strong>SEMMNI&#x3D;200：</strong> 最大信号量集数</li></ul><h2 id="3-解决方案"><a href="#3-解决方案" class="headerlink" title="3. 解决方案"></a>3. 解决方案</h2><h3 id="3-1-核心公式验证"><a href="#3-1-核心公式验证" class="headerlink" title="3.1 核心公式验证"></a>3.1 核心公式验证</h3><p>必须满足以下公式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SEMMNS ≥ SEMMSL × SEMMNI</span><br></pre></td></tr></table></figure><p><strong>计算示例：</strong></p><ul><li>SEMMSL&#x3D;250</li><li>SEMMNS&#x3D;32000</li><li>SEMMNI&#x3D;200</li><li>验证：250 × 200 &#x3D; 50000 &gt; 32000 ❌</li></ul><h3 id="3-2-参数调整建议"><a href="#3-2-参数调整建议" class="headerlink" title="3.2 参数调整建议"></a>3.2 参数调整建议</h3><p>若不满足公式，需调整SEMMNI或SEMMSL：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑系统配置文件</span></span><br><span class="line">vim /etc/sysctl.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改内核信号量参数</span></span><br><span class="line">kernel.sem=250 32000 100 128</span><br></pre></td></tr></table></figure><p><strong>调整说明：</strong></p><ul><li>若SEMMSL&#x3D;250，SEMMNS&#x3D;32000，建议SEMMNI&#x3D;128</li><li>验证：250 × 128 &#x3D; 32000 ✅</li></ul><h3 id="3-3-应用配置"><a href="#3-3-应用配置" class="headerlink" title="3.3 应用配置"></a>3.3 应用配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使配置生效</span></span><br><span class="line">sysctl -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证配置</span></span><br><span class="line">sysctl kernel.sem</span><br></pre></td></tr></table></figure><h2 id="4-验证修复"><a href="#4-验证修复" class="headerlink" title="4. 验证修复"></a>4. 验证修复</h2><h3 id="4-1-重启Zabbix-Agent"><a href="#4-1-重启Zabbix-Agent" class="headerlink" title="4.1 重启Zabbix Agent"></a>4.1 重启Zabbix Agent</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重启Zabbix Agent服务</span></span><br><span class="line">systemctl restart zabbix-agent</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查服务状态</span></span><br><span class="line">systemctl status zabbix-agent</span><br></pre></td></tr></table></figure><h3 id="4-2-检查日志"><a href="#4-2-检查日志" class="headerlink" title="4.2 检查日志"></a>4.2 检查日志</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看Zabbix Agent日志</span></span><br><span class="line"><span class="built_in">tail</span> -f /var/log/zabbix/zabbix_agentd.log</span><br></pre></td></tr></table></figure><h2 id="5-预防措施"><a href="#5-预防措施" class="headerlink" title="5. 预防措施"></a>5. 预防措施</h2><ol><li><strong>监控信号量使用：</strong> 定期检查信号量使用情况</li><li><strong>合理配置参数：</strong> 根据系统负载调整信号量参数</li><li><strong>文档记录：</strong> 记录配置变更，便于后续维护</li><li><strong>测试验证：</strong> 修改配置后充分测试</li></ol><h2 id="6-相关命令"><a href="#6-相关命令" class="headerlink" title="6. 相关命令"></a>6. 相关命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前信号量使用情况</span></span><br><span class="line">ipcs -s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看信号量限制</span></span><br><span class="line"><span class="built_in">cat</span> /proc/sys/kernel/sem</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看系统信号量统计</span></span><br><span class="line"><span class="built_in">cat</span> /proc/sysvipc/sem</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li><strong>备份配置：</strong> 修改前备份系统配置文件</li><li><strong>逐步调整：</strong> 建议逐步调整参数，观察效果</li><li><strong>重启验证：</strong> 修改后重启相关服务验证</li><li><strong>监控告警：</strong> 设置信号量使用率监控告警</li></ol>]]></content>
      
      
      <categories>
          
          <category> 维护类 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Prometheus</title>
      <link href="/posts/2024041401/"/>
      <url>/posts/2024041401/</url>
      
        <content type="html"><![CDATA[<h1 id="普罗米修斯部署实践"><a href="#普罗米修斯部署实践" class="headerlink" title="普罗米修斯部署实践"></a>普罗米修斯部署实践</h1><h2 id="1-下载-Prometheus"><a href="#1-下载-Prometheus" class="headerlink" title="1. 下载 Prometheus"></a>1. 下载 Prometheus</h2><p>前往 <a href="https://prometheus.io/download/">Prometheus官网</a> 下载适合你系统的最新稳定版。</p><h2 id="2-安装和配置"><a href="#2-安装和配置" class="headerlink" title="2. 安装和配置"></a>2. 安装和配置</h2><ol><li><p><strong>解压 Prometheus</strong><br>下载后解压到指定目录，例如 <code>/usr/local/prometheus</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf prometheus-*.tar.gz -C /usr/local/</span><br><span class="line"><span class="built_in">mv</span> /usr/local/prometheus-* /usr/local/prometheus</span><br></pre></td></tr></table></figure></li><li><p><strong>创建数据和配置目录</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /data/prometheus</span><br></pre></td></tr></table></figure></li><li><p><strong>编辑配置文件</strong><br>主要配置文件为 <code>prometheus.yml</code>，可根据实际监控目标调整。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">scrape_interval:</span> <span class="string">15s</span></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;prometheus&#x27;</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;localhost:9090&#x27;</span>]</span><br></pre></td></tr></table></figure></li></ol><h2 id="3-启动和停止-Prometheus"><a href="#3-启动和停止-Prometheus" class="headerlink" title="3. 启动和停止 Prometheus"></a>3. 启动和停止 Prometheus</h2><ol><li><p><strong>启动</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/prometheus</span><br><span class="line">./prometheus --config.file=prometheus.yml --storage.tsdb.path=/data/prometheus &amp;</span><br></pre></td></tr></table></figure></li><li><p><strong>停止</strong><br>查找进程并杀掉：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep prometheus</span><br><span class="line"><span class="built_in">kill</span> &lt;pid&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-访问-Prometheus"><a href="#4-访问-Prometheus" class="headerlink" title="4. 访问 Prometheus"></a>4. 访问 Prometheus</h2><p>浏览器访问 <code>http://IP:9090</code>，可看到 Prometheus Web UI。</p><h2 id="5-创建-Systemd-服务"><a href="#5-创建-Systemd-服务" class="headerlink" title="5. 创建 Systemd 服务"></a>5. 创建 Systemd 服务</h2><ol><li><p><strong>创建服务文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /etc/systemd/system/prometheus.service</span><br></pre></td></tr></table></figure></li><li><p><strong>添加内容</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=Prometheus Monitoring</span><br><span class="line"><span class="attr">After</span>=network.target</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Type</span>=simple</span><br><span class="line"><span class="attr">User</span>=root   <span class="comment"># 视情况而定</span></span><br><span class="line"><span class="attr">Group</span>=root  <span class="comment"># 视情况而定</span></span><br><span class="line"><span class="attr">ExecStart</span>=/usr/local/prometheus/prometheus --config.file=/usr/local/prometheus/prometheus.yml --storage.tsdb.path=/data/prometheus</span><br><span class="line"><span class="attr">Restart</span>=always</span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure></li><li><p><strong>重载 systemd 并启动</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl daemon-reload</span><br><span class="line"><span class="built_in">sudo</span> systemctl start prometheus</span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> prometheus</span><br><span class="line">日志：journalctl -u promethus -f</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 部署类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Prometheus </tag>
            
            <tag> 监控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Grafana部署</title>
      <link href="/posts/2024041402/"/>
      <url>/posts/2024041402/</url>
      
        <content type="html"><![CDATA[<h1 id="Grafana部署实践"><a href="#Grafana部署实践" class="headerlink" title="Grafana部署实践"></a>Grafana部署实践</h1><h2 id="1-下载-Grafana"><a href="#1-下载-Grafana" class="headerlink" title="1. 下载 Grafana"></a>1. 下载 Grafana</h2><p>前往 <a href="https://grafana.com/grafana/download">Grafana官网</a> 下载适合你系统的版本。</p><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 官网命令</span></span><br><span class="line"><span class="built_in">sudo</span> yum install -y https://dl.grafana.com/enterprise/release/grafana-enterprise-12.0.2-1.x86_64.rpm</span><br></pre></td></tr></table></figure><h2 id="3-启动和停止-Grafana"><a href="#3-启动和停止-Grafana" class="headerlink" title="3. 启动和停止 Grafana"></a>3. 启动和停止 Grafana</h2><ol><li><p><strong>启动</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl start grafana-server</span><br></pre></td></tr></table></figure></li><li><p><strong>停止</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl stop grafana-server</span><br></pre></td></tr></table></figure></li><li><p><strong>重启</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl restart grafana-server</span><br></pre></td></tr></table></figure></li><li><p><strong>开机自启</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> grafana-server</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-访问-Grafana"><a href="#4-访问-Grafana" class="headerlink" title="4. 访问 Grafana"></a>4. 访问 Grafana</h2><p>浏览器访问 <code>http://IP:3000</code>，默认账号密码均为 <code>admin</code>，首次登录需修改密码。</p><h2 id="5-配置数据源"><a href="#5-配置数据源" class="headerlink" title="5. 配置数据源"></a>5. 配置数据源</h2><ol><li>登录 Web UI 后，点击左侧齿轮图标，选择”Data Sources”。</li><li>添加 Prometheus，填写 URL（如 <code>http://localhost:9090</code>），保存即可。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 部署类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 监控 </tag>
            
            <tag> Grafana </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>维护类-星云系统Hbase集群过期时间设置</title>
      <link href="/posts/2024041406/"/>
      <url>/posts/2024041406/</url>
      
        <content type="html"><![CDATA[<h1 id="星云系统HBase集群过期时间设置"><a href="#星云系统HBase集群过期时间设置" class="headerlink" title="星云系统HBase集群过期时间设置"></a>星云系统HBase集群过期时间设置</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本文档介绍HBase集群磁盘资源紧张时的解决方案，通过调整表的TTL（Time To Live）来节省磁盘空间，提升集群稳定性。</p><h2 id="1-问题背景"><a href="#1-问题背景" class="headerlink" title="1. 问题背景"></a>1. 问题背景</h2><h3 id="1-1-问题描述"><a href="#1-1-问题描述" class="headerlink" title="1.1 问题描述"></a>1.1 问题描述</h3><p>HBase集群磁盘资源紧张，节点因磁盘空间不足导致DataNode故障，影响集群稳定性。</p><h3 id="1-2-解决思路"><a href="#1-2-解决思路" class="headerlink" title="1.2 解决思路"></a>1.2 解决思路</h3><p>为节省磁盘空间，需调整大表的过期时间（TTL），通过合理设置数据保留期限来释放存储空间。</p><h2 id="2-排查与处理"><a href="#2-排查与处理" class="headerlink" title="2. 排查与处理"></a>2. 排查与处理</h2><h3 id="2-1-观察节点数据变化"><a href="#2-1-观察节点数据变化" class="headerlink" title="2.1 观察节点数据变化"></a>2.1 观察节点数据变化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 监控各节点数据变化</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">du</span> -s /data/dfs/*</span><br></pre></td></tr></table></figure><p><strong>注意事项：</strong></p><ul><li>故障节点解除授权时，数据会复制到其他节点</li><li>需要耐心等待数据迁移完成</li></ul><h3 id="2-2-查看表实际占用"><a href="#2-2-查看表实际占用" class="headerlink" title="2.2 查看表实际占用"></a>2.2 查看表实际占用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看HBase表在HDFS中的实际占用空间</span></span><br><span class="line">hdfs dfs -<span class="built_in">du</span> -s -h /hbase/data/default/*</span><br></pre></td></tr></table></figure><p><strong>输出示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1234567890  /hbase/data/default/tsdb</span><br><span class="line">987654321   /hbase/data/default/itmp_metric</span><br></pre></td></tr></table></figure><h3 id="2-3-查看表TTL设置"><a href="#2-3-查看表TTL设置" class="headerlink" title="2.3 查看表TTL设置"></a>2.3 查看表TTL设置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入HBase Shell</span></span><br><span class="line">hbase shell</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看表结构，包括TTL设置</span></span><br><span class="line">describe <span class="string">&quot;tsdb&quot;</span></span><br><span class="line">describe <span class="string">&quot;itmp_metric&quot;</span></span><br></pre></td></tr></table></figure><p><strong>TTL参数说明：</strong></p><ul><li>TTL以秒为单位</li><li>86400秒 &#x3D; 1天</li><li>6912000秒 &#x3D; 80天</li><li>4320000秒 &#x3D; 50天</li></ul><h3 id="2-4-调整表TTL"><a href="#2-4-调整表TTL" class="headerlink" title="2.4 调整表TTL"></a>2.4 调整表TTL</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在HBase Shell中执行</span></span><br><span class="line"><span class="comment"># 将tsdb表的TTL从90天改为80天</span></span><br><span class="line">alter <span class="string">&#x27;tsdb&#x27;</span>, &#123;NAME =&gt; <span class="string">&#x27;t&#x27;</span>, TTL =&gt; 6912000&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将itmp_metric表的TTL从60天改为50天</span></span><br><span class="line">alter <span class="string">&#x27;itmp_metric&#x27;</span>, &#123;NAME =&gt; <span class="string">&#x27;metric&#x27;</span>, TTL =&gt; 4320000&#125;</span><br></pre></td></tr></table></figure><p><strong>TTL计算：</strong></p><ul><li>80天 &#x3D; 80 × 24 × 3600 &#x3D; 6912000秒</li><li>50天 &#x3D; 50 × 24 × 3600 &#x3D; 4320000秒</li></ul><h2 id="3-验证效果"><a href="#3-验证效果" class="headerlink" title="3. 验证效果"></a>3. 验证效果</h2><h3 id="3-1-监控磁盘使用"><a href="#3-1-监控磁盘使用" class="headerlink" title="3.1 监控磁盘使用"></a>3.1 监控磁盘使用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定期检查磁盘使用情况</span></span><br><span class="line"><span class="built_in">df</span> -h</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查HDFS使用情况</span></span><br><span class="line">hdfs dfsadmin -report</span><br></pre></td></tr></table></figure><h3 id="3-2-验证TTL设置"><a href="#3-2-验证TTL设置" class="headerlink" title="3.2 验证TTL设置"></a>3.2 验证TTL设置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入HBase Shell验证设置</span></span><br><span class="line">hbase shell</span><br><span class="line">describe <span class="string">&quot;tsdb&quot;</span></span><br><span class="line">describe <span class="string">&quot;itmp_metric&quot;</span></span><br></pre></td></tr></table></figure><h2 id="4-预防措施"><a href="#4-预防措施" class="headerlink" title="4. 预防措施"></a>4. 预防措施</h2><h3 id="4-1-定期监控"><a href="#4-1-定期监控" class="headerlink" title="4.1 定期监控"></a>4.1 定期监控</h3><ol><li><strong>磁盘空间监控：</strong> 设置磁盘使用率告警</li><li><strong>HDFS监控：</strong> 监控HDFS使用情况和数据分布</li><li><strong>TTL监控：</strong> 定期检查表的TTL设置</li></ol><h3 id="4-2-自动化处理"><a href="#4-2-自动化处理" class="headerlink" title="4.2 自动化处理"></a>4.2 自动化处理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建监控脚本</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 检查磁盘使用率</span></span><br><span class="line">DISK_USAGE=$(<span class="built_in">df</span> -h | grep /data | awk <span class="string">&#x27;&#123;print $5&#125;&#x27;</span> | sed <span class="string">&#x27;s/%//&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$DISK_USAGE</span> -gt 80 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;磁盘使用率过高: <span class="variable">$&#123;DISK_USAGE&#125;</span>%&quot;</span></span><br><span class="line">    <span class="comment"># 发送告警</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h2 id="5-最佳实践"><a href="#5-最佳实践" class="headerlink" title="5. 最佳实践"></a>5. 最佳实践</h2><h3 id="5-1-TTL设置原则"><a href="#5-1-TTL设置原则" class="headerlink" title="5.1 TTL设置原则"></a>5.1 TTL设置原则</h3><ol><li><strong>业务需求：</strong> 根据业务需求确定数据保留期限</li><li><strong>存储成本：</strong> 平衡存储成本和数据价值</li><li><strong>性能影响：</strong> 考虑TTL对查询性能的影响</li><li><strong>合规要求：</strong> 满足数据保留的合规要求</li></ol><h3 id="5-2-操作建议"><a href="#5-2-操作建议" class="headerlink" title="5.2 操作建议"></a>5.2 操作建议</h3><ol><li><strong>分批处理：</strong> 大表TTL调整分批进行</li><li><strong>备份数据：</strong> 重要数据调整前先备份</li><li><strong>测试验证：</strong> 在测试环境验证TTL效果</li><li><strong>监控告警：</strong> 设置相关监控和告警</li></ol><h2 id="6-故障排查"><a href="#6-故障排查" class="headerlink" title="6. 故障排查"></a>6. 故障排查</h2><h3 id="6-1-常见问题"><a href="#6-1-常见问题" class="headerlink" title="6.1 常见问题"></a>6.1 常见问题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查HBase服务状态</span></span><br><span class="line">jps | grep HBase</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查HDFS状态</span></span><br><span class="line">hdfs dfsadmin -report</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看HBase日志</span></span><br><span class="line"><span class="built_in">tail</span> -f /var/log/hbase/hbase-*.<span class="built_in">log</span></span><br></pre></td></tr></table></figure><h3 id="6-2-性能优化"><a href="#6-2-性能优化" class="headerlink" title="6.2 性能优化"></a>6.2 性能优化</h3><ol><li><strong>压缩设置：</strong> 启用HBase表压缩</li><li><strong>分区策略：</strong> 优化表分区策略</li><li><strong>缓存配置：</strong> 调整HBase缓存参数</li><li><strong>GC优化：</strong> 优化JVM垃圾回收</li></ol><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li><strong>风险评估：</strong> 集群资源紧张时，操作需谨慎</li><li><strong>自动化优先：</strong> 优先使用自动化处理，减少人工干预</li><li><strong>充分评估：</strong> 重要集群操作前需充分评估风险</li><li><strong>监控验证：</strong> 操作后持续监控集群状态</li></ol><h2 id="经验总结"><a href="#经验总结" class="headerlink" title="经验总结"></a>经验总结</h2><ul><li>集群资源紧张时，操作需谨慎，优先自动化处理</li><li>TTL合理设置可有效节省磁盘空间，提升集群稳定性</li><li>重要集群操作前需充分评估风险</li><li>定期监控和预防性维护是保持集群稳定的关键</li></ul>]]></content>
      
      
      <categories>
          
          <category> 维护类 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JDK一键安装脚本</title>
      <link href="/posts/699322902/"/>
      <url>/posts/699322902/</url>
      
        <content type="html"><![CDATA[<p>#!&#x2F;bin&#x2F;bash</p><h1 id="JDK一键安装简化脚本"><a href="#JDK一键安装简化脚本" class="headerlink" title="JDK一键安装简化脚本"></a>JDK一键安装简化脚本</h1><h1 id="适用于-jdk-8u231-linux-x64-tar-gz-或-jdk-11-等包"><a href="#适用于-jdk-8u231-linux-x64-tar-gz-或-jdk-11-等包" class="headerlink" title="适用于 jdk-8u231-linux-x64.tar.gz 或 jdk-11* 等包"></a>适用于 jdk-8u231-linux-x64.tar.gz 或 jdk-11* 等包</h1><p>set -e</p><h1 id="1-查找-JDK-包"><a href="#1-查找-JDK-包" class="headerlink" title="1. 查找 JDK 包"></a>1. 查找 JDK 包</h1><p>JDK_PACKAGE&#x3D;$(ls jdk-<em>.tar.gz 2&gt;&#x2F;dev&#x2F;null | head -1)<br>if [[ -z “$JDK_PACKAGE” ]]; then<br>  echo “未找到 JDK 安装包 (jdk-</em>.tar.gz)”<br>  exit 1<br>fi</p><h1 id="2-提取版本号和生成目录名、profile名"><a href="#2-提取版本号和生成目录名、profile名" class="headerlink" title="2. 提取版本号和生成目录名、profile名"></a>2. 提取版本号和生成目录名、profile名</h1><p>if [[ “$JDK_PACKAGE” &#x3D;~ jdk-([0-9]+u[0-9]+) ]]; then<br>  VERSION&#x3D;${BASH_REMATCH[1]}<br>  DIR_NAME&#x3D;”jdk1.${VERSION&#x2F;u&#x2F;.0_}”<br>  PROFILE_NAME&#x3D;”java8.sh”<br>elif [[ “$JDK_PACKAGE” &#x3D;~ jdk-([0-9]+) ]]; then<br>  VERSION&#x3D;${BASH_REMATCH[1]}<br>  DIR_NAME&#x3D;”jdk${VERSION}”<br>  PROFILE_NAME&#x3D;”java${VERSION}.sh”<br>else<br>  echo “无法识别 JDK 版本”<br>  exit 1<br>fi</p><p>INSTALL_DIR&#x3D;”&#x2F;usr&#x2F;local&#x2F;$DIR_NAME”</p><h1 id="3-解压到-usr-local-下"><a href="#3-解压到-usr-local-下" class="headerlink" title="3. 解压到 &#x2F;usr&#x2F;local&#x2F; 下"></a>3. 解压到 &#x2F;usr&#x2F;local&#x2F; 下</h1><p>sudo tar -xzf “$JDK_PACKAGE” -C &#x2F;usr&#x2F;local&#x2F;</p><h1 id="处理解压出来的目录名"><a href="#处理解压出来的目录名" class="headerlink" title="处理解压出来的目录名"></a>处理解压出来的目录名</h1><p>JDK_UNPACKED_DIR&#x3D;$(ls -d &#x2F;usr&#x2F;local&#x2F;jdk* | grep -v “$DIR_NAME” | head -1)<br>if [[ “$JDK_UNPACKED_DIR” !&#x3D; “$INSTALL_DIR” ]]; then<br>  sudo mv “$JDK_UNPACKED_DIR” “$INSTALL_DIR”<br>fi</p><h1 id="4-写环境变量到-etc-profile-d-javaXX-sh"><a href="#4-写环境变量到-etc-profile-d-javaXX-sh" class="headerlink" title="4. 写环境变量到 &#x2F;etc&#x2F;profile.d&#x2F;javaXX.sh"></a>4. 写环境变量到 &#x2F;etc&#x2F;profile.d&#x2F;javaXX.sh</h1><p>sudo tee &#x2F;etc&#x2F;profile.d&#x2F;$PROFILE_NAME &gt; &#x2F;dev&#x2F;null &lt;&lt;EOF<br>export JAVA_HOME&#x3D;$INSTALL_DIR<br>export PATH&#x3D;$JAVA_HOME&#x2F;bin:$PATH<br>EOF</p><h1 id="5-提示"><a href="#5-提示" class="headerlink" title="5. 提示"></a>5. 提示</h1><p>echo “JDK 安装完成: $INSTALL_DIR”<br>echo “请运行: source &#x2F;etc&#x2F;profile.d&#x2F;$PROFILE_NAME 以生效环境变量” </p>]]></content>
      
      
      <categories>
          
          <category> 脚本类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JDK </tag>
            
            <tag> 安装脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis一主两从三哨兵</title>
      <link href="/posts/2408993536/"/>
      <url>/posts/2408993536/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis集群部署（含哨兵集群）"><a href="#Redis集群部署（含哨兵集群）" class="headerlink" title="Redis集群部署（含哨兵集群）"></a>Redis集群部署（含哨兵集群）</h1><h2 id="1-环境说明"><a href="#1-环境说明" class="headerlink" title="1. 环境说明"></a>1. 环境说明</h2><ul><li>操作系统：CentOS 7</li><li>Redis版本：6.2.6</li><li>节点规划：</li></ul><table><thead><tr><th>角色</th><th>IP地址</th><th>端口</th><th>说明</th></tr></thead><tbody><tr><td>主节点</td><td>192.168.1.101</td><td>6379</td><td>Redis主服务器</td></tr><tr><td>从节点1</td><td>192.168.1.102</td><td>6379</td><td>Redis从服务器</td></tr><tr><td>从节点2</td><td>192.168.1.103</td><td>6379</td><td>Redis从服务器</td></tr><tr><td>哨兵1</td><td>192.168.1.101</td><td>26379</td><td>哨兵节点1</td></tr><tr><td>哨兵2</td><td>192.168.1.102</td><td>26379</td><td>哨兵节点2</td></tr><tr><td>哨兵3</td><td>192.168.1.103</td><td>26379</td><td>哨兵节点3</td></tr></tbody></table><h2 id="2-安装Redis"><a href="#2-安装Redis" class="headerlink" title="2. 安装Redis"></a>2. 安装Redis</h2><p>在所有节点上执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">yum install -y gcc make tcl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载并解压Redis</span></span><br><span class="line">wget https://download.redis.io/releases/redis-6.2.6.tar.gz</span><br><span class="line">tar xzf redis-6.2.6.tar.gz</span><br><span class="line"><span class="built_in">cd</span> redis-6.2.6</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译安装</span></span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建配置目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /etc/redis</span><br></pre></td></tr></table></figure><h2 id="3-配置主从复制"><a href="#3-配置主从复制" class="headerlink" title="3. 配置主从复制"></a>3. 配置主从复制</h2><h3 id="3-1-主节点配置（192-168-1-101）"><a href="#3-1-主节点配置（192-168-1-101）" class="headerlink" title="3.1 主节点配置（192.168.1.101）"></a>3.1 主节点配置（192.168.1.101）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建主节点配置文件</span></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/redis/redis.conf &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">bind 0.0.0.0</span></span><br><span class="line"><span class="string">port 6379</span></span><br><span class="line"><span class="string">daemonize yes</span></span><br><span class="line"><span class="string">pidfile /var/run/redis_6379.pid</span></span><br><span class="line"><span class="string">logfile /var/log/redis_6379.log</span></span><br><span class="line"><span class="string">dir /var/lib/redis</span></span><br><span class="line"><span class="string">appendonly yes</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /var/lib/redis</span><br></pre></td></tr></table></figure><h3 id="3-2-从节点配置（192-168-1-102和192-168-1-103）"><a href="#3-2-从节点配置（192-168-1-102和192-168-1-103）" class="headerlink" title="3.2 从节点配置（192.168.1.102和192.168.1.103）"></a>3.2 从节点配置（192.168.1.102和192.168.1.103）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建从节点配置文件</span></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/redis/redis.conf &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">bind 0.0.0.0    # 允许所有IP地址访问Redis</span></span><br><span class="line"><span class="string">port 6379</span></span><br><span class="line"><span class="string">daemonize yes   # 以守护进程方式运行Redis</span></span><br><span class="line"><span class="string">pidfile /var/run/redis_6379.pid</span></span><br><span class="line"><span class="string">logfile /var/log/redis_6379.log</span></span><br><span class="line"><span class="string">dir /var/lib/redis</span></span><br><span class="line"><span class="string">appendonly yes</span></span><br><span class="line"><span class="string">replicaof 192.168.1.101 6379</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /var/lib/redis</span><br></pre></td></tr></table></figure><h2 id="4-启动Redis服务"><a href="#4-启动Redis服务" class="headerlink" title="4. 启动Redis服务"></a>4. 启动Redis服务</h2><p>在所有节点上执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动Redis服务</span></span><br><span class="line">redis-server /etc/redis/redis.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查Redis状态</span></span><br><span class="line">redis-cli ping</span><br></pre></td></tr></table></figure><h2 id="5-验证主从复制"><a href="#5-验证主从复制" class="headerlink" title="5. 验证主从复制"></a>5. 验证主从复制</h2><p>在主节点上执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 连接到Redis</span></span><br><span class="line">redis-cli</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看复制信息</span></span><br><span class="line">info replication</span><br></pre></td></tr></table></figure><h2 id="6-配置哨兵模式"><a href="#6-配置哨兵模式" class="headerlink" title="6. 配置哨兵模式"></a>6. 配置哨兵模式</h2><p>在所有节点上创建哨兵配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建哨兵配置文件</span></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/redis/sentinel.conf &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">port 26379</span></span><br><span class="line"><span class="string">daemonize yes</span></span><br><span class="line"><span class="string">pidfile /var/run/redis-sentinel.pid</span></span><br><span class="line"><span class="string">logfile /var/log/redis-sentinel.log</span></span><br><span class="line"><span class="string">dir /var/lib/redis</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">sentinel monitor mymaster 192.168.1.101 6379 2</span></span><br><span class="line"><span class="string">sentinel down-after-milliseconds mymaster 5000</span></span><br><span class="line"><span class="string">sentinel parallel-syncs mymaster 1</span></span><br><span class="line"><span class="string">sentinel failover-timeout mymaster 10000</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><h2 id="7-启动哨兵服务"><a href="#7-启动哨兵服务" class="headerlink" title="7. 启动哨兵服务"></a>7. 启动哨兵服务</h2><p>在所有节点上执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动哨兵服务</span></span><br><span class="line">redis-sentinel /etc/redis/sentinel.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查哨兵状态</span></span><br><span class="line">redis-cli -p 26379</span><br></pre></td></tr></table></figure><h2 id="8-验证哨兵模式"><a href="#8-验证哨兵模式" class="headerlink" title="8. 验证哨兵模式"></a>8. 验证哨兵模式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 连接到任意哨兵节点</span></span><br><span class="line">redis-cli -p 26379</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看哨兵信息</span></span><br><span class="line">sentinel master mymaster</span><br><span class="line">sentinel slaves mymaster</span><br><span class="line">sentinel sentinels mymaster</span><br></pre></td></tr></table></figure><h2 id="9-故障转移测试"><a href="#9-故障转移测试" class="headerlink" title="9. 故障转移测试"></a>9. 故障转移测试</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模拟主节点故障</span></span><br><span class="line">redis-cli -h 192.168.1.101 -p 6379 debug segfault</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待几秒钟后，检查新的主节点</span></span><br><span class="line">redis-cli -p 26379 sentinel master mymaster</span><br></pre></td></tr></table></figure><h2 id="10-注意事项"><a href="#10-注意事项" class="headerlink" title="10. 注意事项"></a>10. 注意事项</h2><ol><li>防火墙配置</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开放Redis端口</span></span><br><span class="line">firewall-cmd --permanent --add-port=6379/tcp</span><br><span class="line"><span class="comment"># 开放哨兵端口</span></span><br><span class="line">firewall-cmd --permanent --add-port=26379/tcp</span><br><span class="line"><span class="comment"># 重新加载防火墙</span></span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><ol start="2"><li><p>安全建议</p><ul><li>设置Redis密码</li><li>限制Redis只监听内网IP</li><li>定期备份数据</li><li>监控Redis内存使用情况</li></ul></li><li><p>性能优化</p><ul><li>根据实际需求调整内存配置</li><li>配置适当的持久化策略</li><li>监控系统资源使用情况</li></ul></li></ol><h2 id="11-常见问题排查"><a href="#11-常见问题排查" class="headerlink" title="11. 常见问题排查"></a>11. 常见问题排查</h2><ol><li><p>主从复制失败</p><ul><li>检查网络连接</li><li>确认防火墙设置</li><li>查看Redis日志</li></ul></li><li><p>哨兵无法选举</p><ul><li>检查哨兵配置</li><li>确认节点间网络连接</li><li>查看哨兵日志</li></ul></li><li><p>性能问题</p><ul><li>检查内存使用情况</li><li>监控网络延迟</li><li>分析慢查询日志</li></ul></li></ol><h2 id="12-维护建议"><a href="#12-维护建议" class="headerlink" title="12. 维护建议"></a>12. 维护建议</h2><ol><li>定期检查Redis状态</li><li>监控内存使用情况</li><li>定期进行数据备份</li><li>保持Redis版本更新</li><li>记录配置变更</li></ol>]]></content>
      
      
      <categories>
          
          <category> 部署类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 集群 </tag>
            
            <tag> 哨兵 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka集群部署</title>
      <link href="/posts/3152750140/"/>
      <url>/posts/3152750140/</url>
      
        <content type="html"><![CDATA[<h1 id="Kafka-集群在-CentOS-7-上的部署实践"><a href="#Kafka-集群在-CentOS-7-上的部署实践" class="headerlink" title="Kafka 集群在 CentOS 7 上的部署实践"></a>Kafka 集群在 CentOS 7 上的部署实践</h1><h2 id="1-机器规划"><a href="#1-机器规划" class="headerlink" title="1. 机器规划"></a>1. 机器规划</h2><p>我们准备用三台 CentOS 7 服务器来部署 Kafka 集群。这些服务器上也会跑 ZooKeeper 实例。</p><table><thead><tr><th>主机IP</th><th>主机名</th><th>部署内容</th></tr></thead><tbody><tr><td>192.168.1.101</td><td>kafka01</td><td>Kafka, ZooKeeper</td></tr><tr><td>192.168.1.102</td><td>kafka02</td><td>Kafka, ZooKeeper</td></tr><tr><td>192.168.1.103</td><td>kafka03</td><td>Kafka, ZooKeeper</td></tr></tbody></table><h2 id="2-环境准备"><a href="#2-环境准备" class="headerlink" title="2. 环境准备"></a>2. 环境准备</h2><ol><li><p><strong>更新系统</strong><br>先更新一下系统软件包，保证最新状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum update -y</span><br></pre></td></tr></table></figure></li><li><p><strong>安装 JDK</strong><br>Kafka 得跑在 Java 环境上。确保每台机器都装了 JDK 8 或者更新的版本。这里我们装 OpenJDK 8：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum install java-1.8.0-openjdk-devel -y</span><br></pre></td></tr></table></figure></li><li><p><strong>关闭防火墙和 SELinux</strong><br>生产环境的话，防火墙和 SELinux 需要根据实际安全策略来配置。部署测试环境，我们直接关掉它们省事。</p><p>关闭防火墙：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl stop firewalld</span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure><p>关闭 SELinux：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> sed -i <span class="string">&#x27;s/SELINUX=enforcing/SELINUX=disabled/&#x27;</span> /etc/selinux/config</span><br><span class="line"><span class="built_in">sudo</span> reboot <span class="comment"># 改完 SELinux 配置得重启机器才生效</span></span><br></pre></td></tr></table></figure></li><li><p><strong>配置 hosts 文件</strong><br>每台机器的 <code>/etc/hosts</code> 文件里，把集群里所有机器的 IP 和主机名都加进去，方便集群内部互相识别：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.1.101 kafka01</span><br><span class="line">192.168.1.102 kafka02</span><br><span class="line">192.168.1.103 kafka03</span><br></pre></td></tr></table></figure></li></ol><h2 id="3-安装-ZooKeeper-Kafka-的依赖"><a href="#3-安装-ZooKeeper-Kafka-的依赖" class="headerlink" title="3. 安装 ZooKeeper (Kafka 的依赖)"></a>3. 安装 ZooKeeper (Kafka 的依赖)</h2><p>虽然新版本的 Kafka 已经能不靠 ZooKeeper 独立运行，但在集群部署里，为了更稳，通常还是会弄个独立的 ZooKeeper 集群。这里我们让 Kafka 节点也顺带跑 ZooKeeper。</p><ol><li><p><strong>下载 ZooKeeper</strong><br>去 <a href="https://zookeeper.apache.org/releases.html">Apache ZooKeeper官网</a> 下个稳定版本，比如 <code>zookeeper-3.4.14.tar.gz</code>。</p></li><li><p><strong>解压 ZooKeeper</strong><br>把下载的压缩包解压到 <code>/usr/local/</code>，然后改个名字：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> tar -zxvf zookeeper-3.4.14.tar.gz -C /usr/local/</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mv</span> /usr/local/zookeeper-3.4.14 /usr/local/zookeeper</span><br></pre></td></tr></table></figure></li><li><p><strong>创建数据目录</strong><br>给 ZooKeeper 建个数据存放目录，并给你的普通用户赋予权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p /data/zookeeper</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chown</span> -R your_user:your_group /data/zookeeper <span class="comment"># 把 &#x27;your_user&#x27; 和 &#x27;your_group&#x27; 换成你自己的用户和组</span></span><br></pre></td></tr></table></figure></li><li><p><strong>配置 ZooKeeper</strong><br>复制 <code>zoo_sample.cfg</code> 文件，然后编辑 <code>zoo.cfg</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> /usr/local/zookeeper/conf/zoo_sample.cfg /usr/local/zookeeper/conf/zoo.cfg</span><br></pre></td></tr></table></figure><p>编辑 <code>zoo.cfg</code>，主要改这些地方：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    <span class="attr">dataDir</span>=/data/zookeeper</span><br><span class="line">    <span class="attr">clientPort</span>=<span class="number">2181</span></span><br><span class="line"><span class="comment"># follower同步leader的时间如果超过initLimit*tickTime=10秒（tickTime默认是2000毫秒）</span></span><br><span class="line">    <span class="attr">initLimit</span>=<span class="number">5</span>  </span><br><span class="line"><span class="comment"># 允许follower和leader不同步的时间为syncLimit*tickTime=4秒(超过4秒，默认这个follower掉队)</span></span><br><span class="line">    <span class="attr">syncLimit</span>=<span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 集群配置</span></span><br><span class="line">    <span class="attr">server.1</span>=kafka01:<span class="number">2888</span>:<span class="number">3888</span></span><br><span class="line">    <span class="attr">server.2</span>=kafka02:<span class="number">2888</span>:<span class="number">3888</span></span><br><span class="line">    <span class="attr">server.3</span>=kafka03:<span class="number">2888</span>:<span class="number">3888</span></span><br></pre></td></tr></table></figure></li><li><p><strong>创建 myid 文件</strong><br>在 <code>/data/zookeeper</code> 目录里建个 <code>myid</code> 文件，文件内容就是 ZooKeeper 节点的 ID (对应 <code>server.X</code> 里的 X)。</p><ul><li>在 <code>kafka01</code> 上执行：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 1 &gt; /data/zookeeper/myid</span><br></pre></td></tr></table></figure></li><li>在 <code>kafka02</code> 上执行：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 2 &gt; /data/zookeeper/myid</span><br></pre></td></tr></table></figure></li><li>在 <code>kafka03</code> 上执行：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 3 &gt; /data/zookeeper/myid</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>启动 ZooKeeper</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/zookeeper/bin/zkServer.sh start</span><br></pre></td></tr></table></figure><p>检查状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/zookeeper/bin/zkServer.sh status</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-安装和配置-Kafka"><a href="#4-安装和配置-Kafka" class="headerlink" title="4. 安装和配置 Kafka"></a>4. 安装和配置 Kafka</h2><ol><li><p><strong>下载 Kafka</strong><br>从 <a href="https://kafka.apache.org/downloads">Apache Kafka官网</a> 下个二进制发行版，比如 <code>kafka_2.12-2.8.1.tgz</code> (注意 Scala 版本要和 Kafka 版本对应)。</p></li><li><p><strong>解压 Kafka</strong><br>把下载的压缩包解压到 <code>/usr/local/</code>，然后改个名字：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> tar -zxvf kafka_2.12-2.8.1.tgz -C /usr/local/</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mv</span> /usr/local/kafka_2.12-2.8.1 /usr/local/kafka</span><br></pre></td></tr></table></figure></li><li><p><strong>创建日志目录</strong><br>给 Kafka 日志建个目录，并给你的普通用户赋权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p /data/kafka-logs</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chown</span> -R your_user:your_group /data/kafka-logs <span class="comment"># 把 &#x27;your_user&#x27; 和 &#x27;your_group&#x27; 换成你自己的用户和组</span></span><br></pre></td></tr></table></figure></li><li><p><strong>配置 Kafka (server.properties)</strong><br>进入 Kafka 的 <code>config</code> 目录：<code>cd /usr/local/kafka/config</code>，然后编辑 <code>server.properties</code> 文件。</p><ul><li><p><strong><code>kafka01</code> 的配置</strong>：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">broker.id</span>=<span class="number">0</span></span><br><span class="line"><span class="attr">listeners</span>=PLAINTEXT://kafka01:<span class="number">9092</span></span><br><span class="line"><span class="attr">log.dirs</span>=/data/kafka-logs</span><br><span class="line"><span class="attr">zookeeper.connect</span>=kafka01:<span class="number">2181</span>,kafka02:<span class="number">2181</span>,kafka03:<span class="number">2181</span></span><br><span class="line"><span class="comment"># 其他配置项可以根据需要调整</span></span><br></pre></td></tr></table></figure></li><li><p><strong><code>kafka02</code> 的配置</strong>：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">broker.id</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">listeners</span>=PLAINTEXT://kafka02:<span class="number">9092</span></span><br><span class="line"><span class="attr">log.dirs</span>=/data/kafka-logs</span><br><span class="line"><span class="attr">zookeeper.connect</span>=kafka01:<span class="number">2181</span>,kafka02:<span class="number">2181</span>,kafka03:<span class="number">2181</span></span><br></pre></td></tr></table></figure></li><li><p><strong><code>kafka03</code> 的配置</strong>：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">broker.id</span>=<span class="number">2</span></span><br><span class="line"><span class="attr">listeners</span>=PLAINTEXT://kafka03:<span class="number">9092</span></span><br><span class="line"><span class="attr">log.dirs</span>=/data/kafka-logs</span><br><span class="line"><span class="attr">zookeeper.connect</span>=kafka01:<span class="number">2181</span>,kafka02:<span class="number">2181</span>,kafka03:<span class="number">2181</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>重要说明</strong>：</p><ul><li><code>broker.id</code>：每个 Kafka 节点都得是独一无二的。</li><li><code>listeners</code>：配置 Kafka 监听的地址和端口，这里用 <code>PLAINTEXT://主机名:端口</code>。</li><li><code>log.dirs</code>：Kafka 日志放哪儿。</li><li><code>zookeeper.connect</code>：所有 ZooKeeper 节点的地址和端口。</li></ul></li></ol><h2 id="5-启动-Kafka"><a href="#5-启动-Kafka" class="headerlink" title="5. 启动 Kafka"></a>5. 启动 Kafka</h2><p>在每台 Kafka 节点上，进到 Kafka 的根目录，然后执行这个命令启动 Kafka：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/kafka/bin/kafka-server-start.sh /usr/local/kafka/config/server.properties &amp;</span><br></pre></td></tr></table></figure><p>加个 <code>&amp;</code> 让 Kafka 在后台运行。</p><h2 id="6-测试-Kafka-集群"><a href="#6-测试-Kafka-集群" class="headerlink" title="6. 测试 Kafka 集群"></a>6. 测试 Kafka 集群</h2><p>随便挑集群里一台机器来测试。</p><ol><li><p><strong>创建 Topic</strong><br>建个叫 <code>test_topic</code> 的 Topic，3 个分区，2 个副本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/kafka/bin/kafka-topics.sh --create --topic test_topic --bootstrap-server kafka01:9092,kafka02:9092,kafka03:9092 --partitions 3 --replication-factor 2</span><br></pre></td></tr></table></figure></li><li><p><strong>查看 Topic 列表</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/kafka/bin/kafka-topics.sh --list --bootstrap-server kafka01:9092</span><br></pre></td></tr></table></figure></li><li><p><strong>生产消息</strong><br>开个生产者终端，发消息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/kafka/bin/kafka-console-producer.sh --broker-list kafka01:9092,kafka02:9092,kafka03:9092 --topic test_topic</span><br></pre></td></tr></table></figure><p>输完消息回车就发出去了。</p></li><li><p><strong>消费消息</strong><br>开个消费者终端，收消息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/kafka/bin/kafka-console-consumer.sh --bootstrap-server kafka01:9092,kafka02:9092,kafka03:9092 --topic test_topic --from-beginning</span><br></pre></td></tr></table></figure><p><code>--from-beginning</code> 表示从 Topic 最开始把所有消息都读一遍。</p></li></ol><h2 id="7-创建-Systemd-服务-可选"><a href="#7-创建-Systemd-服务-可选" class="headerlink" title="7. 创建 Systemd 服务 (可选)"></a>7. 创建 Systemd 服务 (可选)</h2><p>为了方便用 <code>systemctl</code> 管理 Kafka，可以搞个服务文件。</p><ol><li><p><strong>创建 Kafka 服务文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /etc/systemd/system/kafka.service</span><br></pre></td></tr></table></figure></li><li><p><strong>添加以下内容</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=Apache Kafka Server</span><br><span class="line"><span class="attr">After</span>=network.target zookeeper.service <span class="comment"># ZooKeeper服务一定要先启，后启kakfa</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Type</span>=simple</span><br><span class="line"><span class="attr">User</span>=your_user <span class="comment"># 换成你运行 Kafka 的用户</span></span><br><span class="line"><span class="attr">Group</span>=your_group <span class="comment"># 换成你运行 Kafka 的用户组</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Environment</span>=<span class="string">&quot;JAVA_HOME=/usr/local/jdk1.8.0_231&quot;</span> <span class="comment"># 换成你的 JDK 路径</span></span><br><span class="line"><span class="attr">ExecStart</span>=/usr/local/kafka/bin/kafka-server-start.sh /usr/local/kafka/config/server.properties</span><br><span class="line"><span class="attr">ExecStop</span>=/usr/local/kafka/bin/kafka-server-stop.sh</span><br><span class="line"><span class="attr">Restart</span>=always</span><br><span class="line"><span class="attr">RestartSec</span>=<span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure></li><li><p><strong>创建 ZooKeeper 服务文件 (如果需要)</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /etc/systemd/system/zookeeper.service</span><br></pre></td></tr></table></figure><p>加这些内容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=Apache ZooKeeper Server</span><br><span class="line"><span class="attr">After</span>=network.target</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Type</span>=forking</span><br><span class="line"><span class="attr">User</span>=your_user <span class="comment"># 换成你运行 ZooKeeper 的用户</span></span><br><span class="line"><span class="attr">Group</span>=your_group <span class="comment"># 换成你运行 ZooKeeper 的用户组</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Environment</span>=<span class="string">&quot;JAVA_HOME=/usr/local/jdk1.8.0_231&quot;</span> <span class="comment"># 换成你的 JDK 路径</span></span><br><span class="line"><span class="attr">ExecStart</span>=/usr/local/zookeeper/bin/zkServer.sh start</span><br><span class="line"><span class="attr">ExecStop</span>=/usr/local/zookeeper/bin/zkServer.sh stop</span><br><span class="line"><span class="attr">Restart</span>=always</span><br><span class="line"><span class="attr">RestartSec</span>=<span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure></li><li><p><strong>重新加载 systemd 配置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl daemon-reload</span><br></pre></td></tr></table></figure></li><li><p><strong>管理 Kafka 服务</strong></p><ul><li>启动 Kafka：<code>sudo systemctl start kafka</code></li><li>停止 Kafka：<code>sudo systemctl stop kafka</code></li><li>重启 Kafka：<code>sudo systemctl restart kafka</code></li><li>查看状态：<code>sudo systemctl status kafka</code></li><li>设为开机自启动：<code>sudo systemctl enable kafka</code></li></ul></li><li><p><strong>管理 ZooKeeper 服务</strong></p><ul><li>启动 ZooKeeper：<code>sudo systemctl start zookeeper</code></li><li>停止 ZooKeeper：<code>sudo systemctl stop zookeeper</code></li><li>重启 ZooKeeper：<code>sudo systemctl restart zookeeper</code></li><li>查看状态：<code>sudo systemctl status zookeeper</code></li><li>设为开机自启动：<code>sudo systemctl enable zookeeper</code></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 部署类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 集群 </tag>
            
            <tag> Kafka </tag>
            
            <tag> CentOS7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat部署</title>
      <link href="/posts/1433327308/"/>
      <url>/posts/1433327308/</url>
      
        <content type="html"><![CDATA[<h1 id="Tomcat部署实践"><a href="#Tomcat部署实践" class="headerlink" title="Tomcat部署实践"></a>Tomcat部署实践</h1><h2 id="1-下载-Tomcat"><a href="#1-下载-Tomcat" class="headerlink" title="1. 下载 Tomcat"></a>1. 下载 Tomcat</h2><p>去 <a href="https://tomcat.apache.org/">Apache Tomcat官网</a> 下载适合你 Linux 系统的最新稳定版 Tomcat。</p><h2 id="2-安装和配置"><a href="#2-安装和配置" class="headerlink" title="2. 安装和配置"></a>2. 安装和配置</h2><ol><li><p><strong>解压 Tomcat</strong><br>把下载的 <code>.tar.gz</code> 文件解压到你想要安装的目录，比如 <code>/usr/local/tomcat</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> tar -zxvf apache-tomcat-x.x.x.tar.gz -C /usr/local/</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mv</span> /usr/local/apache-tomcat-x.x.x /usr/local/tomcat</span><br></pre></td></tr></table></figure></li><li><p><strong>配置环境变量 (可选)</strong><br>编辑 <code>~/.bashrc</code> 或 <code>~/.bash_profile</code> 或<code>/etc/profile.d/tomcat.sh</code>文件，加入 <code>CATALINA_HOME</code> 环境变量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> CATALINA_HOME=<span class="string">&quot;/usr/local/tomcat&quot;</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$CATALINA_HOME</span>/bin</span><br></pre></td></tr></table></figure><p>然后执行 <code>source ~/.bashrc</code> 让它生效。</p></li><li><p><strong>配置管理用户 (可选)</strong><br>编辑 <code>conf/tomcat-users.xml</code> 文件，添加管理用户。这步主要是为了能通过网页管理 Tomcat。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ... existing code ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;manager-gui&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;admin-gui&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">username</span>=<span class="string">&quot;admin&quot;</span> <span class="attr">password</span>=<span class="string">&quot;你的密码&quot;</span> <span class="attr">roles</span>=<span class="string">&quot;manager-gui,admin-gui&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ... existing code ... --&gt;</span></span><br></pre></td></tr></table></figure><p>把 <code>你的密码</code> 换成你自己的密码。</p></li></ol><h2 id="3-启动和停止-Tomcat"><a href="#3-启动和停止-Tomcat" class="headerlink" title="3. 启动和停止 Tomcat"></a>3. 启动和停止 Tomcat</h2><ol><li><p><strong>启动</strong><br>进入 <code>bin</code> 目录，运行 <code>startup.sh</code> 脚本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/tomcat/bin</span><br><span class="line">./startup.sh</span><br></pre></td></tr></table></figure></li><li><p><strong>停止</strong><br>进入 <code>bin</code> 目录，运行 <code>shutdown.sh</code> 脚本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/tomcat/bin</span><br><span class="line">./shutdown.sh</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-访问-Tomcat"><a href="#4-访问-Tomcat" class="headerlink" title="4. 访问 Tomcat"></a>4. 访问 Tomcat</h2><p>在浏览器里打开 <code>http://IP:8080</code> (如果你没改默认端口的话)，你应该能看到 Tomcat 的欢迎页面。<br>需要修改html页面：cd &#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;webapps&#x2F;ROOT  （找index.html或index.jsp），格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;IP&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;192.168.131.67&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="5-创建-Systemd-服务"><a href="#5-创建-Systemd-服务" class="headerlink" title="5. 创建 Systemd 服务"></a>5. 创建 Systemd 服务</h2><p>为了用 <code>systemctl</code> 命令管理 Tomcat，我们可以搞一个 <code>systemd</code> 服务单元文件。</p><ol><li><p><strong>创建服务文件</strong><br>用 <code>vim</code> 或者其他编辑器创建 <code>/etc/systemd/system/tomcat.service</code> 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /etc/systemd/system/tomcat.service</span><br></pre></td></tr></table></figure></li><li><p><strong>添加以下内容</strong><br>把下面这些内容复制粘贴到 <code>tomcat.service</code> 文件里。记得根据你的实际安装路径和用户改一下。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=Apache Tomcat Web Application Server</span><br><span class="line"><span class="attr">After</span>=network.target</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Type</span>=forking</span><br><span class="line"><span class="attr">User</span>=admin <span class="comment"># 换成你运行 Tomcat 的用户，比如 tomcat 或者 admin</span></span><br><span class="line"><span class="attr">Group</span>=admin <span class="comment"># 换成你运行 Tomcat 的用户组，比如 tomcat 或者 admin</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Environment</span>=<span class="string">&quot;JAVA_HOME=/usr/local/jdk1.8.0_231&quot;</span> <span class="comment"># 换成你的 JDK 安装路径</span></span><br><span class="line"><span class="attr">Environment</span>=<span class="string">&quot;CATALINA_HOME=/usr/local/tomcat&quot;</span> <span class="comment"># 换成你的 Tomcat 安装路径</span></span><br><span class="line"><span class="attr">Environment</span>=<span class="string">&quot;CATALINA_BASE=/usr/local/tomcat&quot;</span></span><br><span class="line"><span class="attr">Environment</span>=<span class="string">&quot;CATALINA_PID=/usr/local/tomcat/temp/tomcat.pid&quot;</span> <span class="comment"># 指定 PID 文件路径</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ExecStart</span>=/usr/local/tomcat/bin/startup.sh</span><br><span class="line"><span class="attr">ExecStop</span>=/usr/local/tomcat/bin/shutdown.sh</span><br><span class="line"></span><br><span class="line"><span class="attr">PrivateTmp</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">Restart</span>=always</span><br><span class="line"><span class="attr">RestartSec</span>=<span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ul><li><code>User</code> 和 <code>Group</code> 要设成运行 Tomcat 的用户和组，比如 <code>admin</code>。</li><li><code>Environment=&quot;JAVA_HOME=...&quot;</code> 和 <code>Environment=&quot;CATALINA_HOME=...&quot;</code> 一定要换成你的 JDK 和 Tomcat 实际安装路径。</li></ul></li><li><p><strong>重新加载 systemd 配置</strong><br>创建或者修改服务文件后，需要重新加载 <code>systemd</code> 配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl daemon-reload</span><br></pre></td></tr></table></figure></li><li><p><strong>启动、停止、重启和查看状态</strong><br>现在，你就可以用 <code>systemctl</code> 命令来管理 Tomcat 了：</p><ul><li>启动 Tomcat：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl start tomcat</span><br></pre></td></tr></table></figure></li><li>停止 Tomcat：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl stop tomcat</span><br></pre></td></tr></table></figure></li><li>重启 Tomcat：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl restart tomcat</span><br></pre></td></tr></table></figure></li><li>查看 Tomcat 状态：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl status tomcat</span><br></pre></td></tr></table></figure></li><li>设为开机自启动：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> tomcat</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 部署类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
