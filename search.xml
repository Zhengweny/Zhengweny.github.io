<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/posts/2/"/>
      <url>/posts/2/</url>
      
        <content type="html"><![CDATA[<h3 id="ES单节点升级集群方案"><a href="#ES单节点升级集群方案" class="headerlink" title="ES单节点升级集群方案"></a>ES单节点升级集群方案</h3><h4 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Elasticserch7.x版本</span><br><span class="line">1、主分片以及副本分片，主分片可以修改，副本分片不可以修改但是可查询主要于高可用，理论上来说主分片数越多查询速度越快，对于3个节点的集群来说，可以设置5个主分片，1个副本分片（主分片数量设置应该根据服务器cpu及内存大小来配置，注意必须修改jvm配置文件）。</span><br><span class="line">2、默认分片不能通过配置文件来修改</span><br><span class="line">3、单节点重新配置成集群时（1master,3data-node）,单节点上的主分片以及副本分片默认会重新平衡以及重新分配，防止发生主机点变成新增的两个节点之一以及防止第三个节点未启动就开始分配分片，需要设置cluster.initial_master_nodes仅原单节点为master，gateway.recover_after_nodes配置设置为仅只有两台节点都起来才能进行分片分配（数据量太大可能会出现堵塞问题，可以研究是否限制同步的流量）</span><br><span class="line">4、当主节点挂掉之后，再重新加入集群会重新分配未分配的分片</span><br><span class="line">5、在任一节点上都可以创建、查看索引</span><br></pre></td></tr></table></figure><h4 id="二、单节点升级集群方案"><a href="#二、单节点升级集群方案" class="headerlink" title="二、单节点升级集群方案"></a>二、单节点升级集群方案</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">操作步骤</span><br><span class="line">First of all</span><br><span class="line">备份数据</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1、原单节点修改配置</span><br><span class="line">cluster.name: es-cluster</span><br><span class="line">node.name: node01</span><br><span class="line">path.data: /data/data</span><br><span class="line">path.logs: /data/data/log</span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line">http.port: 9200</span><br><span class="line">cluster.initial_master_nodes: [&quot;node01&quot;] 此配置不需要修改</span><br><span class="line">node.data: true</span><br><span class="line">node.master: true</span><br><span class="line">以下是新增配置</span><br><span class="line">discovery.seed_hosts: [&quot;172.53.81.47&quot;] 设置仅检测主节点连通性</span><br><span class="line">path.repo: [&quot;/data/esbak&quot;] 设置存储备份目录</span><br><span class="line">gateway.recover_after_nodes: 2 注意，此配置最重要，设置其他两个节点都起来才进行数据分片同步</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、在扩容节点上安装es（不启动）</span><br><span class="line">修改配置</span><br><span class="line">cluster.name: es-cluster</span><br><span class="line">node.name: node03</span><br><span class="line">network.host: 172.53.81.83</span><br><span class="line">http.port: 9200</span><br><span class="line">path.data: /data/elasticsearch-7.7.0/data</span><br><span class="line">path.logs: /data/elasticsearch-7.7.0/logs</span><br><span class="line">transport.tcp.port: 9300</span><br><span class="line">node.data: true</span><br><span class="line">node.master: true</span><br><span class="line">#discovery.seed_hosts: [&quot;172.53.81.47:9300&quot;,&quot;172.53.81.82:9300&quot;,&quot;172.53.81.83:9300&quot;]</span><br><span class="line">#cluster.initial_master_nodes: [&quot;node01&quot;,&quot;node02&quot;,&quot;node03&quot;]</span><br><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br><span class="line">discovery.seed_hosts: [&quot;172.53.81.47&quot;]</span><br><span class="line">cluster.initial_master_nodes: [&quot;node01&quot;] 设置主节点初始为node1</span><br><span class="line">path.repo: [&quot;/data/esbak&quot;]</span><br><span class="line">3、重启原单节点es，再依次重启新节点</span><br><span class="line">4、等待分片数据分配到新节点</span><br><span class="line">5、分配分片完成后，再进行配置文件修改</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">6、修改三台节点配置文件</span><br><span class="line">cluster.name: es-cluster</span><br><span class="line">node.name: node03</span><br><span class="line">network.host: 172.53.81.83</span><br><span class="line">http.port: 9200</span><br><span class="line">path.data: /data/elasticsearch-7.7.0/data</span><br><span class="line">path.logs: /data/elasticsearch-7.7.0/logs</span><br><span class="line">transport.tcp.port: 9300</span><br><span class="line">node.data: true</span><br><span class="line">node.master: true</span><br><span class="line">#discovery.seed_hosts: [&quot;172.53.81.47:9300&quot;,&quot;172.53.81.82:9300&quot;,&quot;172.53.81.83:9300&quot;]</span><br><span class="line">#cluster.initial_master_nodes: [&quot;node01&quot;,&quot;node02&quot;,&quot;node03&quot;]</span><br><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br><span class="line">discovery.seed_hosts: [&quot;172.53.81.47&quot;]</span><br><span class="line">cluster.initial_master_nodes: [&quot;node01&quot;] 设置主节点初始为node1</span><br><span class="line">path.repo: [&quot;/data/esbak&quot;]</span><br></pre></td></tr></table></figure><h3 id="原环境注意事项"><a href="#原环境注意事项" class="headerlink" title="原环境注意事项"></a>原环境注意事项</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">1、数据量大概30G，注意重启node节点同步时是否会造成网络堵塞</span><br><span class="line">默认重新分配分片的同步数量是2，可以设置同步数量多一点，注意性能</span><br><span class="line"></span><br><span class="line">2、原ES数据库内绝大多数索引都是一个主分片以及一个副本分片总共2个分片，对于三个节点的es集群来说，虽然保证了高可用，但是可能会造成磁盘分配不均匀以及查询速度慢的问题</span><br><span class="line"></span><br><span class="line">初始配置</span><br><span class="line">配置文件内容</span><br><span class="line">cluster.name: es-cluster  </span><br><span class="line">node.name: node01</span><br><span class="line">node.master: true</span><br><span class="line">node.data: true</span><br><span class="line">network.host: 192.168.62.32</span><br><span class="line">http.port: 9200</span><br><span class="line">path.data: /data/elasticsearch/elasticsearch-7.7.0/data</span><br><span class="line">path.logs: /data/elasticsearch/elasticsearch-7.7.0/logs</span><br><span class="line">transport.tcp.port: 9300</span><br><span class="line">discovery.seed_hosts: [&quot;192.168.62.32:9300&quot;,&quot;192.168.62.33:9300&quot;,&quot;192.168.62.34:9300&quot;]</span><br><span class="line">cluster.initial_master_nodes: [&quot;node01&quot;,&quot;node02&quot;,&quot;node03&quot;]</span><br><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br><span class="line"></span><br><span class="line">配置文件解释</span><br><span class="line">cluster.name: es-cluster    #集群名称，各节点相同</span><br><span class="line">node.name: node01       #节点名称，用于区别节点，master做数据节点也是node</span><br><span class="line">node.master: true         #是否可以成为master，不是设置此节点为master</span><br><span class="line">node.data: true           #是否是数据节点，即是否可以存储分片数据</span><br><span class="line">network.host: 192.168.62.32  #监听地址，访问时的地址</span><br><span class="line">http.port: 9200             #监听端口</span><br><span class="line">path.data: /data/elasticsearch/elasticsearch-7.7.0/data   #数据目录</span><br><span class="line">path.logs: /data/elasticsearch/elasticsearch-7.7.0/logs    #日志目录</span><br><span class="line">transport.tcp.port: 9300      #node之间的通信端口，也是选举master时的检测端口</span><br><span class="line">discovery.seed_hosts: [&quot;192.168.62.32:9300&quot;,&quot;192.168.62.33:9300&quot;,&quot;192.168.62.34:9300&quot;] #节点之间的通信配置</span><br><span class="line">cluster.initial_master_nodes: [&quot;node01&quot;,&quot;node02&quot;,&quot;node03&quot;] #初始化配置了node.master: true的节点，使仅仅这些节点可以成为master并在启动时在里面选择一个为master</span><br><span class="line">http.cors.enabled: true        #允许跨域的访问</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;      #允许所有ip跨域访问</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">集群开启数据重平衡</span><br><span class="line">curl -XPUT &quot;http://192.168.62.32:9200/_cluster/settings?pretty&quot; -H &#x27;Content-Type:application/json&#x27; -d \</span><br><span class="line">&#x27;&#123;</span><br><span class="line">  &quot;persistent&quot; :&#123;</span><br><span class="line">      &quot;cluster.routing.rebalance.enable&quot;: &quot;all&quot; </span><br><span class="line">   &#125;,</span><br><span class="line">     &quot;transient&quot; :&#123;</span><br><span class="line">      &quot;cluster.routing.rebalance.enable&quot;: &quot;all&quot;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;&#x27;</span><br><span class="line">Persistent：永久开启</span><br><span class="line">Transient：临时开启</span><br><span class="line"></span><br><span class="line">查询集群配置命令</span><br><span class="line">curl -XGET &quot;http://192.168.62.34:9200/_cluster/settings?pretty&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop集群部署</title>
      <link href="/posts/20250414/"/>
      <url>/posts/20250414/</url>
      
        <content type="html"><![CDATA[<h1 id="前提：机器规划情况"><a href="#前提：机器规划情况" class="headerlink" title="前提：机器规划情况"></a><strong>前提：机器规划情况</strong></h1><p>hadoop各组件下载情况：<a href="https://archive.apache.org/dist/">https://archive.apache.org/dist/</a></p><table><thead><tr><th>主机IP</th><th>主机名</th><th>部署内容</th><th>角色</th></tr></thead><tbody><tr><td>192.168.131.67</td><td>131_67</td><td></td><td>master</td></tr><tr><td>192.168.131.68</td><td>131_68</td><td></td><td>slave01</td></tr><tr><td>192.168.131.69</td><td>131_69</td><td></td><td>slave02</td></tr><tr><td>192.168.131.70</td><td>131_70</td><td></td><td>slave03</td></tr></tbody></table><h1 id="一、环境检查："><a href="#一、环境检查：" class="headerlink" title="一、环境检查："></a><strong>一、环境检查：</strong></h1><p>1、防火墙关闭：systemctl stop firewalld</p><p>2、selinux关闭：sed -i ‘s&#x2F;SELINUX&#x3D;enforcing&#x2F;SELINUX&#x3D;disabled&#x2F;‘ &#x2F;etc&#x2F;selinux&#x2F;config</p><p>3、每台集群节点配置&#x2F;etc&#x2F;hosts文件映射</p><p>192.168.131.67 master 192.168.131.68 slave01 192.168.131.69 slave02 192.168.131.70 slave03</p><h1 id="二、安装jdk"><a href="#二、安装jdk" class="headerlink" title="二、安装jdk"></a><strong>二、安装jdk</strong></h1><p>参见部署类——jdk下载及安装 </p><h1 id="三、解压安装hadoop-（尝试用普通用户admin部署）"><a href="#三、解压安装hadoop-（尝试用普通用户admin部署）" class="headerlink" title="三、解压安装hadoop （尝试用普通用户admin部署）"></a><strong>三、解压安装hadoop （尝试用普通用户admin部署）</strong></h1><p>安装配置完一台，其它的scp过去即可</p><p>mkdir &#x2F;data   (root建完&#x2F;data，chown -R admin.admin &#x2F;data 全部授权给普通用户admin) tar zvxf hadoop-2.7.3.tar.gz -C &#x2F;data</p><h1 id="四、配置hadoop的6个配置文件"><a href="#四、配置hadoop的6个配置文件" class="headerlink" title="四、配置hadoop的6个配置文件"></a><strong>四、配置hadoop的6个配置文件</strong></h1><table><thead><tr><th>配置文件</th><th>用途</th><th>配置文件中加入或修改</th></tr></thead><tbody><tr><td>hadoop-env.sh</td><td>hadoop环境变量定义</td><td>export JAVA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;jdk1.8.0_231export HDFS_NAMENODE_USER&#x3D;”admin”export HDFS_DATANODE_USER&#x3D;”admin”export  HDFS_SECONDARYNAMENODE_USER&#x3D;”admin”export  YARN_RESOURCEMANAGER_USER&#x3D;”admin”export  YARN_NODEMANAGER_USER&#x3D;”admin”</td></tr><tr><td>core-site.xml</td><td>核心配置文件</td><td><strong>1、创建存放临时数据的公共目录：&#x2F;data&#x2F;hadoop-2.7.3&#x2F;tmp</strong>2、属性1：定义角色  #为一组属性     属性2：定义数据存放目录</td></tr><tr><td>hdfs-site.xml</td><td>副本数及web访问定义</td><td>1、副本数定义：hdfs副本数，表示可以存多少份相同的数据，有几个从节点就配置几个2、web端访问地址配置</td></tr><tr><td>yarn-site.xml</td><td>指定resourcemanager</td><td>1、nodemanager获取数据的方式：混洗方式shuffle2、指定<strong>yarn的老大也就是resourcemanager</strong>3、环境变量继承4、关闭虚拟内存检查，开启检查时，虚拟内存不足会导致nodemanager的自杀</td></tr><tr><td>mapred-site.xml</td><td>yarn是mapreduce的第二代，用于资源计算</td><td>指定MapReduce运行在YARN上</td></tr><tr><td>slaves（3.0之后叫workers）</td><td>指定从节点</td><td>指定从节点</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 部署类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis性能调优指南</title>
      <link href="/posts/3577618422/"/>
      <url>/posts/3577618422/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 调优类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 性能调优 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>维护类-为已编译安装后的nginx添加模块</title>
      <link href="/posts/2024041404/"/>
      <url>/posts/2024041404/</url>
      
        <content type="html"><![CDATA[<h1 id="为已编译安装后的nginx添加模块（如ssl模块）"><a href="#为已编译安装后的nginx添加模块（如ssl模块）" class="headerlink" title="为已编译安装后的nginx添加模块（如ssl模块）"></a>为已编译安装后的nginx添加模块（如ssl模块）</h1><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li><p><strong>检查现有模块</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -V</span><br></pre></td></tr></table></figure><p>查看已编译模块列表。</p></li><li><p><strong>确定 Nginx 安装目录</strong><br>例如 <code>/usr/local/nginx-1.23.1</code>。</p></li><li><p><strong>重新编译添加模块</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/nginx-1.23.1 --with-http_ssl_module ...（其他模块参数）</span><br><span class="line">make</span><br><span class="line"><span class="comment"># 千万不要 make install，否则会覆盖原有 Nginx</span></span><br></pre></td></tr></table></figure></li><li><p><strong>备份原有 nginx 可执行文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> /usr/local/nginx-1.23.1/sbin/nginx /usr/local/nginx-1.23.1/sbin/nginx_bak</span><br></pre></td></tr></table></figure></li><li><p><strong>用新编译的 nginx 覆盖原有</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> objs/nginx /usr/local/nginx-1.23.1/sbin/</span><br></pre></td></tr></table></figure></li><li><p><strong>重启并验证</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx-1.23.1/sbin/nginx -s stop</span><br><span class="line">/usr/local/nginx-1.23.1/sbin/nginx</span><br><span class="line">nginx -V</span><br></pre></td></tr></table></figure></li></ol><h2 id="经验总结"><a href="#经验总结" class="headerlink" title="经验总结"></a>经验总结</h2><ul><li>添加模块需重新编译，注意备份原有可执行文件。</li><li>不要执行 make install，避免覆盖全部配置。</li><li>检查模块是否生效用 <code>nginx -V</code>。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 维护类 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>维护类-Linux内核信号量问题-agent的cannot create semaphore set</title>
      <link href="/posts/2024041405/"/>
      <url>/posts/2024041405/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux内核信号量问题-agent的cannot-create-semaphore-set"><a href="#Linux内核信号量问题-agent的cannot-create-semaphore-set" class="headerlink" title="Linux内核信号量问题-agent的cannot create semaphore set"></a>Linux内核信号量问题-agent的cannot create semaphore set</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>zabbix-agent 启动时报错：<code>cannot create semaphore set: [28] No space left on device</code>。</p><h2 id="排查与解决"><a href="#排查与解决" class="headerlink" title="排查与解决"></a>排查与解决</h2><ol><li><p><strong>查看内核信号量参数</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/sysctl.conf | grep kernel.sem</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kernel.sem=250 32000 100 200</span><br></pre></td></tr></table></figure></li><li><p><strong>参数含义</strong></p><ul><li>SEMMSL&#x3D;250：单个信号量集最大信号量数</li><li>SEMMNS&#x3D;32000：信号量总数</li><li>SEMOPM&#x3D;100：可执行的信号量操作数量上限</li><li>SEMMNI&#x3D;200：最大信号量集数</li></ul></li><li><p><strong>核心公式</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SEMMNS ≥ SEMMSL × SEMMNI</span><br></pre></td></tr></table></figure><p>若不满足，需调整 SEMMNI 或 SEMMSL。</p></li><li><p><strong>修改建议</strong></p><ul><li>若 SEMMSL&#x3D;250，SEMMNS&#x3D;32000，建议 SEMMNI&#x3D;128（128*250&#x3D;32000）。</li></ul></li></ol><h2 id="经验总结"><a href="#经验总结" class="headerlink" title="经验总结"></a>经验总结</h2><ul><li>信号量参数配置不当会导致 agent 无法启动。</li><li>修改 <code>/etc/sysctl.conf</code> 后需 <code>sysctl -p</code> 使其生效。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 维护类 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>维护类-http改https解决明文传输问题</title>
      <link href="/posts/2024041403/"/>
      <url>/posts/2024041403/</url>
      
        <content type="html"><![CDATA[<h1 id="http改https解决明文传输问题"><a href="#http改https解决明文传输问题" class="headerlink" title="http改https解决明文传输问题"></a>http改https解决明文传输问题</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>HTTP 明文传输存在安全隐患，敏感信息（如账号密码）易被窃取。通过 Nginx 配置 SSL，实现 HTTP 自动跳转到 HTTPS，保障数据加密传输。</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="1-生成-SSL-自签证书"><a href="#1-生成-SSL-自签证书" class="headerlink" title="1. 生成 SSL 自签证书"></a>1. 生成 SSL 自签证书</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> /etc/nginx/ssl</span><br><span class="line"><span class="built_in">sudo</span> openssl req -x509 -nodes -days 365 -newkey rsa:2048 \</span><br><span class="line">-keyout /etc/nginx/ssl/zabbix.key \</span><br><span class="line">-out /etc/nginx/ssl/zabbix.crt \</span><br><span class="line">-subj <span class="string">&quot;/CN=服务器IP或域名&quot;</span></span><br></pre></td></tr></table></figure><h3 id="2-配置-Nginx"><a href="#2-配置-Nginx" class="headerlink" title="2. 配置 Nginx"></a>2. 配置 Nginx</h3><h4 id="2-1-HTTP-自动跳转-HTTPS"><a href="#2-1-HTTP-自动跳转-HTTPS" class="headerlink" title="2.1 HTTP 自动跳转 HTTPS"></a>2.1 HTTP 自动跳转 HTTPS</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">8888</span>;</span><br><span class="line">    <span class="attribute">server_name</span> _;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$host</span><span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-配置-HTTPS-服务"><a href="#2-2-配置-HTTPS-服务" class="headerlink" title="2.2 配置 HTTPS 服务"></a>2.2 配置 HTTPS 服务</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">server_name</span> _;</span><br><span class="line">    <span class="attribute">ssl_certificate</span> /etc/nginx/ssl/zabbix.crt;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /etc/nginx/ssl/zabbix.key;</span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://localhost:8888;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">        <span class="attribute">proxy_hide_header</span> X-Powered-By;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-修改原有-8888-服务（只允许本地访问）"><a href="#2-3-修改原有-8888-服务（只允许本地访问）" class="headerlink" title="2.3 修改原有 8888 服务（只允许本地访问）"></a>2.3 修改原有 8888 服务（只允许本地访问）</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">127.0.0.1:8888</span>;</span><br><span class="line">    <span class="comment"># 其余配置保持不变</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="经验总结"><a href="#经验总结" class="headerlink" title="经验总结"></a>经验总结</h2><ul><li>明文传输极易泄露敏感信息，务必使用 HTTPS。</li><li>Nginx 配置 SSL 时注意证书路径和权限。</li><li>HTTP 跳转 HTTPS 可提升整体安全性。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 维护类 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Grafana部署</title>
      <link href="/posts/2024041402/"/>
      <url>/posts/2024041402/</url>
      
        <content type="html"><![CDATA[<h1 id="Grafana部署实践"><a href="#Grafana部署实践" class="headerlink" title="Grafana部署实践"></a>Grafana部署实践</h1><h2 id="1-下载-Grafana"><a href="#1-下载-Grafana" class="headerlink" title="1. 下载 Grafana"></a>1. 下载 Grafana</h2><p>前往 <a href="https://grafana.com/grafana/download">Grafana官网</a> 下载适合你系统的版本。</p><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 官网命令</span></span><br><span class="line"><span class="built_in">sudo</span> yum install -y https://dl.grafana.com/enterprise/release/grafana-enterprise-12.0.2-1.x86_64.rpm</span><br></pre></td></tr></table></figure><h2 id="3-启动和停止-Grafana"><a href="#3-启动和停止-Grafana" class="headerlink" title="3. 启动和停止 Grafana"></a>3. 启动和停止 Grafana</h2><ol><li><p><strong>启动</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl start grafana-server</span><br></pre></td></tr></table></figure></li><li><p><strong>停止</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl stop grafana-server</span><br></pre></td></tr></table></figure></li><li><p><strong>重启</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl restart grafana-server</span><br></pre></td></tr></table></figure></li><li><p><strong>开机自启</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> grafana-server</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-访问-Grafana"><a href="#4-访问-Grafana" class="headerlink" title="4. 访问 Grafana"></a>4. 访问 Grafana</h2><p>浏览器访问 <code>http://IP:3000</code>，默认账号密码均为 <code>admin</code>，首次登录需修改密码。</p><h2 id="5-配置数据源"><a href="#5-配置数据源" class="headerlink" title="5. 配置数据源"></a>5. 配置数据源</h2><ol><li>登录 Web UI 后，点击左侧齿轮图标，选择”Data Sources”。</li><li>添加 Prometheus，填写 URL（如 <code>http://localhost:9090</code>），保存即可。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 部署类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Grafana </tag>
            
            <tag> 监控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>维护类-星云系统Hbase集群过期时间设置</title>
      <link href="/posts/2024041406/"/>
      <url>/posts/2024041406/</url>
      
        <content type="html"><![CDATA[<h1 id="星云系统Hbase集群过期时间设置"><a href="#星云系统Hbase集群过期时间设置" class="headerlink" title="星云系统Hbase集群过期时间设置"></a>星云系统Hbase集群过期时间设置</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>HBase 集群磁盘资源紧张，节点因磁盘空间不足导致 DataNode 故障，影响集群稳定性。为节省磁盘空间，需调整大表的过期时间（TTL）。</p><h2 id="排查与处理"><a href="#排查与处理" class="headerlink" title="排查与处理"></a>排查与处理</h2><ol><li><p><strong>观察节点数据变化</strong></p><ul><li>通过 <code>sudo du -s /data/dfs/*</code> 监控各节点数据变化。</li><li>故障节点解除授权时，数据会复制到其他节点，需耐心等待。</li></ul></li><li><p><strong>查看表实际占用</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -<span class="built_in">du</span> -s -h /hbase/data/default/*</span><br></pre></td></tr></table></figure></li><li><p><strong>查看表 TTL 设置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hbase shell</span><br><span class="line">describe <span class="string">&quot;tsdb&quot;</span></span><br><span class="line">describe <span class="string">&quot;itmp_metric&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>调整表 TTL</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter <span class="string">&#x27;tsdb&#x27;</span>, &#123;NAME =&gt; <span class="string">&#x27;t&#x27;</span>, TTL =&gt; 6912000&#125;      <span class="comment"># 90天改为80天</span></span><br><span class="line">alter <span class="string">&#x27;itmp_metric&#x27;</span>, &#123;NAME =&gt; <span class="string">&#x27;metric&#x27;</span>, TTL =&gt; 4320000&#125;  <span class="comment"># 60天改为50天</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="经验教训"><a href="#经验教训" class="headerlink" title="经验教训"></a>经验教训</h2><ul><li>集群资源紧张时，操作需谨慎，优先自动化处理。</li><li>TTL 合理设置可有效节省磁盘空间，提升集群稳定性。</li><li>重要集群操作前需充分评估风险。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 维护类 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Prometheus</title>
      <link href="/posts/2024041401/"/>
      <url>/posts/2024041401/</url>
      
        <content type="html"><![CDATA[<h1 id="普罗米修斯部署实践"><a href="#普罗米修斯部署实践" class="headerlink" title="普罗米修斯部署实践"></a>普罗米修斯部署实践</h1><h2 id="1-下载-Prometheus"><a href="#1-下载-Prometheus" class="headerlink" title="1. 下载 Prometheus"></a>1. 下载 Prometheus</h2><p>前往 <a href="https://prometheus.io/download/">Prometheus官网</a> 下载适合你系统的最新稳定版。</p><h2 id="2-安装和配置"><a href="#2-安装和配置" class="headerlink" title="2. 安装和配置"></a>2. 安装和配置</h2><ol><li><p><strong>解压 Prometheus</strong><br>下载后解压到指定目录，例如 <code>/usr/local/prometheus</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf prometheus-*.tar.gz -C /usr/local/</span><br><span class="line"><span class="built_in">mv</span> /usr/local/prometheus-* /usr/local/prometheus</span><br></pre></td></tr></table></figure></li><li><p><strong>创建数据和配置目录</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /data/prometheus</span><br></pre></td></tr></table></figure></li><li><p><strong>编辑配置文件</strong><br>主要配置文件为 <code>prometheus.yml</code>，可根据实际监控目标调整。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">scrape_interval:</span> <span class="string">15s</span></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;prometheus&#x27;</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;localhost:9090&#x27;</span>]</span><br></pre></td></tr></table></figure></li></ol><h2 id="3-启动和停止-Prometheus"><a href="#3-启动和停止-Prometheus" class="headerlink" title="3. 启动和停止 Prometheus"></a>3. 启动和停止 Prometheus</h2><ol><li><p><strong>启动</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/prometheus</span><br><span class="line">./prometheus --config.file=prometheus.yml --storage.tsdb.path=/data/prometheus &amp;</span><br></pre></td></tr></table></figure></li><li><p><strong>停止</strong><br>查找进程并杀掉：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep prometheus</span><br><span class="line"><span class="built_in">kill</span> &lt;pid&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-访问-Prometheus"><a href="#4-访问-Prometheus" class="headerlink" title="4. 访问 Prometheus"></a>4. 访问 Prometheus</h2><p>浏览器访问 <code>http://IP:9090</code>，可看到 Prometheus Web UI。</p><h2 id="5-创建-Systemd-服务"><a href="#5-创建-Systemd-服务" class="headerlink" title="5. 创建 Systemd 服务"></a>5. 创建 Systemd 服务</h2><ol><li><p><strong>创建服务文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /etc/systemd/system/prometheus.service</span><br></pre></td></tr></table></figure></li><li><p><strong>添加内容</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=Prometheus Monitoring</span><br><span class="line"><span class="attr">After</span>=network.target</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Type</span>=simple</span><br><span class="line"><span class="attr">User</span>=root   <span class="comment"># 视情况而定</span></span><br><span class="line"><span class="attr">Group</span>=root  <span class="comment"># 视情况而定</span></span><br><span class="line"><span class="attr">ExecStart</span>=/usr/local/prometheus/prometheus --config.file=/usr/local/prometheus/prometheus.yml --storage.tsdb.path=/data/prometheus</span><br><span class="line"><span class="attr">Restart</span>=always</span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure></li><li><p><strong>重载 systemd 并启动</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl daemon-reload</span><br><span class="line"><span class="built_in">sudo</span> systemctl start prometheus</span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> prometheus</span><br><span class="line">日志：journalctl -u promethus -f</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 部署类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 监控 </tag>
            
            <tag> Prometheus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDK一键安装脚本</title>
      <link href="/posts/699322902/"/>
      <url>/posts/699322902/</url>
      
        <content type="html"><![CDATA[<p>#!&#x2F;bin&#x2F;bash</p><h1 id="JDK一键安装简化脚本"><a href="#JDK一键安装简化脚本" class="headerlink" title="JDK一键安装简化脚本"></a>JDK一键安装简化脚本</h1><h1 id="适用于-jdk-8u231-linux-x64-tar-gz-或-jdk-11-等包"><a href="#适用于-jdk-8u231-linux-x64-tar-gz-或-jdk-11-等包" class="headerlink" title="适用于 jdk-8u231-linux-x64.tar.gz 或 jdk-11* 等包"></a>适用于 jdk-8u231-linux-x64.tar.gz 或 jdk-11* 等包</h1><p>set -e</p><h1 id="1-查找-JDK-包"><a href="#1-查找-JDK-包" class="headerlink" title="1. 查找 JDK 包"></a>1. 查找 JDK 包</h1><p>JDK_PACKAGE&#x3D;$(ls jdk-<em>.tar.gz 2&gt;&#x2F;dev&#x2F;null | head -1)<br>if [[ -z “$JDK_PACKAGE” ]]; then<br>  echo “未找到 JDK 安装包 (jdk-</em>.tar.gz)”<br>  exit 1<br>fi</p><h1 id="2-提取版本号和生成目录名、profile名"><a href="#2-提取版本号和生成目录名、profile名" class="headerlink" title="2. 提取版本号和生成目录名、profile名"></a>2. 提取版本号和生成目录名、profile名</h1><p>if [[ “$JDK_PACKAGE” &#x3D;~ jdk-([0-9]+u[0-9]+) ]]; then<br>  VERSION&#x3D;${BASH_REMATCH[1]}<br>  DIR_NAME&#x3D;”jdk1.${VERSION&#x2F;u&#x2F;.0_}”<br>  PROFILE_NAME&#x3D;”java8.sh”<br>elif [[ “$JDK_PACKAGE” &#x3D;~ jdk-([0-9]+) ]]; then<br>  VERSION&#x3D;${BASH_REMATCH[1]}<br>  DIR_NAME&#x3D;”jdk${VERSION}”<br>  PROFILE_NAME&#x3D;”java${VERSION}.sh”<br>else<br>  echo “无法识别 JDK 版本”<br>  exit 1<br>fi</p><p>INSTALL_DIR&#x3D;”&#x2F;usr&#x2F;local&#x2F;$DIR_NAME”</p><h1 id="3-解压到-usr-local-下"><a href="#3-解压到-usr-local-下" class="headerlink" title="3. 解压到 &#x2F;usr&#x2F;local&#x2F; 下"></a>3. 解压到 &#x2F;usr&#x2F;local&#x2F; 下</h1><p>sudo tar -xzf “$JDK_PACKAGE” -C &#x2F;usr&#x2F;local&#x2F;</p><h1 id="处理解压出来的目录名"><a href="#处理解压出来的目录名" class="headerlink" title="处理解压出来的目录名"></a>处理解压出来的目录名</h1><p>JDK_UNPACKED_DIR&#x3D;$(ls -d &#x2F;usr&#x2F;local&#x2F;jdk* | grep -v “$DIR_NAME” | head -1)<br>if [[ “$JDK_UNPACKED_DIR” !&#x3D; “$INSTALL_DIR” ]]; then<br>  sudo mv “$JDK_UNPACKED_DIR” “$INSTALL_DIR”<br>fi</p><h1 id="4-写环境变量到-etc-profile-d-javaXX-sh"><a href="#4-写环境变量到-etc-profile-d-javaXX-sh" class="headerlink" title="4. 写环境变量到 &#x2F;etc&#x2F;profile.d&#x2F;javaXX.sh"></a>4. 写环境变量到 &#x2F;etc&#x2F;profile.d&#x2F;javaXX.sh</h1><p>sudo tee &#x2F;etc&#x2F;profile.d&#x2F;$PROFILE_NAME &gt; &#x2F;dev&#x2F;null &lt;&lt;EOF<br>export JAVA_HOME&#x3D;$INSTALL_DIR<br>export PATH&#x3D;$JAVA_HOME&#x2F;bin:$PATH<br>EOF</p><h1 id="5-提示"><a href="#5-提示" class="headerlink" title="5. 提示"></a>5. 提示</h1><p>echo “JDK 安装完成: $INSTALL_DIR”<br>echo “请运行: source &#x2F;etc&#x2F;profile.d&#x2F;$PROFILE_NAME 以生效环境变量” </p>]]></content>
      
      
      <categories>
          
          <category> 脚本类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDK </tag>
            
            <tag> 安装脚本 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis常见故障处理指南</title>
      <link href="/posts/504446177/"/>
      <url>/posts/504446177/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 故障类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 故障处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis一主两从三哨兵</title>
      <link href="/posts/2408993536/"/>
      <url>/posts/2408993536/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis集群部署（含哨兵集群）"><a href="#Redis集群部署（含哨兵集群）" class="headerlink" title="Redis集群部署（含哨兵集群）"></a>Redis集群部署（含哨兵集群）</h1><h2 id="1-环境说明"><a href="#1-环境说明" class="headerlink" title="1. 环境说明"></a>1. 环境说明</h2><ul><li>操作系统：CentOS 7</li><li>Redis版本：6.2.6</li><li>节点规划：</li></ul><table><thead><tr><th>角色</th><th>IP地址</th><th>端口</th><th>说明</th></tr></thead><tbody><tr><td>主节点</td><td>192.168.1.101</td><td>6379</td><td>Redis主服务器</td></tr><tr><td>从节点1</td><td>192.168.1.102</td><td>6379</td><td>Redis从服务器</td></tr><tr><td>从节点2</td><td>192.168.1.103</td><td>6379</td><td>Redis从服务器</td></tr><tr><td>哨兵1</td><td>192.168.1.101</td><td>26379</td><td>哨兵节点1</td></tr><tr><td>哨兵2</td><td>192.168.1.102</td><td>26379</td><td>哨兵节点2</td></tr><tr><td>哨兵3</td><td>192.168.1.103</td><td>26379</td><td>哨兵节点3</td></tr></tbody></table><h2 id="2-安装Redis"><a href="#2-安装Redis" class="headerlink" title="2. 安装Redis"></a>2. 安装Redis</h2><p>在所有节点上执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">yum install -y gcc make tcl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载并解压Redis</span></span><br><span class="line">wget https://download.redis.io/releases/redis-6.2.6.tar.gz</span><br><span class="line">tar xzf redis-6.2.6.tar.gz</span><br><span class="line"><span class="built_in">cd</span> redis-6.2.6</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译安装</span></span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建配置目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /etc/redis</span><br></pre></td></tr></table></figure><h2 id="3-配置主从复制"><a href="#3-配置主从复制" class="headerlink" title="3. 配置主从复制"></a>3. 配置主从复制</h2><h3 id="3-1-主节点配置（192-168-1-101）"><a href="#3-1-主节点配置（192-168-1-101）" class="headerlink" title="3.1 主节点配置（192.168.1.101）"></a>3.1 主节点配置（192.168.1.101）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建主节点配置文件</span></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/redis/redis.conf &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">bind 0.0.0.0</span></span><br><span class="line"><span class="string">port 6379</span></span><br><span class="line"><span class="string">daemonize yes</span></span><br><span class="line"><span class="string">pidfile /var/run/redis_6379.pid</span></span><br><span class="line"><span class="string">logfile /var/log/redis_6379.log</span></span><br><span class="line"><span class="string">dir /var/lib/redis</span></span><br><span class="line"><span class="string">appendonly yes</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /var/lib/redis</span><br></pre></td></tr></table></figure><h3 id="3-2-从节点配置（192-168-1-102和192-168-1-103）"><a href="#3-2-从节点配置（192-168-1-102和192-168-1-103）" class="headerlink" title="3.2 从节点配置（192.168.1.102和192.168.1.103）"></a>3.2 从节点配置（192.168.1.102和192.168.1.103）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建从节点配置文件</span></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/redis/redis.conf &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">bind 0.0.0.0    # 允许所有IP地址访问Redis</span></span><br><span class="line"><span class="string">port 6379</span></span><br><span class="line"><span class="string">daemonize yes   # 以守护进程方式运行Redis</span></span><br><span class="line"><span class="string">pidfile /var/run/redis_6379.pid</span></span><br><span class="line"><span class="string">logfile /var/log/redis_6379.log</span></span><br><span class="line"><span class="string">dir /var/lib/redis</span></span><br><span class="line"><span class="string">appendonly yes</span></span><br><span class="line"><span class="string">replicaof 192.168.1.101 6379</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /var/lib/redis</span><br></pre></td></tr></table></figure><h2 id="4-启动Redis服务"><a href="#4-启动Redis服务" class="headerlink" title="4. 启动Redis服务"></a>4. 启动Redis服务</h2><p>在所有节点上执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动Redis服务</span></span><br><span class="line">redis-server /etc/redis/redis.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查Redis状态</span></span><br><span class="line">redis-cli ping</span><br></pre></td></tr></table></figure><h2 id="5-验证主从复制"><a href="#5-验证主从复制" class="headerlink" title="5. 验证主从复制"></a>5. 验证主从复制</h2><p>在主节点上执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 连接到Redis</span></span><br><span class="line">redis-cli</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看复制信息</span></span><br><span class="line">info replication</span><br></pre></td></tr></table></figure><h2 id="6-配置哨兵模式"><a href="#6-配置哨兵模式" class="headerlink" title="6. 配置哨兵模式"></a>6. 配置哨兵模式</h2><p>在所有节点上创建哨兵配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建哨兵配置文件</span></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/redis/sentinel.conf &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">port 26379</span></span><br><span class="line"><span class="string">daemonize yes</span></span><br><span class="line"><span class="string">pidfile /var/run/redis-sentinel.pid</span></span><br><span class="line"><span class="string">logfile /var/log/redis-sentinel.log</span></span><br><span class="line"><span class="string">dir /var/lib/redis</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">sentinel monitor mymaster 192.168.1.101 6379 2</span></span><br><span class="line"><span class="string">sentinel down-after-milliseconds mymaster 5000</span></span><br><span class="line"><span class="string">sentinel parallel-syncs mymaster 1</span></span><br><span class="line"><span class="string">sentinel failover-timeout mymaster 10000</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><h2 id="7-启动哨兵服务"><a href="#7-启动哨兵服务" class="headerlink" title="7. 启动哨兵服务"></a>7. 启动哨兵服务</h2><p>在所有节点上执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动哨兵服务</span></span><br><span class="line">redis-sentinel /etc/redis/sentinel.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查哨兵状态</span></span><br><span class="line">redis-cli -p 26379</span><br></pre></td></tr></table></figure><h2 id="8-验证哨兵模式"><a href="#8-验证哨兵模式" class="headerlink" title="8. 验证哨兵模式"></a>8. 验证哨兵模式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 连接到任意哨兵节点</span></span><br><span class="line">redis-cli -p 26379</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看哨兵信息</span></span><br><span class="line">sentinel master mymaster</span><br><span class="line">sentinel slaves mymaster</span><br><span class="line">sentinel sentinels mymaster</span><br></pre></td></tr></table></figure><h2 id="9-故障转移测试"><a href="#9-故障转移测试" class="headerlink" title="9. 故障转移测试"></a>9. 故障转移测试</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模拟主节点故障</span></span><br><span class="line">redis-cli -h 192.168.1.101 -p 6379 debug segfault</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待几秒钟后，检查新的主节点</span></span><br><span class="line">redis-cli -p 26379 sentinel master mymaster</span><br></pre></td></tr></table></figure><h2 id="10-注意事项"><a href="#10-注意事项" class="headerlink" title="10. 注意事项"></a>10. 注意事项</h2><ol><li>防火墙配置</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开放Redis端口</span></span><br><span class="line">firewall-cmd --permanent --add-port=6379/tcp</span><br><span class="line"><span class="comment"># 开放哨兵端口</span></span><br><span class="line">firewall-cmd --permanent --add-port=26379/tcp</span><br><span class="line"><span class="comment"># 重新加载防火墙</span></span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><ol start="2"><li><p>安全建议</p><ul><li>设置Redis密码</li><li>限制Redis只监听内网IP</li><li>定期备份数据</li><li>监控Redis内存使用情况</li></ul></li><li><p>性能优化</p><ul><li>根据实际需求调整内存配置</li><li>配置适当的持久化策略</li><li>监控系统资源使用情况</li></ul></li></ol><h2 id="11-常见问题排查"><a href="#11-常见问题排查" class="headerlink" title="11. 常见问题排查"></a>11. 常见问题排查</h2><ol><li><p>主从复制失败</p><ul><li>检查网络连接</li><li>确认防火墙设置</li><li>查看Redis日志</li></ul></li><li><p>哨兵无法选举</p><ul><li>检查哨兵配置</li><li>确认节点间网络连接</li><li>查看哨兵日志</li></ul></li><li><p>性能问题</p><ul><li>检查内存使用情况</li><li>监控网络延迟</li><li>分析慢查询日志</li></ul></li></ol><h2 id="12-维护建议"><a href="#12-维护建议" class="headerlink" title="12. 维护建议"></a>12. 维护建议</h2><ol><li>定期检查Redis状态</li><li>监控内存使用情况</li><li>定期进行数据备份</li><li>保持Redis版本更新</li><li>记录配置变更</li></ol>]]></content>
      
      
      <categories>
          
          <category> 部署类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 集群 </tag>
            
            <tag> 哨兵 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka集群部署</title>
      <link href="/posts/3152750140/"/>
      <url>/posts/3152750140/</url>
      
        <content type="html"><![CDATA[<h1 id="Kafka-集群在-CentOS-7-上的部署实践"><a href="#Kafka-集群在-CentOS-7-上的部署实践" class="headerlink" title="Kafka 集群在 CentOS 7 上的部署实践"></a>Kafka 集群在 CentOS 7 上的部署实践</h1><h2 id="1-机器规划"><a href="#1-机器规划" class="headerlink" title="1. 机器规划"></a>1. 机器规划</h2><p>我们准备用三台 CentOS 7 服务器来部署 Kafka 集群。这些服务器上也会跑 ZooKeeper 实例。</p><table><thead><tr><th>主机IP</th><th>主机名</th><th>部署内容</th></tr></thead><tbody><tr><td>192.168.1.101</td><td>kafka01</td><td>Kafka, ZooKeeper</td></tr><tr><td>192.168.1.102</td><td>kafka02</td><td>Kafka, ZooKeeper</td></tr><tr><td>192.168.1.103</td><td>kafka03</td><td>Kafka, ZooKeeper</td></tr></tbody></table><h2 id="2-环境准备"><a href="#2-环境准备" class="headerlink" title="2. 环境准备"></a>2. 环境准备</h2><ol><li><p><strong>更新系统</strong><br>先更新一下系统软件包，保证最新状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum update -y</span><br></pre></td></tr></table></figure></li><li><p><strong>安装 JDK</strong><br>Kafka 得跑在 Java 环境上。确保每台机器都装了 JDK 8 或者更新的版本。这里我们装 OpenJDK 8：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum install java-1.8.0-openjdk-devel -y</span><br></pre></td></tr></table></figure></li><li><p><strong>关闭防火墙和 SELinux</strong><br>生产环境的话，防火墙和 SELinux 需要根据实际安全策略来配置。部署测试环境，我们直接关掉它们省事。</p><p>关闭防火墙：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl stop firewalld</span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure><p>关闭 SELinux：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> sed -i <span class="string">&#x27;s/SELINUX=enforcing/SELINUX=disabled/&#x27;</span> /etc/selinux/config</span><br><span class="line"><span class="built_in">sudo</span> reboot <span class="comment"># 改完 SELinux 配置得重启机器才生效</span></span><br></pre></td></tr></table></figure></li><li><p><strong>配置 hosts 文件</strong><br>每台机器的 <code>/etc/hosts</code> 文件里，把集群里所有机器的 IP 和主机名都加进去，方便集群内部互相识别：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.1.101 kafka01</span><br><span class="line">192.168.1.102 kafka02</span><br><span class="line">192.168.1.103 kafka03</span><br></pre></td></tr></table></figure></li></ol><h2 id="3-安装-ZooKeeper-Kafka-的依赖"><a href="#3-安装-ZooKeeper-Kafka-的依赖" class="headerlink" title="3. 安装 ZooKeeper (Kafka 的依赖)"></a>3. 安装 ZooKeeper (Kafka 的依赖)</h2><p>虽然新版本的 Kafka 已经能不靠 ZooKeeper 独立运行，但在集群部署里，为了更稳，通常还是会弄个独立的 ZooKeeper 集群。这里我们让 Kafka 节点也顺带跑 ZooKeeper。</p><ol><li><p><strong>下载 ZooKeeper</strong><br>去 <a href="https://zookeeper.apache.org/releases.html">Apache ZooKeeper官网</a> 下个稳定版本，比如 <code>zookeeper-3.4.14.tar.gz</code>。</p></li><li><p><strong>解压 ZooKeeper</strong><br>把下载的压缩包解压到 <code>/usr/local/</code>，然后改个名字：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> tar -zxvf zookeeper-3.4.14.tar.gz -C /usr/local/</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mv</span> /usr/local/zookeeper-3.4.14 /usr/local/zookeeper</span><br></pre></td></tr></table></figure></li><li><p><strong>创建数据目录</strong><br>给 ZooKeeper 建个数据存放目录，并给你的普通用户赋予权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p /data/zookeeper</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chown</span> -R your_user:your_group /data/zookeeper <span class="comment"># 把 &#x27;your_user&#x27; 和 &#x27;your_group&#x27; 换成你自己的用户和组</span></span><br></pre></td></tr></table></figure></li><li><p><strong>配置 ZooKeeper</strong><br>复制 <code>zoo_sample.cfg</code> 文件，然后编辑 <code>zoo.cfg</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> /usr/local/zookeeper/conf/zoo_sample.cfg /usr/local/zookeeper/conf/zoo.cfg</span><br></pre></td></tr></table></figure><p>编辑 <code>zoo.cfg</code>，主要改这些地方：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    <span class="attr">dataDir</span>=/data/zookeeper</span><br><span class="line">    <span class="attr">clientPort</span>=<span class="number">2181</span></span><br><span class="line"><span class="comment"># follower同步leader的时间如果超过initLimit*tickTime=10秒（tickTime默认是2000毫秒）</span></span><br><span class="line">    <span class="attr">initLimit</span>=<span class="number">5</span>  </span><br><span class="line"><span class="comment"># 允许follower和leader不同步的时间为syncLimit*tickTime=4秒(超过4秒，默认这个follower掉队)</span></span><br><span class="line">    <span class="attr">syncLimit</span>=<span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 集群配置</span></span><br><span class="line">    <span class="attr">server.1</span>=kafka01:<span class="number">2888</span>:<span class="number">3888</span></span><br><span class="line">    <span class="attr">server.2</span>=kafka02:<span class="number">2888</span>:<span class="number">3888</span></span><br><span class="line">    <span class="attr">server.3</span>=kafka03:<span class="number">2888</span>:<span class="number">3888</span></span><br></pre></td></tr></table></figure></li><li><p><strong>创建 myid 文件</strong><br>在 <code>/data/zookeeper</code> 目录里建个 <code>myid</code> 文件，文件内容就是 ZooKeeper 节点的 ID (对应 <code>server.X</code> 里的 X)。</p><ul><li>在 <code>kafka01</code> 上执行：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 1 &gt; /data/zookeeper/myid</span><br></pre></td></tr></table></figure></li><li>在 <code>kafka02</code> 上执行：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 2 &gt; /data/zookeeper/myid</span><br></pre></td></tr></table></figure></li><li>在 <code>kafka03</code> 上执行：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 3 &gt; /data/zookeeper/myid</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>启动 ZooKeeper</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/zookeeper/bin/zkServer.sh start</span><br></pre></td></tr></table></figure><p>检查状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/zookeeper/bin/zkServer.sh status</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-安装和配置-Kafka"><a href="#4-安装和配置-Kafka" class="headerlink" title="4. 安装和配置 Kafka"></a>4. 安装和配置 Kafka</h2><ol><li><p><strong>下载 Kafka</strong><br>从 <a href="https://kafka.apache.org/downloads">Apache Kafka官网</a> 下个二进制发行版，比如 <code>kafka_2.12-2.8.1.tgz</code> (注意 Scala 版本要和 Kafka 版本对应)。</p></li><li><p><strong>解压 Kafka</strong><br>把下载的压缩包解压到 <code>/usr/local/</code>，然后改个名字：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> tar -zxvf kafka_2.12-2.8.1.tgz -C /usr/local/</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mv</span> /usr/local/kafka_2.12-2.8.1 /usr/local/kafka</span><br></pre></td></tr></table></figure></li><li><p><strong>创建日志目录</strong><br>给 Kafka 日志建个目录，并给你的普通用户赋权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p /data/kafka-logs</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chown</span> -R your_user:your_group /data/kafka-logs <span class="comment"># 把 &#x27;your_user&#x27; 和 &#x27;your_group&#x27; 换成你自己的用户和组</span></span><br></pre></td></tr></table></figure></li><li><p><strong>配置 Kafka (server.properties)</strong><br>进入 Kafka 的 <code>config</code> 目录：<code>cd /usr/local/kafka/config</code>，然后编辑 <code>server.properties</code> 文件。</p><ul><li><p><strong><code>kafka01</code> 的配置</strong>：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">broker.id</span>=<span class="number">0</span></span><br><span class="line"><span class="attr">listeners</span>=PLAINTEXT://kafka01:<span class="number">9092</span></span><br><span class="line"><span class="attr">log.dirs</span>=/data/kafka-logs</span><br><span class="line"><span class="attr">zookeeper.connect</span>=kafka01:<span class="number">2181</span>,kafka02:<span class="number">2181</span>,kafka03:<span class="number">2181</span></span><br><span class="line"><span class="comment"># 其他配置项可以根据需要调整</span></span><br></pre></td></tr></table></figure></li><li><p><strong><code>kafka02</code> 的配置</strong>：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">broker.id</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">listeners</span>=PLAINTEXT://kafka02:<span class="number">9092</span></span><br><span class="line"><span class="attr">log.dirs</span>=/data/kafka-logs</span><br><span class="line"><span class="attr">zookeeper.connect</span>=kafka01:<span class="number">2181</span>,kafka02:<span class="number">2181</span>,kafka03:<span class="number">2181</span></span><br></pre></td></tr></table></figure></li><li><p><strong><code>kafka03</code> 的配置</strong>：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">broker.id</span>=<span class="number">2</span></span><br><span class="line"><span class="attr">listeners</span>=PLAINTEXT://kafka03:<span class="number">9092</span></span><br><span class="line"><span class="attr">log.dirs</span>=/data/kafka-logs</span><br><span class="line"><span class="attr">zookeeper.connect</span>=kafka01:<span class="number">2181</span>,kafka02:<span class="number">2181</span>,kafka03:<span class="number">2181</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>重要说明</strong>：</p><ul><li><code>broker.id</code>：每个 Kafka 节点都得是独一无二的。</li><li><code>listeners</code>：配置 Kafka 监听的地址和端口，这里用 <code>PLAINTEXT://主机名:端口</code>。</li><li><code>log.dirs</code>：Kafka 日志放哪儿。</li><li><code>zookeeper.connect</code>：所有 ZooKeeper 节点的地址和端口。</li></ul></li></ol><h2 id="5-启动-Kafka"><a href="#5-启动-Kafka" class="headerlink" title="5. 启动 Kafka"></a>5. 启动 Kafka</h2><p>在每台 Kafka 节点上，进到 Kafka 的根目录，然后执行这个命令启动 Kafka：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/kafka/bin/kafka-server-start.sh /usr/local/kafka/config/server.properties &amp;</span><br></pre></td></tr></table></figure><p>加个 <code>&amp;</code> 让 Kafka 在后台运行。</p><h2 id="6-测试-Kafka-集群"><a href="#6-测试-Kafka-集群" class="headerlink" title="6. 测试 Kafka 集群"></a>6. 测试 Kafka 集群</h2><p>随便挑集群里一台机器来测试。</p><ol><li><p><strong>创建 Topic</strong><br>建个叫 <code>test_topic</code> 的 Topic，3 个分区，2 个副本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/kafka/bin/kafka-topics.sh --create --topic test_topic --bootstrap-server kafka01:9092,kafka02:9092,kafka03:9092 --partitions 3 --replication-factor 2</span><br></pre></td></tr></table></figure></li><li><p><strong>查看 Topic 列表</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/kafka/bin/kafka-topics.sh --list --bootstrap-server kafka01:9092</span><br></pre></td></tr></table></figure></li><li><p><strong>生产消息</strong><br>开个生产者终端，发消息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/kafka/bin/kafka-console-producer.sh --broker-list kafka01:9092,kafka02:9092,kafka03:9092 --topic test_topic</span><br></pre></td></tr></table></figure><p>输完消息回车就发出去了。</p></li><li><p><strong>消费消息</strong><br>开个消费者终端，收消息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/kafka/bin/kafka-console-consumer.sh --bootstrap-server kafka01:9092,kafka02:9092,kafka03:9092 --topic test_topic --from-beginning</span><br></pre></td></tr></table></figure><p><code>--from-beginning</code> 表示从 Topic 最开始把所有消息都读一遍。</p></li></ol><h2 id="7-创建-Systemd-服务-可选"><a href="#7-创建-Systemd-服务-可选" class="headerlink" title="7. 创建 Systemd 服务 (可选)"></a>7. 创建 Systemd 服务 (可选)</h2><p>为了方便用 <code>systemctl</code> 管理 Kafka，可以搞个服务文件。</p><ol><li><p><strong>创建 Kafka 服务文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /etc/systemd/system/kafka.service</span><br></pre></td></tr></table></figure></li><li><p><strong>添加以下内容</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=Apache Kafka Server</span><br><span class="line"><span class="attr">After</span>=network.target zookeeper.service <span class="comment"># ZooKeeper服务一定要先启，后启kakfa</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Type</span>=simple</span><br><span class="line"><span class="attr">User</span>=your_user <span class="comment"># 换成你运行 Kafka 的用户</span></span><br><span class="line"><span class="attr">Group</span>=your_group <span class="comment"># 换成你运行 Kafka 的用户组</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Environment</span>=<span class="string">&quot;JAVA_HOME=/usr/local/jdk1.8.0_231&quot;</span> <span class="comment"># 换成你的 JDK 路径</span></span><br><span class="line"><span class="attr">ExecStart</span>=/usr/local/kafka/bin/kafka-server-start.sh /usr/local/kafka/config/server.properties</span><br><span class="line"><span class="attr">ExecStop</span>=/usr/local/kafka/bin/kafka-server-stop.sh</span><br><span class="line"><span class="attr">Restart</span>=always</span><br><span class="line"><span class="attr">RestartSec</span>=<span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure></li><li><p><strong>创建 ZooKeeper 服务文件 (如果需要)</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /etc/systemd/system/zookeeper.service</span><br></pre></td></tr></table></figure><p>加这些内容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=Apache ZooKeeper Server</span><br><span class="line"><span class="attr">After</span>=network.target</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Type</span>=forking</span><br><span class="line"><span class="attr">User</span>=your_user <span class="comment"># 换成你运行 ZooKeeper 的用户</span></span><br><span class="line"><span class="attr">Group</span>=your_group <span class="comment"># 换成你运行 ZooKeeper 的用户组</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Environment</span>=<span class="string">&quot;JAVA_HOME=/usr/local/jdk1.8.0_231&quot;</span> <span class="comment"># 换成你的 JDK 路径</span></span><br><span class="line"><span class="attr">ExecStart</span>=/usr/local/zookeeper/bin/zkServer.sh start</span><br><span class="line"><span class="attr">ExecStop</span>=/usr/local/zookeeper/bin/zkServer.sh stop</span><br><span class="line"><span class="attr">Restart</span>=always</span><br><span class="line"><span class="attr">RestartSec</span>=<span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure></li><li><p><strong>重新加载 systemd 配置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl daemon-reload</span><br></pre></td></tr></table></figure></li><li><p><strong>管理 Kafka 服务</strong></p><ul><li>启动 Kafka：<code>sudo systemctl start kafka</code></li><li>停止 Kafka：<code>sudo systemctl stop kafka</code></li><li>重启 Kafka：<code>sudo systemctl restart kafka</code></li><li>查看状态：<code>sudo systemctl status kafka</code></li><li>设为开机自启动：<code>sudo systemctl enable kafka</code></li></ul></li><li><p><strong>管理 ZooKeeper 服务</strong></p><ul><li>启动 ZooKeeper：<code>sudo systemctl start zookeeper</code></li><li>停止 ZooKeeper：<code>sudo systemctl stop zookeeper</code></li><li>重启 ZooKeeper：<code>sudo systemctl restart zookeeper</code></li><li>查看状态：<code>sudo systemctl status zookeeper</code></li><li>设为开机自启动：<code>sudo systemctl enable zookeeper</code></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 部署类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 集群 </tag>
            
            <tag> Kafka </tag>
            
            <tag> CentOS7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat部署</title>
      <link href="/posts/1433327308/"/>
      <url>/posts/1433327308/</url>
      
        <content type="html"><![CDATA[<h1 id="Tomcat部署实践"><a href="#Tomcat部署实践" class="headerlink" title="Tomcat部署实践"></a>Tomcat部署实践</h1><h2 id="1-下载-Tomcat"><a href="#1-下载-Tomcat" class="headerlink" title="1. 下载 Tomcat"></a>1. 下载 Tomcat</h2><p>去 <a href="https://tomcat.apache.org/">Apache Tomcat官网</a> 下载适合你 Linux 系统的最新稳定版 Tomcat。</p><h2 id="2-安装和配置"><a href="#2-安装和配置" class="headerlink" title="2. 安装和配置"></a>2. 安装和配置</h2><ol><li><p><strong>解压 Tomcat</strong><br>把下载的 <code>.tar.gz</code> 文件解压到你想要安装的目录，比如 <code>/usr/local/tomcat</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> tar -zxvf apache-tomcat-x.x.x.tar.gz -C /usr/local/</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mv</span> /usr/local/apache-tomcat-x.x.x /usr/local/tomcat</span><br></pre></td></tr></table></figure></li><li><p><strong>配置环境变量 (可选)</strong><br>编辑 <code>~/.bashrc</code> 或 <code>~/.bash_profile</code> 或<code>/etc/profile.d/tomcat.sh</code>文件，加入 <code>CATALINA_HOME</code> 环境变量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> CATALINA_HOME=<span class="string">&quot;/usr/local/tomcat&quot;</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$CATALINA_HOME</span>/bin</span><br></pre></td></tr></table></figure><p>然后执行 <code>source ~/.bashrc</code> 让它生效。</p></li><li><p><strong>配置管理用户 (可选)</strong><br>编辑 <code>conf/tomcat-users.xml</code> 文件，添加管理用户。这步主要是为了能通过网页管理 Tomcat。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ... existing code ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;manager-gui&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;admin-gui&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">username</span>=<span class="string">&quot;admin&quot;</span> <span class="attr">password</span>=<span class="string">&quot;你的密码&quot;</span> <span class="attr">roles</span>=<span class="string">&quot;manager-gui,admin-gui&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ... existing code ... --&gt;</span></span><br></pre></td></tr></table></figure><p>把 <code>你的密码</code> 换成你自己的密码。</p></li></ol><h2 id="3-启动和停止-Tomcat"><a href="#3-启动和停止-Tomcat" class="headerlink" title="3. 启动和停止 Tomcat"></a>3. 启动和停止 Tomcat</h2><ol><li><p><strong>启动</strong><br>进入 <code>bin</code> 目录，运行 <code>startup.sh</code> 脚本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/tomcat/bin</span><br><span class="line">./startup.sh</span><br></pre></td></tr></table></figure></li><li><p><strong>停止</strong><br>进入 <code>bin</code> 目录，运行 <code>shutdown.sh</code> 脚本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/tomcat/bin</span><br><span class="line">./shutdown.sh</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-访问-Tomcat"><a href="#4-访问-Tomcat" class="headerlink" title="4. 访问 Tomcat"></a>4. 访问 Tomcat</h2><p>在浏览器里打开 <code>http://IP:8080</code> (如果你没改默认端口的话)，你应该能看到 Tomcat 的欢迎页面。<br>需要修改html页面：cd &#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;webapps&#x2F;ROOT  （找index.html或index.jsp），格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;IP&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;192.168.131.67&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="5-创建-Systemd-服务"><a href="#5-创建-Systemd-服务" class="headerlink" title="5. 创建 Systemd 服务"></a>5. 创建 Systemd 服务</h2><p>为了用 <code>systemctl</code> 命令管理 Tomcat，我们可以搞一个 <code>systemd</code> 服务单元文件。</p><ol><li><p><strong>创建服务文件</strong><br>用 <code>vim</code> 或者其他编辑器创建 <code>/etc/systemd/system/tomcat.service</code> 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /etc/systemd/system/tomcat.service</span><br></pre></td></tr></table></figure></li><li><p><strong>添加以下内容</strong><br>把下面这些内容复制粘贴到 <code>tomcat.service</code> 文件里。记得根据你的实际安装路径和用户改一下。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=Apache Tomcat Web Application Server</span><br><span class="line"><span class="attr">After</span>=network.target</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Type</span>=forking</span><br><span class="line"><span class="attr">User</span>=admin <span class="comment"># 换成你运行 Tomcat 的用户，比如 tomcat 或者 admin</span></span><br><span class="line"><span class="attr">Group</span>=admin <span class="comment"># 换成你运行 Tomcat 的用户组，比如 tomcat 或者 admin</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Environment</span>=<span class="string">&quot;JAVA_HOME=/usr/local/jdk1.8.0_231&quot;</span> <span class="comment"># 换成你的 JDK 安装路径</span></span><br><span class="line"><span class="attr">Environment</span>=<span class="string">&quot;CATALINA_HOME=/usr/local/tomcat&quot;</span> <span class="comment"># 换成你的 Tomcat 安装路径</span></span><br><span class="line"><span class="attr">Environment</span>=<span class="string">&quot;CATALINA_BASE=/usr/local/tomcat&quot;</span></span><br><span class="line"><span class="attr">Environment</span>=<span class="string">&quot;CATALINA_PID=/usr/local/tomcat/temp/tomcat.pid&quot;</span> <span class="comment"># 指定 PID 文件路径</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ExecStart</span>=/usr/local/tomcat/bin/startup.sh</span><br><span class="line"><span class="attr">ExecStop</span>=/usr/local/tomcat/bin/shutdown.sh</span><br><span class="line"></span><br><span class="line"><span class="attr">PrivateTmp</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">Restart</span>=always</span><br><span class="line"><span class="attr">RestartSec</span>=<span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ul><li><code>User</code> 和 <code>Group</code> 要设成运行 Tomcat 的用户和组，比如 <code>admin</code>。</li><li><code>Environment=&quot;JAVA_HOME=...&quot;</code> 和 <code>Environment=&quot;CATALINA_HOME=...&quot;</code> 一定要换成你的 JDK 和 Tomcat 实际安装路径。</li></ul></li><li><p><strong>重新加载 systemd 配置</strong><br>创建或者修改服务文件后，需要重新加载 <code>systemd</code> 配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl daemon-reload</span><br></pre></td></tr></table></figure></li><li><p><strong>启动、停止、重启和查看状态</strong><br>现在，你就可以用 <code>systemctl</code> 命令来管理 Tomcat 了：</p><ul><li>启动 Tomcat：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl start tomcat</span><br></pre></td></tr></table></figure></li><li>停止 Tomcat：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl stop tomcat</span><br></pre></td></tr></table></figure></li><li>重启 Tomcat：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl restart tomcat</span><br></pre></td></tr></table></figure></li><li>查看 Tomcat 状态：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl status tomcat</span><br></pre></td></tr></table></figure></li><li>设为开机自启动：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> tomcat</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 部署类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
