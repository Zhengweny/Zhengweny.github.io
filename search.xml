<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>维护类——记zabbix-server前端页面打不开问题</title>
      <link href="/posts/1647313031/"/>
      <url>/posts/1647313031/</url>
      
        <content type="html"><![CDATA[<h1 id="场景一"><a href="#场景一" class="headerlink" title="场景一"></a>场景一</h1><h2 id="报错信息：访问zabbix页面提示，无法连接数据库"><a href="#报错信息：访问zabbix页面提示，无法连接数据库" class="headerlink" title="报错信息：访问zabbix页面提示，无法连接数据库"></a>报错信息：访问zabbix页面提示，无法连接数据库</h2><p>1、zabbix的前端主要是php文件，正常时放置&#x2F;etc&#x2F;zabbix&#x2F;web&#x2F;zabbix.conf.php下，检查ip和账密无异常，且已经确认zabbix访问数据库的权限问题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[itzxyy@server-5-63 zabbix-server]$ <span class="built_in">sudo</span> <span class="built_in">cat</span> /etc/zabbix/web/zabbix.conf.php</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">// Zabbix GUI configuration file.</span><br><span class="line"></span><br><span class="line">global <span class="variable">$DB</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$DB</span>[<span class="string">&#x27;TYPE&#x27;</span>] = <span class="string">&#x27;MYSQL&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$DB</span>[<span class="string">&#x27;SERVER&#x27;</span>] = <span class="string">&#x27;127.0.0.1&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$DB</span>[<span class="string">&#x27;PORT&#x27;</span>] = <span class="string">&#x27;3306&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$DB</span>[<span class="string">&#x27;DATABASE&#x27;</span>] = <span class="string">&#x27;zabbix&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$DB</span>[<span class="string">&#x27;USER&#x27;</span>] = <span class="string">&#x27;zabbix&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$DB</span>[<span class="string">&#x27;PASSWORD&#x27;</span>] = <span class="string">&#x27;***&#x27;</span>;</span><br><span class="line"></span><br><span class="line">// Schema name. Used <span class="keyword">for</span> IBM DB2 and PostgreSQL.</span><br><span class="line"></span><br><span class="line"><span class="variable">$DB</span>[<span class="string">&#x27;SCHEMA&#x27;</span>] = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$ZBX_SERVER</span> = <span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$ZBX_SERVER_PORT</span> = <span class="string">&#x27;10051&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$ZBX_SERVER_NAME</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$IMAGE_FORMAT_DEFAULT</span> = IMAGE_FORMAT_PNG;</span><br></pre></td></tr></table></figure><p>2、查看nginx配置文件，可以发现读取的php文件来自&#x2F;usr&#x2F;local&#x2F;zabbix-server&#x2F;php这个目录</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">8888</span>;</span><br><span class="line">    <span class="attribute">root</span> /usr/local/zabbix-server/php;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、所以它读取的应该时&#x2F;usr&#x2F;local&#x2F;zabbix-server&#x2F;php改目录下的zabbix.php，检查发现，改配置文件填写的是错误的数据库信息</p><h1 id="场景二"><a href="#场景二" class="headerlink" title="场景二"></a>场景二</h1><h2 id="问题：开发反馈zabbix前端页面报error，接口调用不到，并给了访问地址：http-ip-8888-zabbix-zabbix-php-…"><a href="#问题：开发反馈zabbix前端页面报error，接口调用不到，并给了访问地址：http-ip-8888-zabbix-zabbix-php-…" class="headerlink" title="问题：开发反馈zabbix前端页面报error，接口调用不到，并给了访问地址：http://ip:8888/zabbix/zabbix,php?…"></a>问题：开发反馈zabbix前端页面报error，接口调用不到，并给了访问地址：<a href="http://ip:8888/zabbix/zabbix,php">http://ip:8888/zabbix/zabbix,php</a>?…</h2><p>nginx报error</p><p><img src="/media/image1.png" alt="截图.png"></p><h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><p>1、首先要清楚这里的URI对应的nginx的哪个地方？如图这个部分是是URI</p><p><img src="/media/image2.png" alt="截图.png"></p><p>2、查看nginx配置文件：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> <span class="regexp">~ [^/]\.php(/|$)</span> ：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、[^/]：[]表示匹配字符，[]之外的^才是以什么开头的意思，在字符匹配中[^]表示取反，[^/]即不匹配<span class="string">&quot;/&quot;</span>号</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、也就是匹配 → <span class="regexp">*.php</span>/ → 也就是界面访问应该是：http:ip:<span class="number">8888</span>/<span class="regexp">*.php</span>之后，才能读取到/usr/local/zabbix-server/php该目录下的所有前端相关的文件</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">8888</span>;</span><br><span class="line">    <span class="attribute">root</span> /usr/local/zabbix-server/php;</span><br><span class="line">    ... ... ... ... ... ... ... ...</span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ [^/]\.php(/|$)</span> &#123;</span><br><span class="line">        <span class="comment">#fastcgi_pass unix:/run/php-fpm/zabbix.sock;</span></span><br><span class="line">        <span class="attribute">fastcgi_pass</span> unix:/var/run/php-fpm/www.sock;</span><br><span class="line">        <span class="attribute">fastcgi_split_path_info</span><span class="regexp"> ^(.+\.php)(/.+)$</span>;</span><br><span class="line">        <span class="attribute">fastcgi_index</span> index.php;</span><br><span class="line">        <span class="comment">#fastcgi_param DOCUMENT_ROOT /usr/share/zabbix;</span></span><br><span class="line">        <span class="attribute">fastcgi_param</span> DOCUMENT_ROOT /usr/local/zabbix-server/php;</span><br><span class="line">        <span class="attribute">fastcgi_param</span> SCRIPT_FILENAME /usr/local/zabbix-server/php<span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">        <span class="attribute">fastcgi_param</span> PATH_TRANSLATED /usr/local/zabbix-server/php<span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">        ... ... ... ... ... ... ... ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、显然开发给的接口信息：<a href="http://ip:8888/zabbix/zabbix,php?...%E6%9C%89%E9%97%AE%E9%A2%98%EF%BC%8C%E6%AD%A3%E7%A1%AE%E5%BA%94%E8%AF%A5%E6%98%AFhttp://ip:8888/zabbix,php?...%EF%BC%8C%E8%BF%99%E6%A0%B7%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8%E5%B0%B1%E6%98%AF%E6%AD%A3%E5%B8%B8%E7%9A%84%E4%BA%86%E3%80%82">http://ip:8888/zabbix/zabbix,php?...有问题，正确应该是http://ip:8888/zabbix,php?...，这样接口调用就是正常的了。</a></p><p><img src="/media/image3.png" alt="截图.png"></p>]]></content>
      
      
      <categories>
          
          <category> 维护类 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>维护类——Redis的一些排查及调优</title>
      <link href="/posts/4033335088/"/>
      <url>/posts/4033335088/</url>
      
        <content type="html"><![CDATA[<h1 id="一、如何在redis中获取占用空间比较大的key"><a href="#一、如何在redis中获取占用空间比较大的key" class="headerlink" title="一、如何在redis中获取占用空间比较大的key?"></a>一、如何在redis中获取占用空间比较大的key?</h1><p>参考：<a href="https://www.cnblogs.com/chuanzhang053/p/17121768.html">如何在redis中获取占用空间比较大的key?</a></p><h2 id="1、找出最大的key："><a href="#1、找出最大的key：" class="headerlink" title="1、找出最大的key："></a>1、找出最大的key：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./redis-cli -p &lt;服务端口&gt; -a &lt;认证密码&gt; --bigkeys</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> /usr/local/redis-4.0.3/src/redis-cli -p 6379 -a *** --bigkeys</span><br></pre></td></tr></table></figure><p>显示内容如下，three就是key：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> /usr/local/redis-4.0.3/src/redis-cli -p 6379 -a *** --bigkeys</span><br><span class="line"></span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line">[00.00%] Biggest string found so far <span class="string">&#x27;three&#x27;</span> with 12 bytes → three就是key</span><br></pre></td></tr></table></figure><h2 id="2、分析key占了多大的内存"><a href="#2、分析key占了多大的内存" class="headerlink" title="2、分析key占了多大的内存"></a>2、分析key占了多大的内存</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> /usr/local/redis-4.0.3/src/redis-cli -p 6379</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379 &gt; auth ***</span><br><span class="line">127.0.0.1:6379&gt; memory usage <span class="string">&quot;three&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 63 <span class="comment"># 单位是bytes 1024 Bytes=1K</span></span><br></pre></td></tr></table></figure><h2 id="3、redis键值以及存活多少查看："><a href="#3、redis键值以及存活多少查看：" class="headerlink" title="3、redis键值以及存活多少查看："></a>3、redis键值以及存活多少查看：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">info keyspace</span><br></pre></td></tr></table></figure><h1 id="二、哨兵模式"><a href="#二、哨兵模式" class="headerlink" title="二、哨兵模式"></a>二、哨兵模式</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sentinel down-after-milliseconds mymaster 90000 <span class="comment"># 默认是30秒没有收到节点的响应，则标记为下线，心跳检测每秒1次，持续30秒；可以延长他的判断时间</span></span><br><span class="line"></span><br><span class="line">sentinel failover-timeout mymaster 180000 <span class="comment"># 故障转移的时间，如果故障转移超过了这时间，那会被定义为转移失败；默认就是180000 毫秒，即 180 秒</span></span><br></pre></td></tr></table></figure><h1 id="三、redis检测内存的相关命令"><a href="#三、redis检测内存的相关命令" class="headerlink" title="三、redis检测内存的相关命令"></a>三、redis检测内存的相关命令</h1><p>（有可能导致占用内存的原因：客户端连接、过期时间设置）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> /usr/local/redis-4.0.3/src/redis-cli -p 6379</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379 &gt; info memory</span><br></pre></td></tr></table></figure><p><img src="/media/image1.png" alt="image.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379 &gt; info keyspace <span class="comment"># 查看key的详细信息</span></span><br></pre></td></tr></table></figure><p><img src="/media/image2.png" alt="image.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379 &gt; memory stats <span class="comment"># 内存的一些详细信息</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; CLIENT LIST <span class="comment">#查看客户端连接的具体信息！</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; CLIENT LIST</span><br><span class="line"></span><br><span class="line">....</span><br><span class="line"><span class="built_in">id</span>=177875 addr=132.121.132.191:51164 fd=11 name= age=142 idle=21 flags=N db=6 sub=0 psub=0 multi=-1 qbuf=0 qbuf-free=0 obl=0 oll=0 omem=0 events=r cmd=ping</span><br><span class="line"></span><br><span class="line">....</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主要关注qbuf、 qbuf-free这两个值，判断是否会因为缓冲区不足而导致阻塞</span></span><br><span class="line"></span><br><span class="line">idle=21 空闲21秒</span><br><span class="line"></span><br><span class="line">age=142 客户端连接21秒</span><br><span class="line"></span><br><span class="line">qbuf 客户端查询缓存区的大小，就是客户端发送命令到redis时，会先存到这里面</span><br><span class="line"></span><br><span class="line">qbuf-free 客户端查询缓冲区剩余可用空间的大小</span><br></pre></td></tr></table></figure><h1 id="四、rdb快照配置含义"><a href="#四、rdb快照配置含义" class="headerlink" title="四、rdb快照配置含义"></a>四、rdb快照配置含义</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0.  save 900 1：表示如果在 900 秒（15 分钟）内至少有 1 次写操作，Redis 就会创建一个内存快照。</span><br><span class="line"></span><br><span class="line">    save 300 100：表示如果在 300 秒（5 分钟）内至少有 100 次写操作，Redis 就会创建一个内存快照。（非默认）</span><br><span class="line"></span><br><span class="line">    save 300 10000：表示如果在 300 秒内至少有 10000 次写操作，Redis 就会创建一个内存快照。（非默认）</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 维护类 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis持久化</title>
      <link href="/posts/295621084/"/>
      <url>/posts/295621084/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h1><h2 id="RDB持久化"><a href="#RDB持久化" class="headerlink" title="RDB持久化"></a>RDB持久化</h2><p>数据生成快照保存到硬盘</p><h3 id="持久化的过程"><a href="#持久化的过程" class="headerlink" title="持久化的过程"></a>持久化的过程</h3><blockquote><p><img src="/media/vaqc2oib7uhwj7xtr1x2bb.png"></p></blockquote><h3 id="优点：快"><a href="#优点：快" class="headerlink" title="优点：快"></a>优点：快</h3><h3 id="缺点：无法实时持久化，因为bgsave只有触动了配置的规定才会去fork，不可能每时每刻都去fork的"><a href="#缺点：无法实时持久化，因为bgsave只有触动了配置的规定才会去fork，不可能每时每刻都去fork的" class="headerlink" title="缺点：无法实时持久化，因为bgsave只有触动了配置的规定才会去fork，不可能每时每刻都去fork的"></a>缺点：无法实时持久化，因为bgsave只有触动了配置的规定才会去fork，不可能每时每刻都去fork的</h3><h3 id="手动触发（直接命令行执行）"><a href="#手动触发（直接命令行执行）" class="headerlink" title="手动触发（直接命令行执行）"></a>手动触发（直接命令行执行）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">save</span><br><span class="line">bgsave（针对save阻塞做了调整）</span><br></pre></td></tr></table></figure><h3 id="自动触发的4种情况"><a href="#自动触发的4种情况" class="headerlink" title="自动触发的4种情况"></a>自动触发的4种情况</h3><ol><li>配置了save (就是redis.conf设置了)</li><li>主从复制：主从同步数据的时候，主节点会执行bgsave生成一个RDB快照给从节点</li><li>debug reload重载redis时，会触发save<ul><li>debug reload：该命令很危险，会中断所有客户端，要慎重执行</li></ul></li><li>默认shutdown，无aof时会自动执行bgsave</li></ol><h3 id="RDB文件默认自动压缩"><a href="#RDB文件默认自动压缩" class="headerlink" title="RDB文件默认自动压缩"></a>RDB文件默认自动压缩</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config get redbcompression 默认是<span class="built_in">yes</span>的，最好不要关掉</span><br></pre></td></tr></table></figure><h2 id="AOF持久化"><a href="#AOF持久化" class="headerlink" title="AOF持久化"></a>AOF持久化</h2><h3 id="AOF重写"><a href="#AOF重写" class="headerlink" title="AOF重写"></a>AOF重写</h3><p>把多条命令合并为一个，是重写的本质</p><blockquote><p><img src="/media/xzoo92z9vddnwepup882b.png"></p></blockquote><h3 id="AOF缓冲区由appendfsync控制（调用系统的fsync操作）"><a href="#AOF缓冲区由appendfsync控制（调用系统的fsync操作）" class="headerlink" title="AOF缓冲区由appendfsync控制（调用系统的fsync操作）"></a>AOF缓冲区由appendfsync控制（调用系统的fsync操作）</h3><ul><li><strong>always</strong></li><li><strong>everysec</strong> （一般建议是每秒）</li><li><strong>no</strong></li></ul><p>注：fsync操作，Linux内核提供页缓冲区来提高IO性能</p><h3 id="自动触发重写（两个参数要一起开）"><a href="#自动触发重写（两个参数要一起开）" class="headerlink" title="自动触发重写（两个参数要一起开）"></a>自动触发重写（两个参数要一起开）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auto-aof-rewrite-min-size 64mb  <span class="comment"># 文件最小体积</span></span><br><span class="line">auto-aof-rewrite-percentage 100  <span class="comment"># （当前AOF空间：appendonly.aof具体大小- aof_base_size）/aof_base_size 这个比值为100</span></span><br></pre></td></tr></table></figure><ul><li><code>aof_base_size</code>：上一次重写的空间</li><li>用INFO persistence查看</li><li><code>appendonly.aof</code>具体大小应该也是有个参数的<code>aof_current_size</code>，但是用INFO persistence暂时没看到</li></ul><p>两者同时达到会触发</p><ul><li><code>appendonly.aof</code> 文件大小（<code>aof_current_size</code> 有这个参数，但是我暂时找不到）&gt; <code>auto-aof-rewrite-min-size</code> 【在生产上必然大于默认值64mb】</li><li>（<code>appendonly.aof</code>具体大小- <code>aof_base_size</code>）&#x2F; <code>aof_base_size</code> &gt;&#x3D; 100</li></ul><p>注意：重写fork子进程的开销<code>bgrewriteaof</code>等同于<code>bgsave</code></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol><li><p>AOF和RDB都需要开启fork操作，fork之后，子进程占用的内存大小等同于父进程，物理内存不足会直接导致fork失败</p></li><li><p>如果AOF持久化开启，则优先加载AOF文件，如果aof格式错误，有个修复命令：<code>redis_check_aof --fix</code>，<code>diff -u</code> 对比差异，支持人工修复</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习类 </category>
          
          <category> 中间件 </category>
          
          <category> Redis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>企业级代码部署级回滚</title>
      <link href="/posts/2355097414/"/>
      <url>/posts/2355097414/</url>
      
        <content type="html"><![CDATA[<h1 id="代码部署方式："><a href="#代码部署方式：" class="headerlink" title="代码部署方式："></a>代码部署方式：</h1><p>1）<strong>灰度部署（金丝雀）</strong>：生产环境要发布新代码时，不改变原有的版本v1，同时部署一个新版本v2应用作为”金丝雀”【在同一台服务器上，区别于蓝绿】，通过负载均衡的方式，让一部分用户测试新代码是否有问题，如果有问题，则撤销负载均衡，让用户访问原先v1版本的代码</p><p>2）<strong>蓝绿部署</strong>：就相当于有两套正式环境，当版本升级时，在一套环境中运行没问题，则切到对应的那套环境上（这种对于服务器成本比较高，比较少用）</p><p>3）<strong>A&#x2F;B测试</strong>：就是公司分成了A组和B组团队，投入一样的多的资源，开发一样的东西，客户都会用，也就是一个团队开发得好就先用哪个团队的，但是两个版本都可供客户选择，都是生产环境（也很烧钱）</p><p><img src="/media/image1.png" alt="image.png"></p><h2 id="1、新建任务"><a href="#1、新建任务" class="headerlink" title="1、新建任务"></a>1、新建任务</h2><p><img src="/media/image2.png" alt="image.png"></p><h2 id="2、自定义参数"><a href="#2、自定义参数" class="headerlink" title="2、自定义参数"></a>2、自定义参数</h2><p>设置3个参数选项：</p><ul><li><code>METHOD=$1</code> 对应 deploy、rollback</li><li><code>BRANCH=$2</code> 对应 main、develop  </li><li><code>GROUP=$3</code> 对应 Group1（192.168.131.67：灰度环境的设备）、Group2（192.168.131.68&#x2F;70：表示生产环境的设备）</li></ul><p><img src="/media/image3.png" alt="image.png"></p><p><img src="/media/image4.png" alt="image.png"></p><h2 id="3、构建环境（Shell脚本）"><a href="#3、构建环境（Shell脚本）" class="headerlink" title="3、构建环境（Shell脚本）"></a>3、构建环境（Shell脚本）</h2><p><img src="/media/image5.png" alt="image.png"></p><h3 id="shel脚本存放位置："><a href="#shel脚本存放位置：" class="headerlink" title="shel脚本存放位置："></a>shel脚本存放位置：</h3><pre><code class="language-bash">#!/bin/bash# 用法: bash deploy_gray.sh &lt;deploy|rollback|offline|online&gt; &lt;main|develop&gt; &lt;Group1|Group2&gt;# 说明：所有远程操作均以 root 用户执行，如需更换为其他用户，请统一修改 ssh/scp 命令中的用户名部分。export HOME=/var/lib/jenkinschmod 600 /var/lib/jenkins/.ssh/id_rsachmod 700 /var/lib/jenkins/.sshset -e# 参数校验if [ $# -ne 3 ]; thenecho &quot;用法: $0 &lt;deploy|rollback|offline|online&gt; &lt;main|develop&gt; &lt;Group1|Group2&gt;&quot;exit 1fiMETHOD=$1BRANCH=$2GROUP=$3# 配置区REPO_URL=&quot;git@192.168.131.69:xingyun-system/devops.git&quot;WORKDIR=&quot;/tmp/gray_deploy&quot;DATE_TAG=$(date +%Y%m%d_%H%M%S)PACKAGE_NAME=&quot;static_$&#123;DATE_TAG&#125;.tar.gz&quot;REMOTE_BASE=&quot;/data/tomcat&quot;REMOTE_PACKAGES=&quot;$REMOTE_BASE/packages&quot;REMOTE_RELEASES=&quot;$REMOTE_BASE/releases&quot;REMOTE_LINK=&quot;/usr/local/tomcat/webapps/ROOT&quot;HAPROXY_HOST=&quot;192.168.131.66&quot; # 你的HAProxy主机（VIP1）HAPROXY_SOCK=&quot;/var/lib/haproxy/stats&quot;BACKEND_NAME_GROUP1=&quot;group1_backend&quot;BACKEND_NAME_GROUP2=&quot;group2_backend&quot;# 目标服务器if [ &quot;$GROUP&quot; == &quot;Group1&quot; ]; thenSERVERS=(&quot;192.168.131.67&quot;)BACKEND_NAME=$BACKEND_NAME_GROUP1SERVER_NAMES=(&quot;tomcat1&quot;)elif [ &quot;$GROUP&quot; == &quot;Group2&quot; ]; thenSERVERS=(&quot;192.168.131.68&quot; &quot;192.168.131.70&quot;)BACKEND_NAME=$BACKEND_NAME_GROUP2SERVER_NAMES=(&quot;tomcat2&quot; &quot;tomcat3&quot;)elseecho &quot;Group参数错误，只能为 Group1 或 Group2&quot;exit 2fi# 拉取代码并打包（保留 devops 目录名）function git_and_package() &#123;GIT_SSH_COMMAND=&quot;ssh -i /var/lib/jenkins/.ssh/id_rsa -o StrictHostKeyChecking=no&quot; git clone git@192.168.131.69:xingyun-system/devops.git /tmp/gray_deployrm -rf /tmp/gray_deploy /tmp/devopsgit clone -b $BRANCH $REPO_URL $WORKDIRif [ $? -ne 0 ]; thenecho &quot;代码拉取失败&quot;exit 3ficp -r $WORKDIR /tmp/devopscd /tmptar czf $PACKAGE_NAME devopsrm -rf devopscd -&#125;# 上传包到目标服务器function upload_package() &#123;for server in &quot;$&#123;SERVERS[@]&#125;&quot;; dossh root@$server &quot;mkdir -p $REMOTE_PACKAGES $REMOTE_RELEASES&quot;scp /tmp/$PACKAGE_NAME root@$server:$REMOTE_PACKAGES/done&#125;# 远程解压并切换软连接，并重启 Tomcatfunction remote_deploy_and_link() &#123;for server in &quot;$&#123;SERVERS[@]&#125;&quot;; dossh root@$server &quot;mkdir -p $REMOTE_RELEASES/$&#123;DATE_TAG&#125; &amp;&amp;tar xzf $REMOTE_PACKAGES/$PACKAGE_NAME -C $REMOTE_RELEASES/$&#123;DATE_TAG&#125; &amp;&amp;rm -rf $REMOTE_LINK &amp;&amp;ln -sfn $REMOTE_RELEASES/$&#123;DATE_TAG&#125;/devops $REMOTE_LINK &amp;&amp;shutdown.sh &amp;&amp; startup.sh&quot;echo &quot;已部署并切换软连接到 $server，并重启 Tomcat&quot;done&#125;# 回滚到上一个版本（软连接切换到上一个目录/devops，并重启 Tomcat）function rollback_version() &#123;for server in &quot;$&#123;SERVERS[@]&#125;&quot;; doPREV=$(ssh root@$server &quot;ls -dt $REMOTE_RELEASES/* | sed -n &#39;2p&#39;&quot;)if [ -z &quot;$PREV&quot; ]; thenecho &quot;$server 没有可回滚的历史版本&quot;exit 4fissh root@$server &quot;rm -rf $REMOTE_LINK &amp;&amp; ln -sfn $PREV/devops $REMOTE_LINK &amp;&amp; shutdown.sh &amp;&amp; startup.sh&quot;echo &quot;$server 已回滚到 $PREV，并重启 Tomcat&quot;done&#125;# 灰度完成后摘除 group1 节点function offline_group1() &#123;for name in &quot;$&#123;SERVER_NAMES[@]&#125;&quot;; dossh root@$HAPROXY_HOST &quot;echo &#39;disable server $BACKEND_NAME/$name&#39; | socat stdio $HAPROXY_SOCK&quot;echo &quot;$name 已从 $BACKEND_NAME 摘除&quot;done&#125;# 灰度回滚/上线后重新加入 group1 节点function online_group1() &#123;for name in &quot;$&#123;SERVER_NAMES[@]&#125;&quot;; dossh root@$HAPROXY_HOST &quot;echo &#39;enable server $BACKEND_NAME/$name&#39; | socat stdio $HAPROXY_SOCK&quot;echo &quot;$name 已重新加入 $BACKEND_NAME&quot;done&#125;# 主流程case &quot;$METHOD&quot; indeploy)git_and_packageupload_packageremote_deploy_and_link;;rollback)rollback_version;;offline)offline_group1;;online)online_group1;;*)echo &quot;Method参数错误，只能为 deploy、rollback、offline、online&quot;exit 5;;esacecho &quot;操作完成&quot;jenkins中构建选择shell执行bash /var/lib/jenkins/scripts/deploy_gray.sh $METHOD $BRANCH $GROUP![image.png](media/image6.png)## 4、更新gitlab上的版本此时tomcat访问的界面如下：![image.png](media/image7.png)我们针对这两个问题重新提交一次代码1、先将项目拉到本地进行修改git clone http://192.168.131.69/xingyun-system/devops.git # 先将项目拉到本地进行修改[root@131_70 devops]# cat index.html&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt; # 我已经设置了一个UTF-8了，等下验证下界面是否还会乱码&lt;title&gt;第一个html程序&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;hello world!&lt;/h1&gt; # 也加了一个标题hello world! version2 both !!hello world! version3 both !!hello world! version4 both !!&lt;/body&gt;&lt;/html&gt;2、添加至缓存区并提交至本地仓库git add . &amp;&amp; git commit -m &quot;fix title and add h1&quot;3、提交至远程仓库，即gitlabgit push注意：一般灰度测试是测试了开发分支develop成功之后才合并至主分支main的,我刚刚一直在主分支下操作因此我强制更新主分支至开发分支，以便等下用开发分支做测试和部署[root@131_70 ~]# cd devops/ # 还是当前拉下来的main分支项目[root@131_70 devops]# git checkout develop # 直接切换至develop分支下[root@131_70 devops]# git branch # 确认此时在开发分支* developmain[root@131_70 devops]# git reset --hard main # 强制将main分支的内容重置到develop下[root@131_70 devops]# git push origin develop # 推送至gitlab的develop下## 5、jenkins中进行参数构建![image.png](media/image8.png)## 6、灰度更新效果可以发现此时灰度环境：131.67已完成部署，&lt;http://192.168.131.67:8080/&gt;![image.png](media/image9.png)我们用vip访问看看：&lt;http://192.168.131.128:5000/&gt;负载至67、68、70；此时用户如果访问到67，那么他们就是此次升级的灰度用户了！灰度部署的目的也就达成![image.png](media/image10.png)![image.png](media/image11.png)## 7、回滚灰度环境此时如果发现访问的效果不如所愿，则回滚灰度环境![image.png](media/image12.png)![image.png](media/image13.png)## 8、灰度部署成功之后，部署生产设备（即Group2）此时访问vip:&lt;http://192.168.131.128:5000/&gt;不管怎么刷新就都是最新版本看![image.png](media/image14.png)## 9、摘除灰度环境（联动haproxy）1、在jenkins中增加两个参数选项：offline和online**offline灰度完成之后，将灰度环境从生产环境中摘除（也就是让vip只负载至68和70，将灰度环境67摘除）****online上线时，将灰度环境加入生产的负载中**![image.png](media/image15.png)此时我们已经将生产环境升级为最近版本了，但是此时灰度服务器还在负载池中，我们用**offline将灰度环境67从负载池中摘除**  echo &#39;disable server group1_backend/tomcat1&#39; | socat stdio/var/lib/haproxy/haproxy.sock将灰度环境加入负载池，则用enableecho &#39;enable server group1_backend/tomcat1&#39; | socat stdio/var/lib/haproxy/stats</code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习类 </category>
          
          <category> CICD </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>3、Jenkins （CD）</title>
      <link href="/posts/2354803713/"/>
      <url>/posts/2354803713/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Jenkins简介"><a href="#一、Jenkins简介" class="headerlink" title="一、Jenkins简介"></a>一、Jenkins简介</h1><p>jenkins是java语言写的，用于自动化各种任务，包括编译、测试、部署，是插件化服务，拥有1500+插件实现各种功能</p><p>官网：<a href="https://www.jenkins.io/">https://www.jenkins.io/</a></p><h2 id="二、Jenkins怎么实现分布式构建测试部署？"><a href="#二、Jenkins怎么实现分布式构建测试部署？" class="headerlink" title="二、Jenkins怎么实现分布式构建测试部署？"></a>二、Jenkins怎么实现分布式构建测试部署？</h2><p>运用Jenkins的agent (Jenkins remoting)实现编译过程</p><p><img src="/media/image1.png" alt="image.png"></p><h2 id="三、安装"><a href="#三、安装" class="headerlink" title="三、安装"></a>三、安装</h2><p><strong>注意：<strong>直接yum最新的，不然有些插件版本不兼容，<strong>jdk直接下载17</strong>，之前内容太久了，会导致插件安装不成功，2025年我安装的是</strong>Jenkins 2.504.2</strong>，插件安装都很顺利，已将&#x2F;var&#x2F;lib&#x2F;jenkins&#x2F;plugins目录打包，有需要直接解压放在改目录下！！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/lib/jenkins</span><br><span class="line">tar zxvf plugins.tar.gz</span><br></pre></td></tr></table></figure><p>(该包放在”D:\Desktop\自己\jenkins插件安装包”下)</p><h3 id="1、安装jdk"><a href="#1、安装jdk" class="headerlink" title="1、安装jdk"></a>1、安装jdk</h3><p>要看是jenkins是哪个版本的，要对应安装jdk版本</p><h3 id="2、官网下载LTS（长期支持版）"><a href="#2、官网下载LTS（长期支持版）" class="headerlink" title="2、官网下载LTS（长期支持版）"></a>2、官网下载LTS（长期支持版）</h3><p><a href="https://get.jenkins.io/redhat-stable/">https://get.jenkins.io/redhat-stable/</a> （直接跳过去下载rpm包就行)</p><p>→ 目前下载的长期稳定版本是<em><strong>2.346.1</strong></em>，该版本支持Java 8, Java 11, or Java 17</p><p><img src="/media/image2.png" alt="image.png"></p><p><img src="/media/image3.png" alt="image.png"></p><p><img src="/media/image4.png" alt="image.png"></p><h3 id="3、安装"><a href="#3、安装" class="headerlink" title="3、安装"></a>3、安装</h3><h4 id="1、安装："><a href="#1、安装：" class="headerlink" title="1、安装："></a>1、安装：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum localinstall -y jenkins-2.346.1-1.1.noarch.rpm</span><br></pre></td></tr></table></figure><h4 id="2、修改配置文件："><a href="#2、修改配置文件：" class="headerlink" title="2、修改配置文件："></a>2、修改配置文件：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/jenkins</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">JENKINS_PORT=<span class="string">&quot;8086&quot;</span> <span class="comment"># 8080担心被撞了，我改成了8086</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="3、⭐修改自启动文件"><a href="#3、⭐修改自启动文件" class="headerlink" title="3、⭐修改自启动文件"></a>3、⭐修改自启动文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@131_70 jenkins]# egrep -v <span class="string">&quot;^$|#&quot;</span> /usr/lib/systemd/system/jenkins.service</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=Jenkins Continuous Integration Server</span><br><span class="line">Requires=network.target</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">NotifyAccess=main</span><br><span class="line">ExecStart=/usr/bin/jenkins</span><br><span class="line">Restart=on-failure</span><br><span class="line">SuccessExitStatus=143</span><br><span class="line">Environment=<span class="string">&quot;JAVA_HOME=/usr/local/jdk11&quot;</span> <span class="comment"># 添加上java路径</span></span><br><span class="line">Environment=<span class="string">&quot;PATH=/usr/local/jdk11/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin&quot;</span> <span class="comment"># 添加上java路径</span></span><br><span class="line">User=jenkins</span><br><span class="line">Group=jenkins</span><br><span class="line">Environment=<span class="string">&quot;JENKINS_HOME=/var/lib/jenkins&quot;</span></span><br><span class="line">WorkingDirectory=/var/lib/jenkins</span><br><span class="line">Environment=<span class="string">&quot;JENKINS_WEBROOT=%C/jenkins/war&quot;</span></span><br><span class="line">Environment=<span class="string">&quot;JAVA_OPTS=-Djava.awt.headless=true&quot;</span></span><br><span class="line">Environment=<span class="string">&quot;JENKINS_PORT=8086&quot;</span> <span class="comment"># 修改为对应的端口</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><h4 id="4、重启并设置自启动"><a href="#4、重启并设置自启动" class="headerlink" title="4、重启并设置自启动"></a>4、重启并设置自启动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum install fontconfig -y <span class="comment"># 不然后面会报错，jenkins需要必要的字体配置</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl daemon-reload  <span class="comment"># 加载配置文件</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> jenkins <span class="comment"># 设置自启动</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl start jenkins <span class="comment"># 启动</span></span><br></pre></td></tr></table></figure><p>注：如果没有安装字体，这里会遇到一个问题（字体配置为空）：java.lang.RuntimeException: Fontconfig head is null, check your fonts or fonts configuration</p><p>安装sudo yum install fontconfig -y 即可</p><h4 id="4、初始化"><a href="#4、初始化" class="headerlink" title="4、初始化"></a>4、初始化</h4><p>先跳过插件安装，因为推荐安装可能很多插件都有问题<br><strong>(最好安装推荐插件！！！！不然后面邮箱都配置不了！！！！)</strong></p><p><img src="/media/image5.png" alt="image.png"></p><p><img src="/media/image6.png" alt="image.png"></p><p>这里账密设置一致了</p><p>jenkinsadmin&#x2F;jenkinsadmin</p><p><img src="/media/image7.png" alt="image.png"></p><p><img src="/media/image8.png" alt="image.png"></p><h4 id="5、配置镜像地址-配置为国内华为云镜像"><a href="#5、配置镜像地址-配置为国内华为云镜像" class="headerlink" title="5、配置镜像地址(配置为国内华为云镜像)"></a>5、配置镜像地址(配置为国内华为云镜像)</h4><h5 id="1、配置文件1：-root-jenkins-hudson-model-UpdateCenter-xml"><a href="#1、配置文件1：-root-jenkins-hudson-model-UpdateCenter-xml" class="headerlink" title="1、配置文件1：&#x2F;root&#x2F;.jenkins&#x2F;hudson.model.UpdateCenter.xml"></a>1、配置文件1：&#x2F;root&#x2F;.jenkins&#x2F;hudson.model.UpdateCenter.xml</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> /root/.jenkins/hudson.model.UpdateCenter.xml /root/.jenkins/hudson.model.UpdateCenter.xml_bak</span><br><span class="line"></span><br><span class="line">[root@131_70 .jenkins]# <span class="built_in">cat</span> /root/.jenkins/hudson.model.UpdateCenter.xml</span><br><span class="line"></span><br><span class="line">&lt;?xml version=<span class="string">&#x27;1.1&#x27;</span> encoding=<span class="string">&#x27;UTF-8&#x27;</span>?&gt;</span><br><span class="line">&lt;sites&gt;</span><br><span class="line">&lt;site&gt;</span><br><span class="line">&lt;<span class="built_in">id</span>&gt;default&lt;/id&gt;</span><br><span class="line">&lt;url&gt;https://mirrors.huaweicloud.com/jenkins/updates/update-center.json&lt;/url&gt; <span class="comment"># 改成华为云的镜像地址</span></span><br><span class="line">&lt;/site&gt;</span><br></pre></td></tr></table></figure><h5 id="2、配置文件2：-var-lib-jenkins-updates-default-json"><a href="#2、配置文件2：-var-lib-jenkins-updates-default-json" class="headerlink" title="2、配置文件2：&#x2F;var&#x2F;lib&#x2F;jenkins&#x2F;updates&#x2F;default.json"></a>2、配置文件2：&#x2F;var&#x2F;lib&#x2F;jenkins&#x2F;updates&#x2F;default.json</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> /var/lib/jenkins/updates/default.json /var/lib/jenkins/updates/default.json_bak</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&quot;s#www.google.com#www.baidu.com#g&quot;</span> /var/lib/jenkins/updates/default.json</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&quot;s#updates.jenkins.io/download#https://mirrors.huaweicloud.com/jenkins#g&quot;</span> /var/lib/jenkins/updates/default.json</span><br></pre></td></tr></table></figure><h2 id="四、jenkins基础配置"><a href="#四、jenkins基础配置" class="headerlink" title="四、jenkins基础配置"></a>四、jenkins基础配置</h2><h3 id="1、邮件配置"><a href="#1、邮件配置" class="headerlink" title="1、邮件配置"></a>1、邮件配置</h3><p>**目的：**部署有问题时，可以邮件通知运维</p><h4 id="1、配置邮箱-（SSL-TLS协议勾上）"><a href="#1、配置邮箱-（SSL-TLS协议勾上）" class="headerlink" title="1、配置邮箱 （SSL&#x2F;TLS协议勾上）"></a>1、配置邮箱 （SSL&#x2F;TLS协议勾上）</h4><p><img src="/media/image9.png" alt="image.png"></p><p><img src="/media/image10.png" alt="image.png"></p><h4 id="邮箱测试"><a href="#邮箱测试" class="headerlink" title="邮箱测试"></a>邮箱测试</h4><p><img src="/media/image11.png" alt="image.png"></p><p>测试成功！</p><p><img src="/media/image12.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”1.8593613298337708in”}</p><p><strong>2、全局工具配置</strong></p><p><img src="/media/image13.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”3.0389074803149607in”}</p><p><strong>五、Jenkins安装插件的步骤（已安装[Loale为例：本地汉化]{.mark}）</strong></p><p>[1、Manage Jenkins → Manage Plugins →  Available → 搜索 Locale<br>（对应插件） → （对应插件是否有红色警告，没有则直接]{.mark}Download now<br>and install after restart ，否则需要选择版本下载[）]{.mark}</p><p>[2、点击插件 → Releases → checksums → 查找对应的版本 →<br>插件下载成功（locale.hpi）]{.mark}</p><p>[3、回到Jenkins →  Advanced → 找到 Deploy Plugin →<br>选择文件上传插件（点击Deploy）→ 安装成功之后重启 →]{.mark}<br><a href="http://localhost:8080/restart">http:&#x2F;&#x2F;你的jenkins地址&#x2F;restart</a><br>[（使插件生效）]{.mark}</p><p><img src="/media/image14.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”2.7683398950131233in”}</p><p><img src="/media/image15.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”2.124316491688539in”}</p><p><img src="/media/image16.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”2.692759186351706in”}</p><p><img src="/media/image17.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”2.347678258967629in”}</p><p>**注意：**如果下载页面没有红色的警告，点击 Download now and install<br>after restart 就会下载最新版本的插件，安装并重启</p><p>如果有类似：Warning: This plugin is built for Jenkins 2.426.2 or newer.<br>Jenkins will refuse to load this plugin if installed.<br>这样的提示，就表明当前插件的版本和你所下载的 Jenkins<br>的版本不兼容，很大概率会安装不成功，这个时候就需要去下载兼容该 Jenkins<br>版本的插件</p><p>[点击插件 → Releases → checksums → 查找对应的版本 →<br>插件下载成功（locale.hpi）]{.mark}</p><p><img src="/media/image18.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”2.2636122047244096in”}</p><p><img src="/media/image19.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”2.9511165791776026in”}</p><p><img src="/media/image20.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”3.026859142607174in”}</p><p><img src="/media/image21.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”2.1408114610673667in”}</p><p><img src="/media/image22.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”2.626022528433946in”}</p><p><img src="/media/image23.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”2.363248031496063in”}</p><p><img src="/media/image24.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”3.029773622047244in”}</p><p><strong>附：Jenkins默认目录及启停方式</strong></p><p>主配置文件：&#x2F;etc&#x2F;sysconfig&#x2F;jenkins #<br>JENKINS_PORT、JENKINS_HOME、JAVA_OPTS 等</p><p>工作目录（存储数据）：&#x2F;var&#x2F;lib&#x2F;jenkins&#x2F;<br>#包含核心配置文件、插件、构建记录、用户数据等。</p><p>​日志文件：&#x2F;var&#x2F;log&#x2F;jenkins&#x2F;jenkins.log （找不到）→ 查看日志：sudo<br>journalctl -u jenkins -f</p><p>服务管理命令：</p><p>sudo systemctl start jenkins</p><p>sudo systemctl stop jenkins</p><p>sudo systemctl restart jenkins​</p><p>sudo systemctl status jenkins</p><p>systemctl enable jenkins</p><p>sudo systemctl daemon-reload  # 加载配置文件</p>]]></content>
      
      
      <categories>
          
          <category> 学习类 </category>
          
          <category> CICD </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2、Gitlab部署（远程私有仓库）</title>
      <link href="/posts/992671829/"/>
      <url>/posts/992671829/</url>
      
        <content type="html"><![CDATA[<h1 id="持续集成-CI-主要就是git、gitlab"><a href="#持续集成-CI-主要就是git、gitlab" class="headerlink" title="持续集成(CI)主要就是git、gitlab"></a>持续集成(CI)主要就是git、gitlab</h1><h2 id="一、gitlab部署条件"><a href="#一、gitlab部署条件" class="headerlink" title="一、gitlab部署条件"></a>一、gitlab部署条件</h2><p>1、<strong>cpu</strong>：最低2C；官网2C支持100个用户（开发），4C支持500个用户；8C支持1000个用户….</p><p>2、<strong>内存</strong>：最低4G，8G支持100个用户，生产最好是8G以上（公司一般就是8C16G至少）</p><p>3、<strong>磁盘</strong>：磁盘要求比较高，因为gitlab是要用很久的</p><ul><li>磁盘够大：2T吧</li><li>IO够快：最好是SSD，没有就RAID10，至少4块盘</li></ul><p>4、<strong>网卡</strong>：越高传输越快，万兆10 Gigabit（10GbE）</p><h2 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h2><p>虚拟机的配置：2C4G20G，centos7</p><p>gitlab-ce版本下载路径：<a href="https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/">https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/</a><br>#gitlab-ce为社区版；gitlab-ee为企业版</p><h3 id="安装如下："><a href="#安装如下：" class="headerlink" title="安装如下："></a>安装如下：</h3><h4 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@131_69 ~]# yum localinstall -y gitlab-ce-14.9.5-ce.0.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><h4 id="2、修改配置文件"><a href="#2、修改配置文件" class="headerlink" title="2、修改配置文件"></a>2、修改配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/gitlab/gitlab.rb</span><br><span class="line"></span><br><span class="line">external_url <span class="string">&#x27;http://192.168.131.69&#x27;</span> <span class="comment"># 改为本机地址或对应域名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置SMTP服务器来发送通知邮件，对应加入这些配置</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_enable&#x27;</span>] = <span class="literal">true</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_address&#x27;</span>] = <span class="string">&quot;smtp.qq.com&quot;</span> <span class="comment"># 这个地方我用的是qq邮箱，如果用163或者公司邮箱，将qq改掉（smtp.163.com）</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_port&#x27;</span>] = 465 <span class="comment"># 一般就是465</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_user_name&#x27;</span>] = <span class="string">&quot;***@qq.com&quot;</span> <span class="comment"># 写账号名</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_password&#x27;</span>] = <span class="string">&quot;***&quot;</span> <span class="comment"># 这个地方不能直接写密码，要写授权码，qq授权码申请见备注</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_domain&#x27;</span>] = <span class="string">&quot;qq.com&quot;</span> <span class="comment"># 域名</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_authentication&#x27;</span>] = <span class="string">&quot;login&quot;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_enable_starttls_auto&#x27;</span>] = <span class="literal">true</span> <span class="comment">#自动加密</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_tls&#x27;</span>] = <span class="literal">true</span> <span class="comment"># 启用加密连接</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;gitlab_email_from&#x27;</span>] = <span class="string">&#x27;***@qq.com&#x27;</span> <span class="comment"># 发件邮箱</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;gitlab_email_reply_to&#x27;</span>] = <span class="string">&#x27;***@qq.com&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="3、首次执行，需要重置应用配置-gitlab-ctl-–help-可查看具体用法，以下这些为常用命令-："><a href="#3、首次执行，需要重置应用配置-gitlab-ctl-–help-可查看具体用法，以下这些为常用命令-：" class="headerlink" title="3、首次执行，需要重置应用配置 ( gitlab-ctl –help 可查看具体用法，以下这些为常用命令)："></a>3、首次执行，需要重置应用配置 ( gitlab-ctl –help 可查看具体用法，以下这些为常用命令)：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@131_69 gitlab]# gitlab-ctl reconfigure <span class="comment"># 每次修改配置文件就要运行一下</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">gitlab Reconfigured!</span><br></pre></td></tr></table></figure><h4 id="4、查看gitlab状态（第8课12：43）："><a href="#4、查看gitlab状态（第8课12：43）：" class="headerlink" title="4、查看gitlab状态（第8课12：43）："></a>4、查看gitlab状态（第8课12：43）：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">[root@131_69 gitlab]# gitlab-ctl status</span><br><span class="line"></span><br><span class="line"><span class="comment">#用于处理prometheus的告警，通过邮件等方式发送告警通知</span></span><br><span class="line">run: alertmanager: (pid 3800) 92s; run: <span class="built_in">log</span>: (pid 3406) 194s</span><br><span class="line"></span><br><span class="line"><span class="comment">#gitlab的核心服务，git仓库的智能服务器</span></span><br><span class="line">run: gitaly: (pid 3822) 91s; run: <span class="built_in">log</span>: (pid 2870) 325s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于导出gitlab的指标数据，供给普罗米修斯收集，以监控Gitlab的运行状态</span></span><br><span class="line">run: gitlab-exporter: (pid 3774) 95s; run: <span class="built_in">log</span>: (pid 3349) 210s</span><br><span class="line"></span><br><span class="line"><span class="comment">#支持 GitLab 与 Kubernetes 集群的集成</span></span><br><span class="line">run: gitlab-kas: (pid 3741) 97s; run: <span class="built_in">log</span>: (pid 3131) 312s</span><br><span class="line"></span><br><span class="line"><span class="comment">#轻量级反向代理服务器，处理一些大文件的上传下载、长连接等，减轻主应用（Puma）的负担</span></span><br><span class="line">run: gitlab-workhorse: (pid 3753) 96s; run: <span class="built_in">log</span>: (pid 3248) 229s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 监控可视化平台</span></span><br><span class="line">run: grafana: (pid 3831) 91s; run: <span class="built_in">log</span>: (pid 3666) 131s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志文件轮转，避免日志文件过大</span></span><br><span class="line">run: logrotate: (pid 2793) 340s; run: <span class="built_in">log</span>: (pid 2802) 337s</span><br><span class="line"></span><br><span class="line"><span class="comment"># Web服务器，作为Gitlab的前端代理，处理Https请求，并将请求转发给gitlab-workhorse(反向代理)或puma（应用服务）</span></span><br><span class="line">run: nginx: (pid 3279) 225s; run: <span class="built_in">log</span>: (pid 3294) 222s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于收集主机系统的指标，以便普罗米修斯进行系统级监控</span></span><br><span class="line">run: node-exporter: (pid 3763) 96s; run: <span class="built_in">log</span>: (pid 3323) 218s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于收集PG数据库的指标，以便监控数据库状态</span></span><br><span class="line">run: postgres-exporter: (pid 3816) 91s; run: <span class="built_in">log</span>: (pid 3433) 186s</span><br><span class="line"></span><br><span class="line"><span class="comment"># Gitlab使用数据库，存储项目、用户、组等元数据</span></span><br><span class="line">run: postgresql: (pid 2989) 321s; run: <span class="built_in">log</span>: (pid 3003) 319s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 监控系统，用于收集和存储Gitlab各个组件的监控指标</span></span><br><span class="line">run: prometheus: (pid 3783) 94s; run: <span class="built_in">log</span>: (pid 3388) 198s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主应用服务器（Ruby应用服务器），处理Web请求和后台作业（puma只会创建后台作业，不会执行，后台任务由Sidekiq执行）</span></span><br><span class="line">run: puma: (pid 3188) 243s; run: <span class="built_in">log</span>: (pid 3199) 240s</span><br><span class="line"></span><br><span class="line"><span class="comment">#缓存数据库，用于会话存储和任务队列（用于sidekiq）</span></span><br><span class="line">run: redis: (pid 2823) 334s; run: <span class="built_in">log</span>: (pid 2832) 330s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 监控redis的指标，以便普罗米修斯监控Redis状态</span></span><br><span class="line">run: redis-exporter: (pid 3776) 94s; run: <span class="built_in">log</span>: (pid 3367) 204s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于处理后台作业（如：发送邮件、处理CI/CD任务等）的异步任务处理框架</span></span><br><span class="line">run: sidekiq: (pid 3206) 237s; run: <span class="built_in">log</span>: (pid 3222) 234s</span><br></pre></td></tr></table></figure><h3 id="备注：qq授权码"><a href="#备注：qq授权码" class="headerlink" title="备注：qq授权码"></a>备注：qq授权码</h3><p><img src="/media/image1.png" alt="image.png"></p><p><img src="/media/image2.png" alt="image.png"></p><p><img src="/media/image3.png" alt="image.png"></p><p>前往绑定，用手机发完短信之后，就会有授权码：***</p><h2 id="三、访问gitlab"><a href="#三、访问gitlab" class="headerlink" title="三、访问gitlab"></a>三、访问gitlab</h2><p>事先环境要配置好，防火墙和selinux要关掉</p><p>直接访问：<a href="http://192.168.131.69/%EF%BC%8C%E7%95%8C%E9%9D%A2%E5%A6%82%E4%B8%8B%EF%BC%9A">http://192.168.131.69/，界面如下：</a></p><p>默认账号是root，<br>密码存放于&#x2F;etc&#x2F;gitlab&#x2F;initial_root_password这个文件夹（24小时会自动清除）</p><p>**注：**我登录时，这个文件已经消失了，直接用命令指定root密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> gitlab-rake <span class="string">&quot;gitlab:password:reset[root]&quot;</span></span><br></pre></td></tr></table></figure><p>（这里我设定是***）</p><p><img src="/media/image4.png" alt="image.png"></p><p>一般gitlab都会关闭注册这个选项，一般不允许开发随便注册账号（记得sign-up才是注册，sign-in是登录，千万不要搞错了！！如果错改了登录限制，需要去数据库修改！）</p><p><img src="/media/image5.png" alt="image.png"></p><p><img src="/media/image6.png" alt="image.png"></p><h2 id="四、gitlab上的一些操作"><a href="#四、gitlab上的一些操作" class="headerlink" title="四、gitlab上的一些操作"></a>四、gitlab上的一些操作</h2><h3 id="1、点击Admin这个扳手可以看到有："><a href="#1、点击Admin这个扳手可以看到有：" class="headerlink" title="1、点击Admin这个扳手可以看到有："></a>1、点击Admin这个扳手可以看到有：</h3><ul><li><strong>服务（project）</strong>：开发自己可以建的</li><li><strong>Users</strong>：开发</li><li><strong>Groups</strong>：项目（一般一个项目有多个服务；本项目的开发一般就看不到其它项目的服务）</li></ul><p><img src="/media/image7.png" alt="image.png"></p><h3 id="2、给开发同事新建账号"><a href="#2、给开发同事新建账号" class="headerlink" title="2、给开发同事新建账号"></a>2、给开发同事新建账号</h3><p><img src="/media/image8.png" alt="image.png"></p><p><img src="/media/image9.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”1.7085411198600176in”}</p><p>3、给指定开发同事修改密码</p><p><img src="/media/image10.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”3.0344050743657043in”}</p><p><img src="/media/image11.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”3.045660542432196in”}</p><p><img src="/media/image12.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”3.0141458880139984in”}</p><p>4、此时，我们用自己建立的账号登录git</p><p>**注意：**一个浏览器只能登录一个git账号；比如谷歌已经登录root了（也就是Admin了），那你此时再用zhengwenyi这个账号去登录，还是只能看到Admin用户，你要重新切换一个浏览器登录普通用户才行。</p><p><img src="/media/image13.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”3.2437521872265966in”}</p><p><strong>五、gitlab授权项目组</strong></p><p>1、我们先自建一个像项目</p><p><img src="/media/image14.png" alt="QQ_1749556026009.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”3.043934820647419in”}</p><p><img src="/media/image15.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”3.0186472003499563in”}</p><p><img src="/media/image16.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”3.0344050743657043in”}</p><p>2、添加组内成员，我们先给zhengwenyi授权项目负责人级别</p><p><img src="/media/image17.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”3.0344050743657043in”}</p><p><img src="/media/image18.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”3.0650109361329836in”}</p><p>3、zhengwenyi就可以编辑project了（一个项目是有很多project的）</p><p><img src="/media/image19.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”2.933108048993876in”}</p><p>⭐ 留个问题！看看后面会不会用到</p><p><img src="/media/image20.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”3.4440944881889766in”}</p><p><strong>六、常用的gitlab信息</strong></p><p># gitlab安装目录：</p><p>&#x2F;etc&#x2F;gitlab # 配置文件目录</p><p>&#x2F;run&#x2F;gitlab # 运行文件目录</p><p>&#x2F;opt&#x2F;gitlab # 安装目录</p><p>&#x2F;var&#x2F;opt&#x2F;gitlab # 数据目录</p><p>&#x2F;var&#x2F;log&#x2F;gitlab # 日志目录</p><p># gitlab-ctl客户端命令</p><p>gitlab-ctl reconfigure # 修改gitlab之后都要运行这个命令</p><p>gitlab-ctl stop|start|restart|status # 服务启停状态</p><p>gitlab-ctl tail nginx # 查看某个组件的日志</p><p><strong>七、模拟日常操作</strong></p><p>前提：可以在本地windows下载一个git bash，可以直接实现linux操作</p><p>我们在远程仓库下建一个文件，方便后续模拟</p><p><img src="/media/image21.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”3.0006397637795277in”}</p><p>我们新建一个index.html文件，默认会在master下</p><p>&lt;html&gt;</p><p>    &lt;head&gt;</p><p>        &lt;title&gt;第一个html程序&lt;&#x2F;title&gt;</p><p>    &lt;&#x2F;head&gt;</p><p>    &lt;body&gt;</p><p>        hello world!</p><p>    &lt;&#x2F;body&gt;</p><p>&lt;&#x2F;html&gt;</p><p><img src="/media/image22.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”3.04576334208224in”}</p><p><strong>1、将gitlab的代码克隆一份到本地</strong></p><p>git clone <a href="http://192.168.131.69/xingyun-system/devops.git">http://192.168.131.69/xingyun-system/devops.git</a></p><p><img src="/media/image23.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”3.1033311461067368in”}</p><p>第一次克隆，会让你输入账号密码zhengwenyi&#x2F;zhengwenyi，后续就不会了（windows有本地账密的托管功能）</p><p><img src="/media/image24.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”2.911130796150481in”}</p><p>此时可以看到已经克隆成功</p><p><img src="/media/image25.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”2.5115234033245843in”}</p><p><strong>2、开发修改代码的全过程</strong></p><p>1、进入devops这个目录：cd devops&#x2F;<br>（这个很重要！git的所有操作都要基于代码目录才能执行！）</p><p>2、修改你的代码：</p><p>vim index.html</p><p>&lt;html&gt;</p><p>&lt;head&gt;</p><p>&lt;title&gt;第一个html程序&lt;&#x2F;title&gt;</p><p>&lt;&#x2F;head&gt;</p><p>&lt;body&gt;</p><p>hello world!</p><p>hello world! version2 both !!</p><p>&lt;&#x2F;body&gt;</p><p>&lt;&#x2F;html&gt;</p><p>3、查看下当前状态：git status</p><p>.…</p><p>(use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</p><p>(use &quot;git restore &lt;file&gt;...&quot; to discard changes in working<br>directory)</p><p>modified: index.html</p><p>.…</p><p>4、我们可以看到当前还在工作区，我们将修改后的代码提交至暂存区</p><p>git add .</p><p>git status</p><p>5、将代码提交至本地仓库（也就是本地，非远程仓库gitlab）</p><p>$ git commit -m &quot;v2版本诞生啦！&quot;</p><p>[main d5ea803] v2版本诞生啦！</p><p>1 file changed, 1 insertion(+)</p><p>$ git status # 此时它提示，可以将代码提交至远程仓库了！</p><p>On branch main</p><p>Your branch is ahead of &#39;origin&#x2F;main&#39; by 1 commit.</p><p>(use &quot;git push&quot; to publish your local commits)</p><p>nothing to commit, working tree clean</p><p><strong>3、提交（推送push）代码到远程仓库gitlab</strong></p><p>$ git push # 最终都提交至gitlab的命令</p><p>Enumerating objects: 5, done.</p><p>Counting objects: 100% (5&#x2F;5), done.</p><p>Delta compression using up to 22 threads</p><p>Compressing objects: 100% (3&#x2F;3), done.</p><p>Writing objects: 100% (3&#x2F;3), 378 bytes | 378.00 KiB&#x2F;s, done.</p><p>Total 3 (delta 1), reused 0 (delta 0), pack-reused 0 (from 0)</p><p>To <a href="http://192.168.131.69/xingyun-system/devops.git">http://192.168.131.69/xingyun-system/devops.git</a></p><p>cd79a46..d5ea803 main -&gt; main</p><p>此时在gitlab上可以看到，我们的代码已经在gitlab上更新了</p><p><img src="/media/image26.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”3.041114391951006in”}</p><p><img src="/media/image27.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”2.696748687664042in”}</p><p><strong>4、将代码拉取到最新</strong></p><p>git pull</p><p>适用场景：开发<strong>每天上班</strong>基本都会<strong>git pull</strong><br>一下，因为这样可以确保他们拉取到最新的代码</p><p>（<strong>git<br>push</strong>类比一下，就是每个开发<strong>每天下班</strong>前，都各自进行一次代码提交）</p><p><strong>八、常用的git命令</strong></p><p><strong>1、Linux使用git最好配置全局信息</strong></p><p>想用Linux进行git操作的话，最好配上全局信息，用于识别你是谁</p><p>[root@131_70 ~]# git config --global user.name &quot;Jane&quot; #配置姓名</p><p>[root@131_70 ~]# git config --global user.email<br>&quot;<a href="mailto:&#122;&#x68;&#x65;&#x6e;&#103;&#119;&#101;&#x6e;&#x79;&#x40;&#x67;&#122;&#x73;&#x65;&#110;&#x64;&#x69;&#46;&#99;&#110;">zhengweny@gzsendi.cn</a>&quot; #配置邮箱</p><p>[root@131_70 ~]# git config --global color.ui true #开启颜色识别</p><p><strong>2、.gitignore 文件的使用（隐藏文件）</strong></p><p>开发git<br>push代码到远程仓库gitlab时，有些文件是不想上传的，这时就可以创建一个.gitignore文件，将不需要上传的目录或文件写进去</p><p>场景：比如一些中间件的配置文件，本地用的是测试环境的中间件信息，生产环境有生产环境的配置文件信息，所以此时我们不需要将本地的中间件信息上传至gitlab</p><p>1、同样进入代码目录下，我们进行模拟，新建两个中间件配置文件：</p><p>cd &#x2F;c&#x2F;Users&#x2F;29404&#x2F;gitlab_learn&#x2F;devops</p><p>Mysql文件：vim my.cnf</p><p>[mysql]</p><p>Hostip&#x3D;192.168.131.69</p><p>Redis文件：vim redis.conf</p><p>Redis_ip&#x3D;192.168.131.69</p><p>2、我们创建一个.gitignore文件，将redis.conf写入</p><p>vim .gitignore</p><p>redis.conf # 直接将不想上传的文件写入即可</p><p>3、git status查看下，目前修改的所有文件都还在工作区</p><p>.…</p><p>Untracked files:</p><p>(use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</p><p>.gitignore</p><p>my.cnf</p><p>mysql.cnf</p><p>...</p><p>4、放入暂存区并提交</p><p>$ git add . # 加入暂存区</p><p>warning: in the working copy of &#39;.gitignore&#39;, LF will be replaced by<br>CRLF the next time Git touches it</p><p>warning: in the working copy of &#39;my.cnf&#39;, LF will be replaced by CRLF<br>the next time Git touches it</p><p>warning: in the working copy of &#39;mysql.cnf&#39;, LF will be replaced by<br>CRLF the next time Git touches it</p><p>$ git commit -m &quot;gitignore_test&quot; # 提交</p><p>[main 842c5a5] gitignore_test</p><p>3 files changed, 5 insertions(+)</p><p>create mode 100644 .gitignore</p><p>create mode 100644 my.cnf</p><p>git push 推送至gitlab展示如下（redis.conf就不会被单独推送）：</p><p><img src="/media/image28.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”2.748522528433946in”}</p><p><strong>3、git重要命令</strong></p><p><img src="/media/image29.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”3.573475503062117in”}</p><p><strong>九、Gitlab实现分支管理</strong></p><p>常见的是生产&#x2F;开发模型：master分支与develop分支</p><p><img src="/media/image30.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”2.6666119860017496in”}</p><p><strong>十、分支创建</strong></p><p>一般是生产&#x2F;开发模型：master分支与develop分支</p><p>我们创建develop分支，基于master创建（即main主分支），也就是会从master复制一份到develop分支</p><p><img src="/media/image31.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”2.0326268591426073in”}</p><p>创建develop开发分支如下：</p><p><img src="/media/image32.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”3.2640113735783025in”}</p><p><img src="/media/image33.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”2.7822878390201224in”}</p><p><strong>十一、分支合并</strong></p><p>两种方法：web界面合并&#x2F;命令合并</p><p>1、先创建一个开发账号模拟该场景（zhengwenyi是管理员账号）：Jane&#x2F;12345678<br>（超级管理员Admin创建）</p><p>2、由管理者zhengwenyi邀请Jane进入该项目（以普通开发的权限进入）</p><p><img src="/media/image34.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”3.0614173228346457in”}</p><p><img src="/media/image35.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”2.4468832020997375in”}</p><p><strong>Web分支合并及命令合并模拟</strong></p><p>1、Jane开发指定将develop分支下的代码拉取下来进行开发</p><p>⭐ 指定对应分支代码拉取 git clone -b develop gitlab地址</p><p>[root@131_69 ~]# git config --global user.name Jane</p><p>[root@131_69 ~]# git config --global user.email<br>&quot;<a href="mailto:&#x5a;&#104;&#x65;&#110;&#x67;&#119;&#101;&#x6e;&#x79;&#x32;&#x40;&#x32;&#x39;&#x32;&#x35;&#46;&#99;&#111;&#109;">Zhengweny2@2925.com</a>&quot;</p><p>[root@131_69 ~]# git clone -b develop<br><a href="http://192.168.131.69/xingyun-system/devops.git">http://192.168.131.69/xingyun-system/devops.git</a></p><p>Cloning into &#39;devops&#39;...</p><p>Username for &#39;<a href="http://192.168.131.69/">http://192.168.131.69\</a>‘: Jane</p><p>Password for &#39;<a href="http://Jane@192.168.131.69/">http://Jane@192.168.131.69\</a>‘:</p><p>remote: Enumerating objects: 16, done.</p><p>remote: Counting objects: 100% (16&#x2F;16), done.</p><p>remote: Compressing objects: 100% (12&#x2F;12), done.</p><p>remote: Total 16 (delta 2), reused 0 (delta 0), pack-reused 0</p><p>Unpacking objects: 100% (16&#x2F;16), done.</p><p>[root@131_69 ~]# cd devops&#x2F;</p><p>[root@131_69 devops]# git add .</p><p>[root@131_69 devops]# git status</p><p>[root@131_69 devops]# git commit -m &quot;v3版本&quot;</p><p>[root@131_69 devops]# git push # 推送至gitlab</p><p>.…</p><p>Username for &#39;<a href="http://192.168.131.69/">http://192.168.131.69\</a>‘: Jane</p><p>Password for &#39;<a href="http://Jane@192.168.131.69/">http://Jane@192.168.131.69\</a>‘:</p><p>Counting objects: 5, done.</p><p>Delta compression using up to 4 threads.</p><p>Compressing objects: 100% (3&#x2F;3), done.</p><p>Writing objects: 100% (3&#x2F;3), 318 bytes | 0 bytes&#x2F;s, done.</p><p>Total 3 (delta 2), reused 0 (delta 0)</p><p>remote:</p><p>remote: To create a merge request for develop, visit:</p><p>remote:<br><a href="http://192.168.131.69/xingyun-system/devops/-/merge_requests/new?merge_request%5Bsource_branch%5D=develop">http://192.168.131.69/xingyun-system/devops/-/merge_requests/new?merge_request%5Bsource_branch%5D=develop</a></p><p>remote:</p><p>To <a href="http://192.168.131.69/xingyun-system/devops.git">http://192.168.131.69/xingyun-system/devops.git</a></p><p>f24e8e7..6e57315 develop -&gt; develop</p><p>2、开发者Jane用页面进行合并（需发送邮件）</p><p>此时develop是v3版本，main分支还是v2版本</p><p><img src="/media/image36.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”2.7845395888013997in”}</p><p><img src="/media/image37.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”2.548180227471566in”}</p><p>此时普通开发Jane需要提交合并请求给项目管理者zhengwenyi</p><p><img src="/media/image38.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”3.189932195975503in”}</p><p>管理者zhengwenyi收到合并请求</p><p><img src="/media/image39.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”2.8723293963254592in”}</p><p><img src="/media/image40.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”3.2369991251093615in”}</p><p><img src="/media/image41.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”3.345049212598425in”}</p><p>现在我们看看主分支</p><p><img src="/media/image42.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”3.189932195975503in”}</p><p>3、直接用命令合并：git merge</p><p>注意要在有主分区下才能合并：git branch 即可看到当前有什么分支！</p><p><img src="/media/image43.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”2.176281714785652in”}</p><p>命令:</p><p>$ git merge origin&#x2F;develop</p><p>$ git push</p><p><img src="/media/image44.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”1.753170384951881in”}</p><p>此时主分区main和develop就是v4了</p><p><img src="/media/image45.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”3.182311898512686in”}</p><p>十二、gitlab汉化</p><p><img src="/media/image46.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”2.9646227034120733in”}</p><p><img src="/media/image47.png" alt="image.png">{width&#x3D;”5.760416666666667in”<br>height&#x3D;”3.132580927384077in”}</p>]]></content>
      
      
      <categories>
          
          <category> 学习类 </category>
          
          <category> CICD </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>1、Git学习——版本控制系统</title>
      <link href="/posts/511148807/"/>
      <url>/posts/511148807/</url>
      
        <content type="html"><![CDATA[<h1 id="版本控制系统：Git"><a href="#版本控制系统：Git" class="headerlink" title="版本控制系统：Git"></a>版本控制系统：Git</h1><h2 id="1、为什么需要git？"><a href="#1、为什么需要git？" class="headerlink" title="1、为什么需要git？"></a>1、为什么需要git？</h2><p>不管我们改了什么，都可以实现版本回退</p><h2 id="2、集中式版本控制系统：SVN服务器（相当于一个中央服务器）"><a href="#2、集中式版本控制系统：SVN服务器（相当于一个中央服务器）" class="headerlink" title="2、集中式版本控制系统：SVN服务器（相当于一个中央服务器）"></a>2、集中式版本控制系统：SVN服务器（相当于一个中央服务器）</h2><p>每个开发写完代码之后都提交到SVN，SVN就相当于每个开发共有的本地仓库，这就导致一个问题，如果SVN挂了，开发们都无法提交</p><h2 id="3、分布式版本控制系统（没有中央服务器之说）"><a href="#3、分布式版本控制系统（没有中央服务器之说）" class="headerlink" title="3、分布式版本控制系统（没有中央服务器之说）"></a>3、分布式版本控制系统（没有中央服务器之说）</h2><p>每个开发本地都有自己的代码仓库，后续再用git命令同步到git服务器&#x2F;github代码仓库</p><h2 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y git</span><br></pre></td></tr></table></figure><h2 id="修改环境变量，定制git的环境（3个重要参数）"><a href="#修改环境变量，定制git的环境（3个重要参数）" class="headerlink" title="修改环境变量，定制git的环境（3个重要参数）"></a>修改环境变量，定制git的环境（3个重要参数）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git config --global ×××.×××</span><br><span class="line"><span class="comment">#全局，只针对当前登录用户生效，git配置写入~/.gitonfig （用得最多）</span></span><br><span class="line"></span><br><span class="line">git config --system ×××.×××</span><br><span class="line"><span class="comment">#对所有登录linux系统的用户都生效，写入到/etc/gitconfig</span></span><br><span class="line"></span><br><span class="line">git config --<span class="built_in">local</span> ×××.×××</span><br><span class="line"><span class="comment">#本地，只针对某一个文件/文件夹生效。（例如/data/databases/文件，则配置位于/data/databases/.git/config</span></span><br></pre></td></tr></table></figure><ul><li><code>--global</code> 全局：只针对当前登录用户生效，git配置写入 <code>~/gitconfig</code></li></ul><h2 id="用户Git信息配置（部分命令）"><a href="#用户Git信息配置（部分命令）" class="headerlink" title="用户Git信息配置（部分命令）"></a>用户Git信息配置（部分命令）</h2><p>想使用git，必须先配置git信息</p><p>git分布式版本控制</p><p>每个人在自己的本地，都可以对代码版本进行管理</p><p>提交v1版本：….提交人姓名….提交人邮箱…提交时间</p><p>提交v2版本：….Jane…Jane邮箱…</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global ...</span><br></pre></td></tr></table></figure><h3 id="1、全局配置命令："><a href="#1、全局配置命令：" class="headerlink" title="1、全局配置命令："></a>1、全局配置命令：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@131_70 ~]# git config --global user.name <span class="string">&quot;Jane&quot;</span> <span class="comment">#配置姓名</span></span><br><span class="line"></span><br><span class="line">[root@131_70 ~]# git config --global user.email <span class="string">&quot;zhengweny@gzsendi.cn&quot;</span> <span class="comment">#配置邮箱</span></span><br><span class="line"></span><br><span class="line">[root@131_70 ~]# git config --global color.ui <span class="literal">true</span> <span class="comment">#开启颜色识别</span></span><br></pre></td></tr></table></figure><h3 id="全局用户信息查看"><a href="#全局用户信息查看" class="headerlink" title="全局用户信息查看"></a>全局用户信息查看</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@131_70 ~]# <span class="built_in">cat</span> .gitconfig</span><br><span class="line"></span><br><span class="line">[user]</span><br><span class="line">name = Jane</span><br><span class="line">email = zhengweny@gzsendi.cn</span><br><span class="line"></span><br><span class="line">[color]</span><br><span class="line">ui = <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="2、系统所有linux用户的通用配置，检查-etc-gitconfig"><a href="#2、系统所有linux用户的通用配置，检查-etc-gitconfig" class="headerlink" title="2、系统所有linux用户的通用配置，检查&#x2F;etc&#x2F;gitconfig"></a>2、系统所有linux用户的通用配置，检查&#x2F;etc&#x2F;gitconfig</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@131_70 ~]# git config --system user.name <span class="string">&quot;Jane Zheng&quot;</span></span><br><span class="line"></span><br><span class="line">[root@131_70 ~]# git config --system uer.email <span class="string">&quot;***@qq.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查</span></span><br><span class="line">[root@131_70 ~]# <span class="built_in">cat</span> /etc/gitconfig</span><br><span class="line"></span><br><span class="line">[user]</span><br><span class="line">name = Jane Zheng</span><br><span class="line"></span><br><span class="line">[uer]</span><br><span class="line">email = ***@qq.com</span><br><span class="line"></span><br><span class="line"><span class="comment">#列表检查</span></span><br><span class="line">[root@131_70 ~]# git config --system --list</span><br><span class="line">user.name=Jane Zheng</span><br><span class="line">uer.email=***@qq.com</span><br></pre></td></tr></table></figure><p><img src="/media/image1.png" alt="image.png"></p><h2 id="重要：Git的核心原理-→-4个区域"><a href="#重要：Git的核心原理-→-4个区域" class="headerlink" title="重要：Git的核心原理 → 4个区域"></a>重要：Git的核心原理 → 4个区域</h2><p>git命令就是用于将文件改动切换到不同空间来记录（4个仓库可按顺序进行来回切换）</p><p>工作区 → 暂存区 → 本地git仓库 → （协调开发）推送到远程代码仓库，github&#x2F;gitlab</p><p><img src="/media/image2.png" alt="image.png"></p><h2 id="Git如何用的三个场景"><a href="#Git如何用的三个场景" class="headerlink" title="Git如何用的三个场景"></a>Git如何用的三个场景</h2><p>⭐当一个文件夹中出现”.git”时，就表明这是一个git仓库，并且被git所管理了，且能执行各种git命令行</p><h3 id="场景一（运维常用）"><a href="#场景一（运维常用）" class="headerlink" title="场景一（运维常用）:"></a>场景一（运维常用）:</h3><p>本地已经有一个代码，需要用git管理<br>(程序员已经把开发好的程序发给了运维，运维要针对这个目录进行git初始化管理)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@131_70 project]# <span class="built_in">ls</span> /data/project <span class="comment">#这是开发的程序</span></span><br><span class="line"></span><br><span class="line">[root@131_70 project]# <span class="built_in">cd</span> /data/project &amp;&amp; git init</span><br><span class="line"><span class="comment">#进入这个开发给的程序，运维进行git初始化</span></span><br><span class="line"></span><br><span class="line">[root@131_70 project]# ll -a <span class="comment">#</span></span><br><span class="line">初始化之后，隐藏目录下有.git就说明这是一个git仓库了</span><br><span class="line"></span><br><span class="line">total 4</span><br><span class="line">drwxr-xr-x 3 root root 34 May 24 04:52 .</span><br><span class="line">drwxr-xr-x. 4 admin admin 41 May 24 04:50 ..</span><br><span class="line">drwxr-xr-x 7 root root 119 May 24 04:52 .git</span><br><span class="line">-rw-r--r-- 1 root root 14 May 24 04:52 hello.sh</span><br></pre></td></tr></table></figure><h3 id="场景二（开发常用）："><a href="#场景二（开发常用）：" class="headerlink" title="场景二（开发常用）："></a>场景二（开发常用）：</h3><p>本地没有代码，要新建一个git版本仓库<br>（程序员一般开始写代码，从开始就会先用git进行版本管理）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@131_70 data]# <span class="built_in">mkdir</span> my_code</span><br><span class="line"></span><br><span class="line">[root@131_70 data]# <span class="built_in">cd</span> my_code/ &amp;&amp; git init <span class="comment"># 只要执行git init就表示git初始化开始，该目录已经被git管理了，以后有任何代码变动，都会被git管理、记录</span></span><br></pre></td></tr></table></figure><h3 id="场景三（运维常用）："><a href="#场景三（运维常用）：" class="headerlink" title="场景三（运维常用）："></a>场景三（运维常用）：</h3><p>本地没有代码，也没有git版本仓库，去github代码托管平台下载一个git版本代码库</p><p><strong>git clone <a href="https://github.com/xxx/xxx">https://github.com/xxx/xxx</a> # git clone命令会去github平台，下载一个已经被git管理的代码仓库了</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@131_70 data]# git <span class="built_in">clone</span> https://github.com/Zhengweny/Zhengweny.github.io.git</span><br><span class="line"></span><br><span class="line">[root@131_70 data]# <span class="built_in">ls</span></span><br><span class="line">hadoop-2.7.3 my_code project Zhengweny.github.io</span><br><span class="line"></span><br><span class="line">[root@131_70 Zhengweny.github.io]# ll <span class="comment"># 就把代码库拉下来了</span></span><br><span class="line">total 52</span><br><span class="line">-rw-r--r-- 1 root root 17213 May 24 05:09 404.html</span><br><span class="line">drwxr-xr-x 2 root root 24 May 24 05:09 about</span><br><span class="line">drwxr-xr-x 3 root root 36 May 24 05:09 archives</span><br><span class="line">drwxr-xr-x 3 root root 38 May 24 05:09 categories</span><br><span class="line">drwxr-xr-x 2 root root 24 May 24 05:09 charts</span><br><span class="line">drwxr-xr-x 2 root root 38 May 24 05:09 css</span><br><span class="line">drwxr-xr-x 4 root root 55 May 24 05:09 images</span><br><span class="line">drwxr-xr-x 2 root root 110 May 24 05:09 img</span><br><span class="line">-rw-r--r-- 1 root root 23523 May 24 05:09 index.html</span><br><span class="line">drwxr-xr-x 3 root root 67 May 24 05:09 js</span><br><span class="line">drwxr-xr-x 3 root root 22 May 24 05:09 posts</span><br><span class="line">-rw-r--r-- 1 root root 4318 May 24 05:09 search.xml</span><br><span class="line">drwxr-xr-x 4 root root 48 May 24 05:09 tags</span><br></pre></td></tr></table></figure><p><img src="/media/image3.png" alt="image.png"></p><h2 id="重要：Git提交的流程——Git生命周期"><a href="#重要：Git提交的流程——Git生命周期" class="headerlink" title="重要：Git提交的流程——Git生命周期"></a>重要：Git提交的流程——Git生命周期</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@131_70 .git]# <span class="built_in">pwd</span></span><br><span class="line">/data/my_code/.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># /data/my_code/ 是工作目录</span></span><br><span class="line"><span class="comment"># .git是本地仓库</span></span><br></pre></td></tr></table></figure><h2 id="工作目录、暂存区、本地仓库分别对应的地方"><a href="#工作目录、暂存区、本地仓库分别对应的地方" class="headerlink" title="工作目录、暂存区、本地仓库分别对应的地方"></a>工作目录、暂存区、本地仓库分别对应的地方</h2><p><img src="/media/image4.png" alt="image.png"></p><p><img src="/media/image5.png" alt="image.png"></p><p>1、文件夹中有&quot;.git&quot;这个隐藏文件夹，就是git的本地仓库了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@131_70 data]# <span class="built_in">cd</span> /data/my_code/</span><br><span class="line"></span><br><span class="line">[root@131_70 my_code]# ll -a</span><br><span class="line"></span><br><span class="line">total 4</span><br><span class="line"></span><br><span class="line">drwxr-xr-x 3 root root 34 May 24 05:02 .</span><br><span class="line"></span><br><span class="line">drwxr-xr-x. 6 admin admin 83 May 24 05:09 ..</span><br><span class="line"></span><br><span class="line">drwxr-xr-x 7 root root 119 May 24 04:59 .git</span><br><span class="line"></span><br><span class="line">-rw-r--r-- 1 root root 11 May 24 05:02 hello.sh</span><br></pre></td></tr></table></figure><p>2、查看工作区的信息（查看文件的变动状态：未跟踪，已跟踪）</p><p>**核心命令：**git status，请经常使用这个命令，掌握git工作区的状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@131_70 my_code]# git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># On branch master</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Initial commit</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Untracked files:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span></span><br><span class="line"><span class="comment"># 这个文件是否要添加到暂存区</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># hello.sh</span></span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use <span class="string">&quot;git add&quot;</span> to</span><br><span class="line">track)</span><br></pre></td></tr></table></figure><p>3、确认要将文件添加到暂存区：git add ×××</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">[root@131_70 my_code]# <span class="built_in">ls</span></span><br><span class="line"></span><br><span class="line">hello.sh</span><br><span class="line"></span><br><span class="line">[root@131_70 my_code]# git add . <span class="comment"># 将项目中变动的hello.sh添加到暂存区</span></span><br><span class="line"></span><br><span class="line">[root@131_70 my_code]# git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># On branch master</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Initial commit</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Changes to be committed: # git 会提示你是否要提交到本地仓库</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage) #</span></span><br><span class="line">当你要在缓存区删除这个文件，可用这个命令</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># new file: hello.sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">4、提交内容至本地仓库：git commit -m <span class="string">&quot;提交注释信息&quot;</span></span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">git commit -m <span class="string">&quot;提交注释信息&quot;</span></span><br><span class="line"></span><br><span class="line">[root@131_70 my_code]# git commit -m <span class="string">&quot;Jane first commit&quot;</span></span><br><span class="line"></span><br><span class="line">[master (root-commit) dc4186f] Jane first commit</span><br><span class="line"></span><br><span class="line">1 file changed, 1 insertion(+)</span><br><span class="line"></span><br><span class="line">create mode 100644 hello.sh</span><br><span class="line"></span><br><span class="line">[root@131_70 my_code]# git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># On branch master</span></span><br><span class="line"></span><br><span class="line">nothing to commit, working directory clean <span class="comment">#</span></span><br><span class="line">说明目前没有什么需要提交至本地仓库的</span><br></pre></td></tr></table></figure><p><strong>Git各种操作</strong></p><p><img src="/media/image6.png" alt="image.png"></p><p><strong>1、git给文件重命名（这是一个坑）</strong></p><p>这里记住一个容易混淆的命令：git checkout有两个用法</p><p>1）切换分支：git checkout 分支名</p><p>2）恢复文件（恢复被放在暂存区被删除的文件）：git checkout 文件名</p><p>场景如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@131_70 mv_test]# <span class="built_in">ls</span> <span class="comment"># 这是目前工作区和暂存区的文档</span></span><br><span class="line"></span><br><span class="line">v1test.txt</span><br><span class="line"></span><br><span class="line">[root@131_70 mv_test]# <span class="built_in">mv</span> v1test.txt v1.txt <span class="comment">#</span></span><br><span class="line">我直接给它像往常操作一样重命名</span><br><span class="line"></span><br><span class="line">此时git status看到这个<span class="built_in">mv</span>操作在git中相当于做了两个步骤</span><br><span class="line"></span><br><span class="line">步骤一：deleted: v1test.txt <span class="comment"># 删除了源文件</span></span><br><span class="line"></span><br><span class="line">步骤二： 创建一个新文件 v1.txt</span><br><span class="line"></span><br><span class="line">此时我们发现不应该这样重命名，我们如何恢复至原状？</span><br><span class="line"></span><br><span class="line">1、删除这个新文件：<span class="built_in">rm</span> -r v1.txt</span><br><span class="line"></span><br><span class="line">2、恢复当时暂存区的旧文件v1test.txt：git checkout v1test.txt</span><br><span class="line"></span><br><span class="line">3、git status 发现恢复如初</span><br><span class="line"></span><br><span class="line">git 重命名正确操作（原linux操作<span class="built_in">mv</span>前面记得加git就是了）</span><br><span class="line"></span><br><span class="line">git <span class="built_in">mv</span> v1test.txt v1.txt</span><br></pre></td></tr></table></figure><p><strong>2、git版本回退</strong></p><p>1、查看存档信息：</p><p>1）存档：git commit -m “解释用途”</p><p>2）查看档案：</p><p>① git log ;</p><p>② git log –oneline； # 信息显示在一行</p><p>③ git log -2 或者 git log –oneline -2 #<br>生产环境有很多log，所以一般都会指定条数输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line">[root@131_70 gitstash_test]# git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line">commit 2a433e003c4da09fb6a3510d9f1febc5dc93b7bd</span><br><span class="line"></span><br><span class="line">Merge: 92f74fe 2c25cc8</span><br><span class="line"></span><br><span class="line">Author: Jane &lt;zhengweny@gzsendi.cn&gt;</span><br><span class="line"></span><br><span class="line">Date: Tue Jun 3 08:54:14 2025 -0400</span><br><span class="line"></span><br><span class="line">合并冲突后的最终版</span><br><span class="line"></span><br><span class="line">commit 92f74fe30c84a421aa815680cbbcc18e52e71d74</span><br><span class="line"></span><br><span class="line">Author: Jane &lt;zhengweny@gzsendi.cn&gt;</span><br><span class="line"></span><br><span class="line">Date: Tue Jun 3 08:41:20 2025 -0400</span><br><span class="line"></span><br><span class="line">第一版测试</span><br><span class="line"></span><br><span class="line">commit 2c25cc8cdcd1c3b64d3e333f8351b5ee1064d6a8</span><br><span class="line"></span><br><span class="line">Author: Jane &lt;zhengweny@gzsendi.cn&gt;</span><br><span class="line"></span><br><span class="line">Date: Tue Jun 3 08:40:41 2025 -0400</span><br><span class="line"></span><br><span class="line">提交一个xixi.sh文件做测试</span><br><span class="line"></span><br><span class="line">commit 907643dae02cbddceef9076f2529884834724f2a</span><br><span class="line"></span><br><span class="line">Author: Jane &lt;zhengweny@gzsendi.cn&gt;</span><br><span class="line"></span><br><span class="line">Date: Tue Jun 3 08:37:00 2025 -0400</span><br><span class="line"></span><br><span class="line">提交版本2的文件</span><br><span class="line"></span><br><span class="line">commit 25799a001afe82058e6b432bb2d2972e29fa0362</span><br><span class="line"></span><br><span class="line">Author: Jane &lt;zhengweny@gzsendi.cn&gt;</span><br><span class="line"></span><br><span class="line">Date: Sun Jun 1 05:37:00 2025 -0400</span><br><span class="line"></span><br><span class="line">修复了v2.txt的bug</span><br><span class="line"></span><br><span class="line">commit 07676500d2db27e5361ade0da38edb4a95ae03b8</span><br><span class="line"></span><br><span class="line">Author: Jane &lt;zhengweny@gzsendi.cn&gt;</span><br><span class="line"></span><br><span class="line">Date: Sun Jun 1 05:11:38 2025 -0400</span><br><span class="line"></span><br><span class="line">首次提交代码</span><br><span class="line"></span><br><span class="line">==============================================================================================</span><br><span class="line"></span><br><span class="line">[root@131_70 gitstash_test]# git <span class="built_in">log</span> --oneline</span><br><span class="line"></span><br><span class="line">2a433e0 合并冲突后的最终版</span><br><span class="line"></span><br><span class="line">92f74fe 第一版测试</span><br><span class="line"></span><br><span class="line">2c25cc8 提交一个xixi.sh文件做测试</span><br><span class="line"></span><br><span class="line">907643d 提交版本2的文件</span><br><span class="line"></span><br><span class="line">25799a0 修复了v2.txt的bug</span><br><span class="line"></span><br><span class="line">0767650 首次提交代码</span><br><span class="line"></span><br><span class="line">==============================================================================================</span><br><span class="line"></span><br><span class="line">[root@131_70 gitstash_test]# git <span class="built_in">log</span> --oneline -2</span><br><span class="line"></span><br><span class="line">2a433e0 合并冲突后的最终版</span><br><span class="line"></span><br><span class="line">92f74fe 第一版测试</span><br><span class="line"></span><br><span class="line">**3、git 历史回退**</span><br><span class="line"></span><br><span class="line">git 版本管理，是通过指针管理的，这个指针名字叫做HEAD</span><br><span class="line"></span><br><span class="line"><span class="comment"># HEAD 表示当前版本</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># HEAD^ 表示上一个版本</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># HEAD^^ 表示上上个版本</span></span><br><span class="line"></span><br><span class="line">⭐版本回退命令：</span><br><span class="line"></span><br><span class="line">用法一：git reset --hard 版本<span class="built_in">id</span>号</span><br><span class="line"></span><br><span class="line">用法二：</span><br><span class="line"></span><br><span class="line">git reset --hard HEAD^ <span class="comment">#回退到上一个版本</span></span><br><span class="line"></span><br><span class="line">git reset --hard HEAD^^ <span class="comment">#回退到上上个版本</span></span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">[root@131_70 git_life]# <span class="built_in">cat</span> git_all.txt <span class="comment">#</span></span><br><span class="line">我们要回退前，先看下这个文件的信息</span><br><span class="line"></span><br><span class="line">learn git now</span><br><span class="line"></span><br><span class="line">modify git_all.txt</span><br><span class="line"></span><br><span class="line">[root@131_70 git_life]# git <span class="built_in">log</span> --oneline</span><br><span class="line"></span><br><span class="line">996d6bc 修改了第一个版本</span><br><span class="line"></span><br><span class="line">eb29f87 提交gitx学习的第一个版本</span><br><span class="line"></span><br><span class="line">[root@131_70 git_life]# git reset --hard eb29f87 <span class="comment">#</span></span><br><span class="line">我们回退至最初的版本</span><br><span class="line"></span><br><span class="line">HEAD is now at eb29f87 提交gitx学习的第一个版本</span><br><span class="line"></span><br><span class="line">[root@131_70 git_life]# <span class="built_in">cat</span> git_all.txt <span class="comment">#</span></span><br><span class="line">此时就是文件最原始的模样了，说明我们回退成功了</span><br><span class="line"></span><br><span class="line">learn git now</span><br><span class="line"></span><br><span class="line">⭐查看版本所有的变动信息</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">此时我们看日志，发现只能看到当前的日志信息了，之前的日志都看不到了，但是我现在发现回退错版本了，我想回去，我得怎么办？</span><br><span class="line"></span><br><span class="line">命令：git reflog</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">[root@131_70 git_life]# git <span class="built_in">log</span> --oneline <span class="comment"># 发现只能看到现有的日志了</span></span><br><span class="line"></span><br><span class="line">eb29f87 提交gitx学习的第一个版本</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们现在查看所有版本变动的记录：</span></span><br><span class="line"></span><br><span class="line">[root@131_70 git_life]# git reflog</span><br><span class="line"></span><br><span class="line">eb29f87 HEAD@&#123;0&#125;: reset: moving to eb29f87</span><br><span class="line"></span><br><span class="line">996d6bc HEAD@&#123;1&#125;: commit: 修改了第一个版本 <span class="comment"># 我们重新回到这里</span></span><br><span class="line"></span><br><span class="line">eb29f87 HEAD@&#123;2&#125;: commit (initial): 提交gitx学习的第一个版本</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时我们再进行版本重置，回到未进行reset的之前的版本：</span></span><br><span class="line"></span><br><span class="line">[root@131_70 git_life]# git reset --hard 996d6bc</span><br><span class="line"></span><br><span class="line">HEAD is now at 996d6bc 修改了第一个版本</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看文件内容，确认已经回去最新的版本了</span></span><br><span class="line"></span><br><span class="line">[root@131_70 git_life]# <span class="built_in">cat</span> git_all.txt</span><br><span class="line"></span><br><span class="line">learn git now</span><br><span class="line"></span><br><span class="line">modify git_all.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时日志也回去了</span></span><br><span class="line"></span><br><span class="line">[root@131_70 git_life]# git <span class="built_in">log</span> --oneline</span><br><span class="line"></span><br><span class="line">996d6bc 修改了第一个版本</span><br><span class="line"></span><br><span class="line">eb29f87 提交gitx学习的第一个版本</span><br><span class="line"></span><br><span class="line">**4、⭐git生命周期全过程演示**</span><br><span class="line"></span><br><span class="line">1、创建一个git项目并初始化：</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">[root@131_70 zhengwenyi_git_test]# <span class="built_in">mkdir</span> git_life</span><br><span class="line"></span><br><span class="line">[root@131_70 zhengwenyi_git_test]# git init git_life</span><br></pre></td></tr></table></figure><p>2、在项目下添加一个文件，此时这个文件就在工作区：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@131_70 zhengwenyi_git_test]# <span class="built_in">cd</span> git_life/</span><br><span class="line"></span><br><span class="line">[root@131_70 git_life]# <span class="built_in">echo</span> <span class="string">&quot;learn git now&quot;</span> &gt;&gt; git_all.txt</span><br><span class="line"></span><br><span class="line">[root@131_70 git_life]# git status</span><br><span class="line"></span><br><span class="line">....</span><br><span class="line"></span><br><span class="line"><span class="comment"># (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># git_all.txt</span></span><br><span class="line"></span><br><span class="line">....</span><br><span class="line"></span><br><span class="line">3、此时将工作区的文件加入暂存区</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">[root@131_70 git_life]# git add git_all.txt</span><br></pre></td></tr></table></figure><p>4、我们将文件提交至本地仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@131_70 git_life]# git commit -m <span class="string">&quot;提交gitx学习的第一个版本&quot;</span></span><br></pre></td></tr></table></figure><p>5、⭐转折 → 此时我们不小心更改了已经提交至本地仓库的git_all.txt内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">[root@131_70 git_life]# <span class="built_in">echo</span> <span class="string">&quot;modify git_all.txt&quot;</span> &gt;&gt; git_all.txt</span><br><span class="line"></span><br><span class="line">[root@131_70 git_life]# git status <span class="comment">#</span></span><br><span class="line">它其实提供了两个选择，我们先选择再次提交至暂存区</span><br><span class="line"></span><br><span class="line">....</span><br><span class="line"></span><br><span class="line"><span class="comment"># (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working</span></span><br><span class="line">directory)</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># modified: git_all.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">6、再次提交提交至暂存区和本地仓库</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">[root@131_70 git_life]# git add git_all.txt &amp;&amp; git commit -m <span class="string">&quot;修改了第一个版本&quot;</span></span><br><span class="line"></span><br><span class="line">[master 996d6bc] 修改了第一个版本</span><br><span class="line"></span><br><span class="line">7、我们查看本地存档信息</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">[root@131_70 git_life]# git <span class="built_in">log</span> --oneline</span><br><span class="line"></span><br><span class="line">996d6bc 修改了第一个版本</span><br><span class="line"></span><br><span class="line">eb29f87 提交gitx学习的第一个版本</span><br><span class="line"></span><br><span class="line">⭐8、我们从本地仓库中，删除对从某个文件的跟踪，也就是让文件从本地仓库回到工作区的命令：</span><br><span class="line"></span><br><span class="line">git <span class="built_in">rm</span> --cache 文件名</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">[root@131_70 git_life]# git <span class="built_in">rm</span> --cache git_all.txt</span><br><span class="line"></span><br><span class="line">[root@131_70 git_life]# git status</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line"></span><br><span class="line"><span class="comment"># (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># git_all.txt</span></span><br><span class="line"></span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line">⭐9、我们一般将文件回退到工作区之后，会有以下的操作动机：</span><br><span class="line"></span><br><span class="line">1）我不想要这个文件了，将文件打回工作区之后的目的是为了直接删除：<span class="built_in">rm</span> -r</span><br><span class="line">git_all.txt</span><br><span class="line"></span><br><span class="line">2\) 我搞错了，撤销刚刚git <span class="built_in">rm</span> --cache 文件，让它重新回到本地仓库：git</span><br><span class="line">reset HEAD <span class="comment"># 回退上一个操作</span></span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">[root@131_70 git_life]# git reset HEAD</span><br><span class="line"></span><br><span class="line">[root@131_70 git_life]# git status <span class="comment">#</span></span><br><span class="line">此时状态干干净净，就像啥也没发生一样</span><br><span class="line"></span><br><span class="line"><span class="comment"># On branch master</span></span><br><span class="line"></span><br><span class="line">nothing to commit, working directory clean</span><br><span class="line"></span><br><span class="line">3）单纯将这个文件撤回工作区，然后修改后，再次git</span><br><span class="line">add到暂存区【但是完全没必要，因为本来就可以随地大小改，然后再提交的，没必要撤回之后再提交】</span><br><span class="line"></span><br><span class="line">**Git stash 临时空间**</span><br><span class="line"></span><br><span class="line">1、定义：git stash用于暂存区未提交的内容，临时存放的区域，便于日后找回</span><br><span class="line"></span><br><span class="line">举个例子：假设你现在在开发功能：</span><br><span class="line"></span><br><span class="line">1、你开发的功能v1.txt、v2.txt 已经git commmit提交到了代码仓库</span><br><span class="line"></span><br><span class="line">2、你此时想完善v2.txt功能，但是你这个功能还没搞完，你已经下班了，此时还未完善好的v2.txt放在了git</span><br><span class="line">add的暂存区</span><br><span class="line"></span><br><span class="line">3、晚上你接到故障通知，说有bug，因此你不得不去修改最原先v2.txt的代码，那此时工作区的v2.txt你完善未完善好的代码怎么办呢？</span><br><span class="line"></span><br><span class="line">4、此时工作区的v2.txt就可以放到git stash</span><br><span class="line">中，然后继续修改原先v2.txt的bug，然后做进一步提交。</span><br><span class="line"></span><br><span class="line">2、场景模拟</span><br><span class="line"></span><br><span class="line">1、首先我们建立一个项目并git init初始化管理整个项目</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line"><span class="built_in">mkdir</span> -p /root/zhengwenyi_git_test/gitstash_test &amp;&amp; git init /root/zhengwenyi_git_test/gitstash_test</span><br></pre></td></tr></table></figure><p>2、模拟这个项目有两个功能：v1.txt、v2.txt并将代码添加至缓存区并提交</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br></pre></td><td class="code"><pre><span class="line">[root@131_70 gitstash_test]# <span class="built_in">echo</span> <span class="string">&quot;一个功能&quot;</span> &gt;&gt; v1.txt</span><br><span class="line"></span><br><span class="line">[root@131_70 gitstash_test]# <span class="built_in">echo</span> <span class="string">&quot;第二个功能&quot;</span> &gt;&gt; v2.txt</span><br><span class="line"></span><br><span class="line">[root@131_70 gitstash_test]# git add .</span><br><span class="line"></span><br><span class="line">[root@131_70 gitstash_test]# git commit -m <span class="string">&quot;首次提交代码&quot;</span></span><br><span class="line"></span><br><span class="line">[master (root-commit) 0767650] 首次提交代码</span><br><span class="line"></span><br><span class="line">2 files changed, 2 insertions(+)</span><br><span class="line"></span><br><span class="line">create mode 100644 v1.txt</span><br><span class="line"></span><br><span class="line">create mode 100644 v2.txt</span><br><span class="line"></span><br><span class="line">3、代码提交后，你还想把v2.txt的功能完善得更好，因此你进行了修改，接着你改到一半你就下班了，你暂时git</span><br><span class="line">add放到了暂存区</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">[root@131_70 gitstash_test]# <span class="built_in">echo</span> <span class="string">&quot;我想把v2.txt完善得更好&quot;</span> &gt;&gt;</span><br><span class="line">v2.txt</span><br><span class="line"></span><br><span class="line">[root@131_70 gitstash_test]# git add .</span><br><span class="line"></span><br><span class="line">[root@131_70 gitstash_test]# <span class="built_in">cat</span> v2.txt</span><br><span class="line"></span><br><span class="line">第二个功能</span><br><span class="line"></span><br><span class="line">我想把v2.txt完善得更好</span><br><span class="line"></span><br><span class="line">4、这天晚上有个紧急故障，你必须修改v2.txt的bug，但是你没有完善好的v2.txt你又不想把它给删了，得怎么办呢？此时就可以使用git</span><br><span class="line">stash放到临时空间</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">[root@131_70 gitstash_test]# git stash save <span class="string">&quot;保存正在完善中的v2.txt&quot;</span></span><br><span class="line"></span><br><span class="line">Saved working directory and index state On master:</span><br><span class="line">保存正在完善中的v2.txt</span><br><span class="line"></span><br><span class="line">HEAD is now at 0767650 首次提交代码</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时我们再次查看v2.txt的内容，已经是代码首次提交的内容了</span></span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">[root@131_70 gitstash_test]# <span class="built_in">cat</span> v2.txt <span class="comment">#再次查看v2.txt</span></span><br><span class="line"></span><br><span class="line">第二个功能</span><br><span class="line"></span><br><span class="line">5、我们修复完v2.txt中的bug后重新提交</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">[root@131_70 gitstash_test]# <span class="built_in">echo</span> <span class="string">&quot;我已经修复了bug&quot;</span> &gt;&gt; v2.txt</span><br><span class="line"></span><br><span class="line">[root@131_70 gitstash_test]# git add .</span><br><span class="line"></span><br><span class="line">[root@131_70 gitstash_test]# git commit -m <span class="string">&quot;修复了v2.txt的bug&quot;</span></span><br><span class="line"></span><br><span class="line">6、我们想要继续完善原先未完成的v2.txt的功能，需要怎么从git</span><br><span class="line">stash中取出呢？</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">[root@131_70 gitstash_test]# git stash list <span class="comment"># 查看stash保存列表及id</span></span><br><span class="line"></span><br><span class="line">stash@&#123;0&#125;: On master: 保存正在完善中的v2.txt</span><br><span class="line"></span><br><span class="line">[root@131_70 gitstash_test]# git stash pop <span class="comment">#</span></span><br><span class="line">恢复最新stash进度到工作区</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">[root@131_70 gitstash_test]# <span class="built_in">cat</span> v2.txt</span><br><span class="line"></span><br><span class="line">第二个功能</span><br><span class="line"></span><br><span class="line">&lt;&lt;&lt; <span class="string">Updated upstream # 第二次提交更新的内容</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">我已经修复了bug</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">=======</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">我想把v2.txt完善得更好</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt;&gt;&gt; Stashed changes # 放入stash中时未完善好的内容</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3、git stash的基础命令</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git statsh save &quot;注释&quot; #将工作区的进度保存至暂存区</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git stash list #查看stash保存的列表以及id</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git stash pop #恢复最新stash进度到工作区</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git stash pop stash_id #恢复指定的stash进度</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git stash drop stash_id #删除一个存储的stash进度</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git stash clear #清空所有存储的stash进度</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">**Git 分支实践**</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1、重要命令</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1、查看当前分支</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git branch</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">* master # 前面有个*号，表示当前所在的分支，此时就表示在master分支下</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2、创建一个&quot;名字&quot;分支，表示某成员可以使用这个分支，这个分支是属于自己独立空间的代码管理</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git branch &quot;×××&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3、切换分支</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git checkout &quot;分支名&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2、git 分支管理的实践流程</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 创建一个分支，叫zhengwenyi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git branch &quot;zhengwenyi&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">```bash</span></span><br><span class="line"><span class="string">[root@131_70 git_fenzhi]# git branch</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">* master</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">zhengwenyi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 切换到该分支下</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git checkout zhengwenyi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">```bash</span></span><br><span class="line"><span class="string">[root@131_70 git_fenzhi]# git checkout zhengwenyi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Switched to branch &#x27;zhengwenyi&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[root@131_70 git_fenzhi]# git branch</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">master</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">* zhengwenyi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 在zhengwenyi分支下创建文件，添加至暂存区以及提交到本地仓库</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">echo &quot;zhengwneyi的git分支学习&quot; &gt;&gt; zhengwenyi_git.txt</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git add .</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git commit -m &quot;zhengwenyi分支第一次提交&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 此时我们可以查看版本提交的信息：git log --oneline</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">```bash</span></span><br><span class="line"><span class="string">[root@131_70 git_fenzhi]# git log --oneline #</span></span><br><span class="line"><span class="string">分支能看到master提交的信息</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">43c9d49 第一次提交分支</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">f0ff623 master分支提交</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#</span></span><br><span class="line"><span class="string">切换到master下做对比,此时master下是没有zhengwenyi_git.txt这个文件的，提交记录也没有&quot;zhengwenyi分支第一次提交&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git branch master</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">```bash</span></span><br><span class="line"><span class="string">[root@131_70 git_fenzhi]# git branch</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">* master</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">zhengwenyi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[root@131_70 git_fenzhi]# ls</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">master.sh</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[root@131_70 git_fenzhi]# git log --oneline #</span></span><br><span class="line"><span class="string">此时只能看到master自己的，看不到分支的内容</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">f0ff623 master分支提交</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">⭐ 重点！：此时可以选择合并分支或删除分支</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1、删除分支，该分支的提交版本也会随之删除，没有被合并时用-D删除：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git branch -D zhengwenyi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">```bash</span></span><br><span class="line"><span class="string">[root@131_70 git_fenzhi]# git branch -D zhengwenyi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Deleted branch zhengwenyi (was 43c9d49).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[root@131_70 git_fenzhi]#</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[root@131_70 git_fenzhi]# git branch</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">* master</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">⭐ 2、选择合并分支的情况：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">记录一个创建分支并切换到该分支的参数：-b → git checkout -b xuexi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">合并分支，也就是合并至master上：git merge xuexi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">（当分支合并之后，该分支就可以删除了，随时用分支，随时创建即可）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">```bash</span></span><br><span class="line"><span class="string">[root@131_70 git_fenzhi]# git checkout -b zhengwenyi_v2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Switched to a new branch &#x27;zhengwenyi_v2&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[root@131_70 git_fenzhi]# git branch</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">master</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">* zhengwenyi_v2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[root@131_70 git_fenzhi]# echo &quot;test&quot; &gt;&gt; zhengwenyi_test #</span></span><br><span class="line"><span class="string">在该分支下搞个内容</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[root@131_70 git_fenzhi]# ls</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">master.sh zhengwenyi_test</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">（一般这里应该也是要放到缓存区和本地仓库的，但是我发现没有存进去直接合并的话，也是会直接在master中显示的）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">```bash</span></span><br><span class="line"><span class="string">[root@131_70 git_fenzhi]# git merge zhengwenyi_v2 #</span></span><br><span class="line"><span class="string">将分支zhengwenyi_v2合并到master</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Already up-to-date.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[root@131_70 git_fenzhi]# git branch master # 切换到master下</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[root@131_70 git_fenzhi]# ls # 此时就能看到分支的内容了</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">master.sh zhengwenyi_test</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">**Git解决分支合并冲突**</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">模拟过程</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1、创建分支并切换新分支</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">旧命令：git checkout -b test （-b: branch）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">新命令：git switch -c test （好理解：swich切换并createcreate）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2、在test下创建一个xixi.sh文件，并提交版本记录</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">echo &quot;嘻嘻嘻&quot; &gt;&gt; xixi.sh</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git add .</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git commit -m &quot;提交一个xixi.sh文件做测试&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3、回到master分支下，写一个同名但内容不一致的文件，同样提交版本记录</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git checkout(switch) master</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">echo &quot;heiheihei&quot; &gt;&gt; xixi.sh</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git add .</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git commit -m &quot;第一版测试&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">4、此时我们合并会观察到什么呢？master下将分支test合并进来</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git merge test</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">```bash</span></span><br><span class="line"><span class="string">[root@131_70 gitstash_test]# git merge test</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Auto-merging xixi.sh</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">CONFLICT (add/add): Merge conflict in xixi.sh # Merge conflict</span></span><br><span class="line"><span class="string">表示合并冲突的意思</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Automatic merge failed; fix conflicts and then commit the result. #</span></span><br><span class="line"><span class="string">修改冲突并提交结果</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">5、git会告诉你哪个分支下的内容是啥，需要人为最终判断及更改保留</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">```bash</span></span><br><span class="line"><span class="string">[root@131_70 gitstash_test]# cat xixi.sh</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;&lt;&lt; HEAD</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">heiheihei</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">=======</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">嘻嘻嘻</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt;&gt;&gt; test</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">6、需要人为合并之后提交</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">做人为修改后的内容：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">```bash</span></span><br><span class="line"><span class="string">[root@131_70 gitstash_test]# cat xixi.sh</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">heiheihei</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">嘻嘻嘻</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">提交：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">```bash</span></span><br><span class="line"><span class="string">[root@131_70 gitstash_test]# git add .</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[root@131_70 gitstash_test]# git commit -m 合并冲突后最终版</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[root@131_70 gitstash_test]# git log --oneline</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2a433e0 合并冲突后的最终版</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">**Git标签**</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git tag ： 便于记忆的标签，可以是字符，也可以是数字</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1、对当前的最新的版本记录加上一个标签</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">参数：-a → 标签的名字 ； -m → 给标签一个注释</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">```bash</span></span><br><span class="line"><span class="string">[root@131_70 git_fenzhi]# git tag -a &quot;v1.0&quot; -m &quot;master分支提交&quot;</span></span><br></pre></td></tr></table></figure><p>2、指定某个commit id ，进行tag打标签</p><p>git tag -a “版本名” commit_id -m “注释”</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@131_70 gitstash_test]# git tag -a <span class="string">&quot;v0.9&quot;</span> 0767650 -m</span><br><span class="line"><span class="string">&quot;小版本0.9&quot;</span></span><br></pre></td></tr></table></figure><p>3、查看版本信息</p><p>#查看现有的所有版本信息(只能看到版本信息)</p><p>git tag</p><p>#查看版本和commitid的对应信息</p><p>git log –oneline –decorate</p><p>git log –oneline –decorate –graph # 图形化显示</p><pre><code class="language-bash">[root@131_70 gitstash_test]# git log --oneline --decorate25799a0 (HEAD, tag: v1.0, master) 修复了v2.txt的bug0767650 (tag: v0.9) 首次提交代码4、查看标签中的具体信息，以及关联版本的具体信息（有详细的内容展示）git show v1.05、删除标签git tag -d &quot;标签&quot;```bash[root@131_70 gitstash_test]# git tag -d v0.9</code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习类 </category>
          
          <category> CICD </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins_Pipeline_入门实用手册</title>
      <link href="/posts/1234567890/"/>
      <url>/posts/1234567890/</url>
      
        <content type="html"><![CDATA[<h1 id="Jenkins-Pipeline-入门实用手册"><a href="#Jenkins-Pipeline-入门实用手册" class="headerlink" title="Jenkins Pipeline 入门实用手册"></a>Jenkins Pipeline 入门实用手册</h1><h2 id="1-什么是-Jenkins-Pipeline？"><a href="#1-什么是-Jenkins-Pipeline？" class="headerlink" title="1. 什么是 Jenkins Pipeline？"></a>1. 什么是 Jenkins Pipeline？</h2><p>Jenkins Pipeline 是 Jenkins 的一套自动化流程脚本，可以用代码（Jenkinsfile）描述持续集成&#x2F;持续部署（CI&#x2F;CD）过程。它让构建、测试、部署等步骤自动化、可追溯、易维护。</p><h2 id="2-声明式-vs-脚本式-Pipeline"><a href="#2-声明式-vs-脚本式-Pipeline" class="headerlink" title="2. 声明式 vs 脚本式 Pipeline"></a>2. 声明式 vs 脚本式 Pipeline</h2><ul><li><strong>声明式（Declarative）</strong>：结构清晰，推荐新手使用，常见于 <code>pipeline &#123; ... &#125;</code> 语法。</li><li><strong>脚本式（Scripted）</strong>：基于 Groovy 语法，更灵活，适合复杂逻辑，常见于 <code>node &#123; ... &#125;</code> 语法。</li></ul><blockquote><p>建议初学者优先用声明式 Pipeline。</p></blockquote><h2 id="3-Pipeline-基本结构与常用语法"><a href="#3-Pipeline-基本结构与常用语法" class="headerlink" title="3. Pipeline 基本结构与常用语法"></a>3. Pipeline 基本结构与常用语法</h2><h3 id="3-1-最简单的声明式-Pipeline"><a href="#3-1-最简单的声明式-Pipeline" class="headerlink" title="3.1 最简单的声明式 Pipeline"></a>3.1 最简单的声明式 Pipeline</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">&#x27;Hello&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo <span class="string">&#x27;Hello Jenkins Pipeline!&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-主要语法说明"><a href="#3-2-主要语法说明" class="headerlink" title="3.2 主要语法说明"></a>3.2 主要语法说明</h3><ul><li><code>pipeline &#123;&#125;</code>：声明整个流水线</li><li><code>agent any</code>：在哪个节点（机器）上执行，<code>any</code> 表示任意可用节点</li><li><code>stages &#123;&#125;</code>：阶段集合</li><li><code>stage(&#39;名称&#39;) &#123;&#125;</code>：单个阶段</li><li><code>steps &#123;&#125;</code>：具体步骤</li><li><code>echo</code>：打印日志</li></ul><h3 id="3-3-其他常用语法"><a href="#3-3-其他常用语法" class="headerlink" title="3.3 其他常用语法"></a>3.3 其他常用语法</h3><ul><li><code>environment &#123;&#125;</code>：定义环境变量</li><li><code>parameters &#123;&#125;</code>：定义参数化构建</li><li><code>when &#123;&#125;</code>：条件执行</li><li><code>post &#123;&#125;</code>：流水线后置操作（如 always、success、failure）</li></ul><h2 id="4-典型实用示例"><a href="#4-典型实用示例" class="headerlink" title="4. 典型实用示例"></a>4. 典型实用示例</h2><h3 id="4-1-拉取代码、构建、部署"><a href="#4-1-拉取代码、构建、部署" class="headerlink" title="4.1 拉取代码、构建、部署"></a>4.1 拉取代码、构建、部署</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">&#x27;拉取代码&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                git <span class="attr">branch:</span> <span class="string">&#x27;main&#x27;</span>, <span class="attr">url:</span> <span class="string">&#x27;https://github.com/your/repo.git&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">&#x27;构建&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh <span class="string">&#x27;make build&#x27;</span>  <span class="comment">// Linux</span></span><br><span class="line">                <span class="comment">// bat &#x27;build.bat&#x27; // Windows</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">&#x27;部署&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh <span class="string">&#x27;bash deploy.sh&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-参数化构建"><a href="#4-2-参数化构建" class="headerlink" title="4.2 参数化构建"></a>4.2 参数化构建</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    parameters &#123;</span><br><span class="line">        string(<span class="attr">name:</span> <span class="string">&#x27;BRANCH&#x27;</span>, <span class="attr">defaultValue:</span> <span class="string">&#x27;main&#x27;</span>, <span class="attr">description:</span> <span class="string">&#x27;分支名&#x27;</span>)</span><br><span class="line">        choice(<span class="attr">name:</span> <span class="string">&#x27;ENV&#x27;</span>, <span class="attr">choices:</span> [<span class="string">&#x27;dev&#x27;</span>, <span class="string">&#x27;prod&#x27;</span>], <span class="attr">description:</span> <span class="string">&#x27;环境&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">&#x27;参数打印&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo <span class="string">&quot;分支: $&#123;params.BRANCH&#125;, 环境: $&#123;params.ENV&#125;&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-并发分组执行"><a href="#4-3-并发分组执行" class="headerlink" title="4.3 并发分组执行"></a>4.3 并发分组执行</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">&#x27;并发测试&#x27;</span>) &#123;</span><br><span class="line">            parallel &#123;</span><br><span class="line">                stage(<span class="string">&#x27;测试A&#x27;</span>) &#123;</span><br><span class="line">                    steps &#123; echo <span class="string">&#x27;A&#x27;</span> &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                stage(<span class="string">&#x27;测试B&#x27;</span>) &#123;</span><br><span class="line">                    steps &#123; echo <span class="string">&#x27;B&#x27;</span> &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-条件执行"><a href="#4-4-条件执行" class="headerlink" title="4.4 条件执行"></a>4.4 条件执行</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">&#x27;仅在主分支&#x27;</span>) &#123;</span><br><span class="line">            when &#123; branch <span class="string">&#x27;main&#x27;</span> &#125;</span><br><span class="line">            steps &#123; echo <span class="string">&#x27;只在main分支执行&#x27;</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-5-后置操作"><a href="#4-5-后置操作" class="headerlink" title="4.5 后置操作"></a>4.5 后置操作</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">&#x27;任务&#x27;</span>) &#123;</span><br><span class="line">            steps &#123; sh <span class="string">&#x27;exit 1&#x27;</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    post &#123;</span><br><span class="line">        always &#123; echo <span class="string">&#x27;总会执行&#x27;</span> &#125;</span><br><span class="line">        success &#123; echo <span class="string">&#x27;成功才执行&#x27;</span> &#125;</span><br><span class="line">        failure &#123; echo <span class="string">&#x27;失败才执行&#x27;</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-常见问题与调试技巧"><a href="#5-常见问题与调试技巧" class="headerlink" title="5. 常见问题与调试技巧"></a>5. 常见问题与调试技巧</h2><ul><li><strong>Jenkinsfile 语法报错？</strong><ul><li>用”流水线语法”或”Blue Ocean”插件可可视化生成。</li><li>多用 <code>echo</code> 打印变量和流程。</li></ul></li><li><strong>权限问题？</strong><ul><li>检查 Jenkins 节点权限、凭据配置。</li></ul></li><li><strong>Shell 步骤失败？</strong><ul><li>用 <code>sh &#39;set -x&#39;</code> 增加调试输出。</li></ul></li><li><strong>参数未生效？</strong><ul><li>用 <code>$&#123;params.参数名&#125;</code> 访问参数。</li></ul></li></ul><h2 id="6-推荐学习资源"><a href="#6-推荐学习资源" class="headerlink" title="6. 推荐学习资源"></a>6. 推荐学习资源</h2><ul><li>官方文档：<a href="https://www.jenkins.io/zh/doc/book/pipeline/">https://www.jenkins.io/zh/doc/book/pipeline/</a></li><li>Jenkins Pipeline 示例库：<a href="https://github.com/jenkinsci/pipeline-examples">https://github.com/jenkinsci/pipeline-examples</a></li><li>B站&#x2F;Jenkins Pipeline 教程视频</li><li>公众号&#x2F;博客：搜索”Jenkins Pipeline 入门”</li></ul><hr><p>如需更复杂用法（如流水线库、共享脚本、凭据管理等），建议先掌握基础后逐步深入。 </p>]]></content>
      
      
      <categories>
          
          <category> 学习类 </category>
          
          <category> CICD </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/1/"/>
      <url>/posts/1/</url>
      
        <content type="html"><![CDATA[<h1 id="HAProxy-配置文件参数详解"><a href="#HAProxy-配置文件参数详解" class="headerlink" title="HAProxy 配置文件参数详解"></a>HAProxy 配置文件参数详解</h1><p>本文以实际配置文件为例，详细介绍 HAProxy 各参数的含义和作用，适合初学者快速理解和上手。</p><hr><h2 id="1-global（全局配置）"><a href="#1-global（全局配置）" class="headerlink" title="1. global（全局配置）"></a>1. global（全局配置）</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">global</span><br><span class="line">    log         127.0.0.1 local2</span><br><span class="line">    chroot      /var/lib/haproxy</span><br><span class="line">    pidfile     /var/run/haproxy.pid</span><br><span class="line">    maxconn     4000</span><br><span class="line">    user        haproxy</span><br><span class="line">    group       haproxy</span><br><span class="line">    daemon</span><br><span class="line">    stats socket /var/lib/haproxy/stats</span><br></pre></td></tr></table></figure><ul><li><strong>log</strong>：日志输出地址和日志级别。此处表示日志发送到本地 127.0.0.1 的 syslog，使用 local2 设施。</li><li><strong>chroot</strong>：指定运行时的根目录，提高安全性。</li><li><strong>pidfile</strong>：存放进程号的文件路径。</li><li><strong>maxconn</strong>：允许的最大并发连接数。</li><li><strong>user&#x2F;group</strong>：以哪个用户&#x2F;用户组身份运行。</li><li><strong>daemon</strong>：以守护进程方式运行。</li><li><strong>stats socket</strong>：用于统计和管理的本地 socket 文件。</li></ul><hr><h2 id="2-defaults（默认配置）"><a href="#2-defaults（默认配置）" class="headerlink" title="2. defaults（默认配置）"></a>2. defaults（默认配置）</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">defaults</span><br><span class="line">    mode                    http</span><br><span class="line">    log                     global</span><br><span class="line">    option                  httplog</span><br><span class="line">    option                  dontlognull</span><br><span class="line">    option http-server-close</span><br><span class="line">    option forwardfor       except 127.0.0.0/8</span><br><span class="line">    option                  redispatch</span><br><span class="line">    retries                 3</span><br><span class="line">    timeout http-request    10s</span><br><span class="line">    timeout queue           1m</span><br><span class="line">    timeout connect         10s</span><br><span class="line">    timeout client          1m</span><br><span class="line">    timeout server          1m</span><br><span class="line">    timeout http-keep-alive 10s</span><br><span class="line">    timeout check           10s</span><br><span class="line">    maxconn                 3000</span><br></pre></td></tr></table></figure><ul><li><strong>mode</strong>：工作模式，常用 http 或 tcp。</li><li><strong>log</strong>：日志设置，global 表示继承全局配置。</li><li><strong>option httplog</strong>：以 HTTP 日志格式记录日志。</li><li><strong>option dontlognull</strong>：不记录空连接日志。</li><li><strong>option http-server-close</strong>：每次请求后主动关闭服务器端连接。</li><li><strong>option forwardfor except 127.0.0.0&#x2F;8</strong>：转发客户端真实 IP（X-Forwarded-For），本地回环除外。</li><li><strong>option redispatch</strong>：会话丢失时重新分配到其他可用服务器。</li><li><strong>retries</strong>：连接失败重试次数。</li><li><strong>timeout http-request</strong>：HTTP 请求超时时间。</li><li><strong>timeout queue</strong>：排队超时时间。</li><li><strong>timeout connect</strong>：连接后端服务器超时时间。</li><li><strong>timeout client&#x2F;server</strong>：客户端&#x2F;服务器端连接超时时间。</li><li><strong>timeout http-keep-alive</strong>：HTTP 长连接保持时间。</li><li><strong>timeout check</strong>：健康检查超时时间。</li><li><strong>maxconn</strong>：单个进程最大连接数。</li></ul><hr><h2 id="3-frontend（前端配置）"><a href="#3-frontend（前端配置）" class="headerlink" title="3. frontend（前端配置）"></a>3. frontend（前端配置）</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">frontend  main *:5000</span><br><span class="line">    acl url_static       path_beg       -i /static /images /javascript /stylesheets</span><br><span class="line">    acl url_static       path_end       -i .jpg .gif .png .css .js</span><br><span class="line">    use_backend static          if url_static</span><br><span class="line">    default_backend             app</span><br></pre></td></tr></table></figure><ul><li>*<em>frontend main <em>:5000</em></em>：定义名为 main 的前端，监听所有 IP 的 5000 端口。</li><li><strong>acl</strong>：访问控制列表（Access Control List），用于条件判断。<ul><li><code>path_beg</code>：以指定路径开头。</li><li><code>path_end</code>：以指定字符串结尾。</li><li><code>-i</code>：忽略大小写。</li></ul></li><li><strong>use_backend static if url_static</strong>：如果请求满足 url_static 条件，则转发到 static 后端。</li><li><strong>default_backend app</strong>：其他请求默认转发到 app 后端。</li></ul><hr><h2 id="4-backend（后端配置）"><a href="#4-backend（后端配置）" class="headerlink" title="4. backend（后端配置）"></a>4. backend（后端配置）</h2><h3 id="4-1-static-后端"><a href="#4-1-static-后端" class="headerlink" title="4.1 static 后端"></a>4.1 static 后端</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">backend static</span><br><span class="line">    balance     roundrobin</span><br><span class="line">    server      static 127.0.0.1:4331 check</span><br></pre></td></tr></table></figure><ul><li><strong>backend static</strong>：定义名为 static 的后端。</li><li><strong>balance roundrobin</strong>：采用轮询方式分配请求。</li><li><strong>server static 127.0.0.1:4331 check</strong>：定义一台名为 static 的后端服务器，地址为 127.0.0.1:4331，带健康检查。</li></ul><h3 id="4-2-app-后端"><a href="#4-2-app-后端" class="headerlink" title="4.2 app 后端"></a>4.2 app 后端</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">backend app</span><br><span class="line">    balance     roundrobin</span><br><span class="line">    server  app1 127.0.0.1:5001 check</span><br><span class="line">    server  app2 127.0.0.1:5002 check</span><br><span class="line">    server  app3 127.0.0.1:5003 check</span><br><span class="line">    server  app4 127.0.0.1:5004 check</span><br></pre></td></tr></table></figure><ul><li><strong>backend app</strong>：定义名为 app 的后端。</li><li><strong>balance roundrobin</strong>：轮询分配。</li><li><strong>server appX … check</strong>：定义多台后端服务器，带健康检查。</li></ul><hr><h2 id="5-关键参数说明"><a href="#5-关键参数说明" class="headerlink" title="5. 关键参数说明"></a>5. 关键参数说明</h2><ul><li><strong>acl</strong>：访问控制列表，用于流量分流、条件判断。</li><li><strong>use_backend</strong>：根据条件选择后端。</li><li><strong>default_backend</strong>：默认后端。</li><li><strong>server</strong>：定义后端服务器。</li><li><strong>balance</strong>：负载均衡算法（如 roundrobin、leastconn 等）。</li><li><strong>option</strong>：功能选项，增强灵活性和安全性。</li><li><strong>timeout</strong>：超时设置，防止连接长时间占用资源。</li><li><strong>log</strong>：日志相关设置。</li><li><strong>maxconn</strong>：最大连接数限制。</li></ul><hr><h2 id="6-配置结构小结"><a href="#6-配置结构小结" class="headerlink" title="6. 配置结构小结"></a>6. 配置结构小结</h2><ol><li><strong>global</strong>：全局参数，影响整个 HAProxy 实例。</li><li><strong>defaults</strong>：默认参数，供 frontend&#x2F;backend 继承。</li><li><strong>frontend</strong>：定义入口，决定如何分流。</li><li><strong>backend</strong>：定义后端服务器组及负载均衡方式。</li><li><strong>acl&#x2F;use_backend</strong>：实现灵活的流量分配。</li></ol><hr><p>如需更详细的参数说明，可参考 <a href="https://www.haproxy.org/download/1.4/doc/configuration.txt">HAProxy 官方文档</a>。 </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/2/"/>
      <url>/posts/2/</url>
      
        <content type="html"><![CDATA[<h1 id="HAProxy-Keepalived-高可用负载均衡部署方案"><a href="#HAProxy-Keepalived-高可用负载均衡部署方案" class="headerlink" title="HAProxy + Keepalived 高可用负载均衡部署方案"></a>HAProxy + Keepalived 高可用负载均衡部署方案</h1><h2 id="1-架构说明"><a href="#1-架构说明" class="headerlink" title="1. 架构说明"></a>1. 架构说明</h2><ul><li>192.168.131.71、192.168.131.72 部署 HAProxy + Keepalived，组成主备高可用。</li><li>两个 VIP：<ul><li>vip1: 192.168.131.66:5000（代理 Group1：192.168.131.67:8080）</li><li>vip2: 192.168.131.128:5000（代理 Group2：192.168.131.67&#x2F;68&#x2F;70:8080）</li></ul></li><li>后端为三台 Tomcat（192.168.131.67&#x2F;68&#x2F;70）。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Client]</span><br><span class="line">   |</span><br><span class="line">[前端：VIP1:192.168.131.66:5000]---+--&gt;[HAProxy 71/72]----+--&gt;[后端：192.168.131.67:8080]</span><br><span class="line">[前端：VIP2:192.168.131.69:5000]---+                      +--&gt;[后端：192.168.131.68:8080]</span><br><span class="line">                                                         +--&gt;[后端：192.168.131.70:8080]</span><br><span class="line">1、设备71配置了keepalived是master，设备72配置了keepalived是backup</span><br><span class="line">2、当用户域名访问时（域名是可以配置多个IP的，比如域名：www.example.com对应的就是192.168.131.69和192.168.131.70）</span><br><span class="line">1）用户访问：www.example.com:5000 可能会被分配到访问 VIP1，那么此时访问到的后端就是192.168.131.67:8080</span><br><span class="line">2）同样DNS域名解析时也会被分配到访问VIP2，那么此时访问到的后端就是192.168.131.67/68/70:8080这三台的其中一台</span><br><span class="line">3、HAProxy 71/72的配置必须一致，它的流量取决于keepalived定义的主备的存活，71设备被定义为主节点，那么转发走的就是71上的HAProxy；只有当主节点71挂了，才会走72的HAProxy去转发。</span><br></pre></td></tr></table></figure><h2 id="2-HAProxy-安装与配置"><a href="#2-HAProxy-安装与配置" class="headerlink" title="2. HAProxy 安装与配置"></a>2. HAProxy 安装与配置</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CentOS/RedHat</span></span><br><span class="line"><span class="built_in">sudo</span> yum install -y haproxy</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>假设配置文件路径为 <code>/etc/haproxy/haproxy.cfg</code></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 监听VIP1，代理Group1</span></span><br><span class="line">frontend group1_frontend</span><br><span class="line">    bind 192.168.131.66:5000</span><br><span class="line">    default_backend group1_backend</span><br><span class="line"></span><br><span class="line">backend group1_backend</span><br><span class="line">    server tomcat1 192.168.131.67:8080 check</span><br><span class="line"></span><br><span class="line"><span class="comment"># 监听VIP2，代理Group2</span></span><br><span class="line">frontend group2_frontend</span><br><span class="line">    bind 192.168.131.69:5000</span><br><span class="line">    default_backend group2_backend</span><br><span class="line"></span><br><span class="line">backend group2_backend</span><br><span class="line">    server tomcat1 192.168.131.67:8080 check</span><br><span class="line">    server tomcat2 192.168.131.68:8080 check</span><br><span class="line">    server tomcat3 192.168.131.70:8080 check</span><br></pre></td></tr></table></figure><blockquote><p>注意：如 Tomcat 端口非 8080，请根据实际情况调整。</p></blockquote><h2 id="3-Keepalived-安装与配置"><a href="#3-Keepalived-安装与配置" class="headerlink" title="3. Keepalived 安装与配置"></a>3. Keepalived 安装与配置</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CentOS/RedHat</span></span><br><span class="line"><span class="built_in">sudo</span> yum install -y keepalived</span><br><span class="line"><span class="comment"># Ubuntu/Debian</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install -y keepalived</span><br></pre></td></tr></table></figure><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><p>假设配置文件路径为 <code>/etc/keepalived/keepalived.conf</code></p><h4 id="71-号主机（MASTER）"><a href="#71-号主机（MASTER）" class="headerlink" title="71 号主机（MASTER）"></a>71 号主机（MASTER）</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface eth0  <span class="comment"># 根据设备71实际网卡名修改</span></span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.131.66</span><br><span class="line">        192.168.131.128</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="72-号主机（BACKUP）"><a href="#72-号主机（BACKUP）" class="headerlink" title="72 号主机（BACKUP）"></a>72 号主机（BACKUP）</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface eth0  <span class="comment"># 根据实际网卡名修改</span></span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 90</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.131.66</span><br><span class="line">        192.168.131.128</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><ul><li><code>interface</code> 请用实际的网卡名（如 ens33、eth0 等）。</li><li><code>virtual_router_id</code> 两台需一致。</li><li><code>priority</code> 主高备低。</li></ul></blockquote><h2 id="4-启动与验证"><a href="#4-启动与验证" class="headerlink" title="4. 启动与验证"></a>4. 启动与验证</h2><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> haproxy --now</span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> keepalived --now</span><br><span class="line">注意：启动haproxy时的backup会遇到无法监听vip的情况：cannot <span class="built_in">bind</span> socket [192.168.131.66:5000] and [192.168.131.128:5000]</span><br><span class="line">1、原因：</span><br><span class="line">无法监听是因为backup上的网卡上ens33上只有它自己本机的IP，它现在的行为相当于在绑定/在监听非本地IP，这是不被系统的默认配置允许的；</span><br><span class="line">sysctl -a | grep <span class="built_in">bind</span>  → net.ipv4.ip_nonlocal_bind = 0 <span class="comment">#系统默认参数是0，表示禁止监听非本机IP外的地址</span></span><br><span class="line">2、解决方法：</span><br><span class="line">将master和backup上的相关的配置都修改为1并应用之后，重启haproxy</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;net.ipv4.ip_nonlocal_bind=1&quot;</span> | <span class="built_in">sudo</span> <span class="built_in">tee</span> -a /etc/sysctl.conf    <span class="comment"># tee(写入并显示输出) -a(append追加)</span></span><br><span class="line"><span class="built_in">sudo</span> sysctl -p</span><br></pre></td></tr></table></figure><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><ul><li>用 <code>ip a</code> 查看 VIP 是否漂移到主机（mater节点上能查到定义的两个vip,backup上看不到正常，因为目前还没发生故障转移）。</li><li>用浏览器或 curl 访问 VIP1&#x2F;VIP2，确认能访问后端 Tomcat。</li><li>停掉主节点 keepalived，VIP 是否自动漂移到备节点。</li></ul><h2 id="5-注意事项"><a href="#5-注意事项" class="headerlink" title="5. 注意事项"></a>5. 注意事项</h2><ul><li>防火墙需放行 VIP 端口（如 80）。</li><li>两台 HAProxy 配置需保持一致。</li><li>keepalived 配置需主备区分 priority。</li><li>后端 Tomcat 需健康运行。</li><li>如有多网卡，interface 需指定正确。</li></ul><h2 id="6-HAProxy-动态管理与验证方法"><a href="#6-HAProxy-动态管理与验证方法" class="headerlink" title="6. HAProxy 动态管理与验证方法"></a>6. HAProxy 动态管理与验证方法</h2><h3 id="6-1-动态下线-上线后端节点"><a href="#6-1-动态下线-上线后端节点" class="headerlink" title="6.1 动态下线&#x2F;上线后端节点"></a>6.1 动态下线&#x2F;上线后端节点</h3><p>HAProxy 支持通过 socket 动态下线（摘除）或上线后端服务器，无需 reload 配置。</p><ul><li><strong>下线后端节点（摘除流量）：</strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;disable server &lt;backend_name&gt;/&lt;server_name&gt;&#x27;</span> | socat stdio /var/lib/haproxy/stats</span><br><span class="line"><span class="comment"># 例：</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;disable server group1_backend/tomcat1&#x27;</span> | socat stdio /var/lib/haproxy/stats</span><br></pre></td></tr></table></figure></li><li><strong>上线后端节点（恢复流量）：</strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;enable server &lt;backend_name&gt;/&lt;server_name&gt;&#x27;</span> | socat stdio /var/lib/haproxy/stats</span><br><span class="line"><span class="comment"># 例：</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;enable server group1_backend/tomcat1&#x27;</span> | socat stdio /var/lib/haproxy/stats</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>注意：<code>/var/lib/haproxy/stats</code> 路径需与 haproxy.cfg 配置一致，且执行用户需有权限访问该 socket 文件。</p></blockquote><h3 id="6-2-验证后端节点状态"><a href="#6-2-验证后端节点状态" class="headerlink" title="6.2 验证后端节点状态"></a>6.2 验证后端节点状态</h3><ul><li><p><strong>查看所有后端节点状态：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;show stat&#x27;</span> | socat stdio /var/lib/haproxy/stats</span><br></pre></td></tr></table></figure><p>输出中 <code>status</code> 字段：</p><ul><li><code>UP</code>   ：节点在线，参与流量分发</li><li><code>MAINT</code>：节点被动态下线（摘除），不参与流量分发</li></ul></li><li><p><strong>交互式查看（可多条命令）：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">socat - UNIX-CONNECT:/var/lib/haproxy/stats</span><br><span class="line"><span class="comment"># 然后输入 show stat 回车</span></span><br><span class="line"><span class="comment"># 还可输入 disable/enable server ... 等命令</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="6-3-常见问题与权限说明"><a href="#6-3-常见问题与权限说明" class="headerlink" title="6.3 常见问题与权限说明"></a>6.3 常见问题与权限说明</h3><ul><li><strong>socket 文件权限</strong>：<ul><li>推荐配置 <code>stats socket /var/lib/haproxy/stats mode 666</code>，确保 root 用户可操作。</li><li>若用 chroot，建议 <code>stats socket /stats mode 666</code> 并设置 systemd WorkingDirectory。</li></ul></li><li><strong>属主问题</strong>：<ul><li>systemd 启动时 socket 属主通常为 root，root 用户可操作。</li><li>若需用 haproxy 用户操作，需保证 socket 属主为 haproxy。</li></ul></li><li><strong>动态操作不会修改配置文件</strong>，重启&#x2F;reload 后会恢复配置文件状态。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/2/"/>
      <url>/posts/2/</url>
      
        <content type="html"><![CDATA[<h3 id="ES单节点升级集群方案"><a href="#ES单节点升级集群方案" class="headerlink" title="ES单节点升级集群方案"></a>ES单节点升级集群方案</h3><h4 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Elasticserch7.x版本</span><br><span class="line">1、主分片以及副本分片，主分片可以修改，副本分片不可以修改但是可查询主要于高可用，理论上来说主分片数越多查询速度越快，对于3个节点的集群来说，可以设置5个主分片，1个副本分片（主分片数量设置应该根据服务器cpu及内存大小来配置，注意必须修改jvm配置文件）。</span><br><span class="line">2、默认分片不能通过配置文件来修改</span><br><span class="line">3、单节点重新配置成集群时（1master,3data-node）,单节点上的主分片以及副本分片默认会重新平衡以及重新分配，防止发生主机点变成新增的两个节点之一以及防止第三个节点未启动就开始分配分片，需要设置cluster.initial_master_nodes仅原单节点为master，gateway.recover_after_nodes配置设置为仅只有两台节点都起来才能进行分片分配（数据量太大可能会出现堵塞问题，可以研究是否限制同步的流量）</span><br><span class="line">4、当主节点挂掉之后，再重新加入集群会重新分配未分配的分片</span><br><span class="line">5、在任一节点上都可以创建、查看索引</span><br></pre></td></tr></table></figure><h4 id="二、单节点升级集群方案"><a href="#二、单节点升级集群方案" class="headerlink" title="二、单节点升级集群方案"></a>二、单节点升级集群方案</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">操作步骤</span><br><span class="line">First of all</span><br><span class="line">备份数据</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1、原单节点修改配置</span><br><span class="line">cluster.name: es-cluster</span><br><span class="line">node.name: node01</span><br><span class="line">path.data: /data/data</span><br><span class="line">path.logs: /data/data/log</span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line">http.port: 9200</span><br><span class="line">cluster.initial_master_nodes: [&quot;node01&quot;] 此配置不需要修改</span><br><span class="line">node.data: true</span><br><span class="line">node.master: true</span><br><span class="line">以下是新增配置</span><br><span class="line">discovery.seed_hosts: [&quot;172.53.81.47&quot;] 设置仅检测主节点连通性</span><br><span class="line">path.repo: [&quot;/data/esbak&quot;] 设置存储备份目录</span><br><span class="line">gateway.recover_after_nodes: 2 注意，此配置最重要，设置其他两个节点都起来才进行数据分片同步</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、在扩容节点上安装es（不启动）</span><br><span class="line">修改配置</span><br><span class="line">cluster.name: es-cluster</span><br><span class="line">node.name: node03</span><br><span class="line">network.host: 172.53.81.83</span><br><span class="line">http.port: 9200</span><br><span class="line">path.data: /data/elasticsearch-7.7.0/data</span><br><span class="line">path.logs: /data/elasticsearch-7.7.0/logs</span><br><span class="line">transport.tcp.port: 9300</span><br><span class="line">node.data: true</span><br><span class="line">node.master: true</span><br><span class="line">#discovery.seed_hosts: [&quot;172.53.81.47:9300&quot;,&quot;172.53.81.82:9300&quot;,&quot;172.53.81.83:9300&quot;]</span><br><span class="line">#cluster.initial_master_nodes: [&quot;node01&quot;,&quot;node02&quot;,&quot;node03&quot;]</span><br><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br><span class="line">discovery.seed_hosts: [&quot;172.53.81.47&quot;]</span><br><span class="line">cluster.initial_master_nodes: [&quot;node01&quot;] 设置主节点初始为node1</span><br><span class="line">path.repo: [&quot;/data/esbak&quot;]</span><br><span class="line">3、重启原单节点es，再依次重启新节点</span><br><span class="line">4、等待分片数据分配到新节点</span><br><span class="line">5、分配分片完成后，再进行配置文件修改</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">6、修改三台节点配置文件</span><br><span class="line">cluster.name: es-cluster</span><br><span class="line">node.name: node03</span><br><span class="line">network.host: 172.53.81.83</span><br><span class="line">http.port: 9200</span><br><span class="line">path.data: /data/elasticsearch-7.7.0/data</span><br><span class="line">path.logs: /data/elasticsearch-7.7.0/logs</span><br><span class="line">transport.tcp.port: 9300</span><br><span class="line">node.data: true</span><br><span class="line">node.master: true</span><br><span class="line">#discovery.seed_hosts: [&quot;172.53.81.47:9300&quot;,&quot;172.53.81.82:9300&quot;,&quot;172.53.81.83:9300&quot;]</span><br><span class="line">#cluster.initial_master_nodes: [&quot;node01&quot;,&quot;node02&quot;,&quot;node03&quot;]</span><br><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br><span class="line">discovery.seed_hosts: [&quot;172.53.81.47&quot;]</span><br><span class="line">cluster.initial_master_nodes: [&quot;node01&quot;] 设置主节点初始为node1</span><br><span class="line">path.repo: [&quot;/data/esbak&quot;]</span><br></pre></td></tr></table></figure><h3 id="原环境注意事项"><a href="#原环境注意事项" class="headerlink" title="原环境注意事项"></a>原环境注意事项</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">1、数据量大概30G，注意重启node节点同步时是否会造成网络堵塞</span><br><span class="line">默认重新分配分片的同步数量是2，可以设置同步数量多一点，注意性能</span><br><span class="line"></span><br><span class="line">2、原ES数据库内绝大多数索引都是一个主分片以及一个副本分片总共2个分片，对于三个节点的es集群来说，虽然保证了高可用，但是可能会造成磁盘分配不均匀以及查询速度慢的问题</span><br><span class="line"></span><br><span class="line">初始配置</span><br><span class="line">配置文件内容</span><br><span class="line">cluster.name: es-cluster  </span><br><span class="line">node.name: node01</span><br><span class="line">node.master: true</span><br><span class="line">node.data: true</span><br><span class="line">network.host: 192.168.62.32</span><br><span class="line">http.port: 9200</span><br><span class="line">path.data: /data/elasticsearch/elasticsearch-7.7.0/data</span><br><span class="line">path.logs: /data/elasticsearch/elasticsearch-7.7.0/logs</span><br><span class="line">transport.tcp.port: 9300</span><br><span class="line">discovery.seed_hosts: [&quot;192.168.62.32:9300&quot;,&quot;192.168.62.33:9300&quot;,&quot;192.168.62.34:9300&quot;]</span><br><span class="line">cluster.initial_master_nodes: [&quot;node01&quot;,&quot;node02&quot;,&quot;node03&quot;]</span><br><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br><span class="line"></span><br><span class="line">配置文件解释</span><br><span class="line">cluster.name: es-cluster    #集群名称，各节点相同</span><br><span class="line">node.name: node01       #节点名称，用于区别节点，master做数据节点也是node</span><br><span class="line">node.master: true         #是否可以成为master，不是设置此节点为master</span><br><span class="line">node.data: true           #是否是数据节点，即是否可以存储分片数据</span><br><span class="line">network.host: 192.168.62.32  #监听地址，访问时的地址</span><br><span class="line">http.port: 9200             #监听端口</span><br><span class="line">path.data: /data/elasticsearch/elasticsearch-7.7.0/data   #数据目录</span><br><span class="line">path.logs: /data/elasticsearch/elasticsearch-7.7.0/logs    #日志目录</span><br><span class="line">transport.tcp.port: 9300      #node之间的通信端口，也是选举master时的检测端口</span><br><span class="line">discovery.seed_hosts: [&quot;192.168.62.32:9300&quot;,&quot;192.168.62.33:9300&quot;,&quot;192.168.62.34:9300&quot;] #节点之间的通信配置</span><br><span class="line">cluster.initial_master_nodes: [&quot;node01&quot;,&quot;node02&quot;,&quot;node03&quot;] #初始化配置了node.master: true的节点，使仅仅这些节点可以成为master并在启动时在里面选择一个为master</span><br><span class="line">http.cors.enabled: true        #允许跨域的访问</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;      #允许所有ip跨域访问</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">集群开启数据重平衡</span><br><span class="line">curl -XPUT &quot;http://192.168.62.32:9200/_cluster/settings?pretty&quot; -H &#x27;Content-Type:application/json&#x27; -d \</span><br><span class="line">&#x27;&#123;</span><br><span class="line">  &quot;persistent&quot; :&#123;</span><br><span class="line">      &quot;cluster.routing.rebalance.enable&quot;: &quot;all&quot; </span><br><span class="line">   &#125;,</span><br><span class="line">     &quot;transient&quot; :&#123;</span><br><span class="line">      &quot;cluster.routing.rebalance.enable&quot;: &quot;all&quot;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;&#x27;</span><br><span class="line">Persistent：永久开启</span><br><span class="line">Transient：临时开启</span><br><span class="line"></span><br><span class="line">查询集群配置命令</span><br><span class="line">curl -XGET &quot;http://192.168.62.34:9200/_cluster/settings?pretty&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop集群部署</title>
      <link href="/posts/20250414/"/>
      <url>/posts/20250414/</url>
      
        <content type="html"><![CDATA[<h1 id="前提：机器规划情况"><a href="#前提：机器规划情况" class="headerlink" title="前提：机器规划情况"></a><strong>前提：机器规划情况</strong></h1><p>hadoop各组件下载情况：<a href="https://archive.apache.org/dist/">https://archive.apache.org/dist/</a></p><table><thead><tr><th>主机IP</th><th>主机名</th><th>部署内容</th><th>角色</th></tr></thead><tbody><tr><td>192.168.131.67</td><td>131_67</td><td></td><td>master</td></tr><tr><td>192.168.131.68</td><td>131_68</td><td></td><td>slave01</td></tr><tr><td>192.168.131.69</td><td>131_69</td><td></td><td>slave02</td></tr><tr><td>192.168.131.70</td><td>131_70</td><td></td><td>slave03</td></tr></tbody></table><h1 id="一、环境检查："><a href="#一、环境检查：" class="headerlink" title="一、环境检查："></a><strong>一、环境检查：</strong></h1><p>1、防火墙关闭：systemctl stop firewalld</p><p>2、selinux关闭：sed -i ‘s&#x2F;SELINUX&#x3D;enforcing&#x2F;SELINUX&#x3D;disabled&#x2F;‘ &#x2F;etc&#x2F;selinux&#x2F;config</p><p>3、每台集群节点配置&#x2F;etc&#x2F;hosts文件映射</p><p>192.168.131.67 master 192.168.131.68 slave01 192.168.131.69 slave02 192.168.131.70 slave03</p><h1 id="二、安装jdk"><a href="#二、安装jdk" class="headerlink" title="二、安装jdk"></a><strong>二、安装jdk</strong></h1><p>参见部署类——jdk下载及安装 </p><h1 id="三、解压安装hadoop-（尝试用普通用户admin部署）"><a href="#三、解压安装hadoop-（尝试用普通用户admin部署）" class="headerlink" title="三、解压安装hadoop （尝试用普通用户admin部署）"></a><strong>三、解压安装hadoop （尝试用普通用户admin部署）</strong></h1><p>安装配置完一台，其它的scp过去即可</p><p>mkdir &#x2F;data   (root建完&#x2F;data，chown -R admin.admin &#x2F;data 全部授权给普通用户admin) tar zvxf hadoop-2.7.3.tar.gz -C &#x2F;data</p><h1 id="四、配置hadoop的6个配置文件"><a href="#四、配置hadoop的6个配置文件" class="headerlink" title="四、配置hadoop的6个配置文件"></a><strong>四、配置hadoop的6个配置文件</strong></h1><table><thead><tr><th>配置文件</th><th>用途</th><th>配置文件中加入或修改</th></tr></thead><tbody><tr><td>hadoop-env.sh</td><td>hadoop环境变量定义</td><td>export JAVA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;jdk1.8.0_231export HDFS_NAMENODE_USER&#x3D;”admin”export HDFS_DATANODE_USER&#x3D;”admin”export  HDFS_SECONDARYNAMENODE_USER&#x3D;”admin”export  YARN_RESOURCEMANAGER_USER&#x3D;”admin”export  YARN_NODEMANAGER_USER&#x3D;”admin”</td></tr><tr><td>core-site.xml</td><td>核心配置文件</td><td><strong>1、创建存放临时数据的公共目录：&#x2F;data&#x2F;hadoop-2.7.3&#x2F;tmp</strong>2、属性1：定义角色  #为一组属性     属性2：定义数据存放目录</td></tr><tr><td>hdfs-site.xml</td><td>副本数及web访问定义</td><td>1、副本数定义：hdfs副本数，表示可以存多少份相同的数据，有几个从节点就配置几个2、web端访问地址配置</td></tr><tr><td>yarn-site.xml</td><td>指定resourcemanager</td><td>1、nodemanager获取数据的方式：混洗方式shuffle2、指定<strong>yarn的老大也就是resourcemanager</strong>3、环境变量继承4、关闭虚拟内存检查，开启检查时，虚拟内存不足会导致nodemanager的自杀</td></tr><tr><td>mapred-site.xml</td><td>yarn是mapreduce的第二代，用于资源计算</td><td>指定MapReduce运行在YARN上</td></tr><tr><td>slaves（3.0之后叫workers）</td><td>指定从节点</td><td>指定从节点</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 部署类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>维护类-Linux内核信号量问题-agent的cannot create semaphore set</title>
      <link href="/posts/2024041405/"/>
      <url>/posts/2024041405/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux内核信号量问题-agent的cannot-create-semaphore-set"><a href="#Linux内核信号量问题-agent的cannot-create-semaphore-set" class="headerlink" title="Linux内核信号量问题-agent的cannot create semaphore set"></a>Linux内核信号量问题-agent的cannot create semaphore set</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>zabbix-agent 启动时报错：<code>cannot create semaphore set: [28] No space left on device</code>。</p><h2 id="排查与解决"><a href="#排查与解决" class="headerlink" title="排查与解决"></a>排查与解决</h2><ol><li><p><strong>查看内核信号量参数</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/sysctl.conf | grep kernel.sem</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kernel.sem=250 32000 100 200</span><br></pre></td></tr></table></figure></li><li><p><strong>参数含义</strong></p><ul><li>SEMMSL&#x3D;250：单个信号量集最大信号量数</li><li>SEMMNS&#x3D;32000：信号量总数</li><li>SEMOPM&#x3D;100：可执行的信号量操作数量上限</li><li>SEMMNI&#x3D;200：最大信号量集数</li></ul></li><li><p><strong>核心公式</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SEMMNS ≥ SEMMSL × SEMMNI</span><br></pre></td></tr></table></figure><p>若不满足，需调整 SEMMNI 或 SEMMSL。</p></li><li><p><strong>修改建议</strong></p><ul><li>若 SEMMSL&#x3D;250，SEMMNS&#x3D;32000，建议 SEMMNI&#x3D;128（128*250&#x3D;32000）。</li></ul></li></ol><h2 id="经验总结"><a href="#经验总结" class="headerlink" title="经验总结"></a>经验总结</h2><ul><li>信号量参数配置不当会导致 agent 无法启动。</li><li>修改 <code>/etc/sysctl.conf</code> 后需 <code>sysctl -p</code> 使其生效。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 维护类 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>维护类-http改https解决明文传输问题</title>
      <link href="/posts/2024041403/"/>
      <url>/posts/2024041403/</url>
      
        <content type="html"><![CDATA[<h1 id="http改https解决明文传输问题"><a href="#http改https解决明文传输问题" class="headerlink" title="http改https解决明文传输问题"></a>http改https解决明文传输问题</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>HTTP 明文传输存在安全隐患，敏感信息（如账号密码）易被窃取。通过 Nginx 配置 SSL，实现 HTTP 自动跳转到 HTTPS，保障数据加密传输。</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="1-生成-SSL-自签证书"><a href="#1-生成-SSL-自签证书" class="headerlink" title="1. 生成 SSL 自签证书"></a>1. 生成 SSL 自签证书</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> /etc/nginx/ssl</span><br><span class="line"><span class="built_in">sudo</span> openssl req -x509 -nodes -days 365 -newkey rsa:2048 \</span><br><span class="line">-keyout /etc/nginx/ssl/zabbix.key \</span><br><span class="line">-out /etc/nginx/ssl/zabbix.crt \</span><br><span class="line">-subj <span class="string">&quot;/CN=服务器IP或域名&quot;</span></span><br></pre></td></tr></table></figure><h3 id="2-配置-Nginx"><a href="#2-配置-Nginx" class="headerlink" title="2. 配置 Nginx"></a>2. 配置 Nginx</h3><h4 id="2-1-HTTP-自动跳转-HTTPS"><a href="#2-1-HTTP-自动跳转-HTTPS" class="headerlink" title="2.1 HTTP 自动跳转 HTTPS"></a>2.1 HTTP 自动跳转 HTTPS</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">8888</span>;</span><br><span class="line">    <span class="attribute">server_name</span> _;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$host</span><span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-配置-HTTPS-服务"><a href="#2-2-配置-HTTPS-服务" class="headerlink" title="2.2 配置 HTTPS 服务"></a>2.2 配置 HTTPS 服务</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">server_name</span> _;</span><br><span class="line">    <span class="attribute">ssl_certificate</span> /etc/nginx/ssl/zabbix.crt;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /etc/nginx/ssl/zabbix.key;</span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://localhost:8888;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">        <span class="attribute">proxy_hide_header</span> X-Powered-By;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-修改原有-8888-服务（只允许本地访问）"><a href="#2-3-修改原有-8888-服务（只允许本地访问）" class="headerlink" title="2.3 修改原有 8888 服务（只允许本地访问）"></a>2.3 修改原有 8888 服务（只允许本地访问）</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">127.0.0.1:8888</span>;</span><br><span class="line">    <span class="comment"># 其余配置保持不变</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="经验总结"><a href="#经验总结" class="headerlink" title="经验总结"></a>经验总结</h2><ul><li>明文传输极易泄露敏感信息，务必使用 HTTPS。</li><li>Nginx 配置 SSL 时注意证书路径和权限。</li><li>HTTP 跳转 HTTPS 可提升整体安全性。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 维护类 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>维护类-为已编译安装后的nginx添加模块</title>
      <link href="/posts/2024041404/"/>
      <url>/posts/2024041404/</url>
      
        <content type="html"><![CDATA[<h1 id="为已编译安装后的nginx添加模块（如ssl模块）"><a href="#为已编译安装后的nginx添加模块（如ssl模块）" class="headerlink" title="为已编译安装后的nginx添加模块（如ssl模块）"></a>为已编译安装后的nginx添加模块（如ssl模块）</h1><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li><p><strong>检查现有模块</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -V</span><br></pre></td></tr></table></figure><p>查看已编译模块列表。</p></li><li><p><strong>确定 Nginx 安装目录</strong><br>例如 <code>/usr/local/nginx-1.23.1</code>。</p></li><li><p><strong>重新编译添加模块</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/nginx-1.23.1 --with-http_ssl_module ...（其他模块参数）</span><br><span class="line">make</span><br><span class="line"><span class="comment"># 千万不要 make install，否则会覆盖原有 Nginx</span></span><br></pre></td></tr></table></figure></li><li><p><strong>备份原有 nginx 可执行文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> /usr/local/nginx-1.23.1/sbin/nginx /usr/local/nginx-1.23.1/sbin/nginx_bak</span><br></pre></td></tr></table></figure></li><li><p><strong>用新编译的 nginx 覆盖原有</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> objs/nginx /usr/local/nginx-1.23.1/sbin/</span><br></pre></td></tr></table></figure></li><li><p><strong>重启并验证</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx-1.23.1/sbin/nginx -s stop</span><br><span class="line">/usr/local/nginx-1.23.1/sbin/nginx</span><br><span class="line">nginx -V</span><br></pre></td></tr></table></figure></li></ol><h2 id="经验总结"><a href="#经验总结" class="headerlink" title="经验总结"></a>经验总结</h2><ul><li>添加模块需重新编译，注意备份原有可执行文件。</li><li>不要执行 make install，避免覆盖全部配置。</li><li>检查模块是否生效用 <code>nginx -V</code>。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 维护类 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>维护类-星云系统Hbase集群过期时间设置</title>
      <link href="/posts/2024041406/"/>
      <url>/posts/2024041406/</url>
      
        <content type="html"><![CDATA[<h1 id="星云系统Hbase集群过期时间设置"><a href="#星云系统Hbase集群过期时间设置" class="headerlink" title="星云系统Hbase集群过期时间设置"></a>星云系统Hbase集群过期时间设置</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>HBase 集群磁盘资源紧张，节点因磁盘空间不足导致 DataNode 故障，影响集群稳定性。为节省磁盘空间，需调整大表的过期时间（TTL）。</p><h2 id="排查与处理"><a href="#排查与处理" class="headerlink" title="排查与处理"></a>排查与处理</h2><ol><li><p><strong>观察节点数据变化</strong></p><ul><li>通过 <code>sudo du -s /data/dfs/*</code> 监控各节点数据变化。</li><li>故障节点解除授权时，数据会复制到其他节点，需耐心等待。</li></ul></li><li><p><strong>查看表实际占用</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -<span class="built_in">du</span> -s -h /hbase/data/default/*</span><br></pre></td></tr></table></figure></li><li><p><strong>查看表 TTL 设置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hbase shell</span><br><span class="line">describe <span class="string">&quot;tsdb&quot;</span></span><br><span class="line">describe <span class="string">&quot;itmp_metric&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>调整表 TTL</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter <span class="string">&#x27;tsdb&#x27;</span>, &#123;NAME =&gt; <span class="string">&#x27;t&#x27;</span>, TTL =&gt; 6912000&#125;      <span class="comment"># 90天改为80天</span></span><br><span class="line">alter <span class="string">&#x27;itmp_metric&#x27;</span>, &#123;NAME =&gt; <span class="string">&#x27;metric&#x27;</span>, TTL =&gt; 4320000&#125;  <span class="comment"># 60天改为50天</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="经验教训"><a href="#经验教训" class="headerlink" title="经验教训"></a>经验教训</h2><ul><li>集群资源紧张时，操作需谨慎，优先自动化处理。</li><li>TTL 合理设置可有效节省磁盘空间，提升集群稳定性。</li><li>重要集群操作前需充分评估风险。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 维护类 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Grafana部署</title>
      <link href="/posts/2024041402/"/>
      <url>/posts/2024041402/</url>
      
        <content type="html"><![CDATA[<h1 id="Grafana部署实践"><a href="#Grafana部署实践" class="headerlink" title="Grafana部署实践"></a>Grafana部署实践</h1><h2 id="1-下载-Grafana"><a href="#1-下载-Grafana" class="headerlink" title="1. 下载 Grafana"></a>1. 下载 Grafana</h2><p>前往 <a href="https://grafana.com/grafana/download">Grafana官网</a> 下载适合你系统的版本。</p><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 官网命令</span></span><br><span class="line"><span class="built_in">sudo</span> yum install -y https://dl.grafana.com/enterprise/release/grafana-enterprise-12.0.2-1.x86_64.rpm</span><br></pre></td></tr></table></figure><h2 id="3-启动和停止-Grafana"><a href="#3-启动和停止-Grafana" class="headerlink" title="3. 启动和停止 Grafana"></a>3. 启动和停止 Grafana</h2><ol><li><p><strong>启动</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl start grafana-server</span><br></pre></td></tr></table></figure></li><li><p><strong>停止</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl stop grafana-server</span><br></pre></td></tr></table></figure></li><li><p><strong>重启</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl restart grafana-server</span><br></pre></td></tr></table></figure></li><li><p><strong>开机自启</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> grafana-server</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-访问-Grafana"><a href="#4-访问-Grafana" class="headerlink" title="4. 访问 Grafana"></a>4. 访问 Grafana</h2><p>浏览器访问 <code>http://IP:3000</code>，默认账号密码均为 <code>admin</code>，首次登录需修改密码。</p><h2 id="5-配置数据源"><a href="#5-配置数据源" class="headerlink" title="5. 配置数据源"></a>5. 配置数据源</h2><ol><li>登录 Web UI 后，点击左侧齿轮图标，选择”Data Sources”。</li><li>添加 Prometheus，填写 URL（如 <code>http://localhost:9090</code>），保存即可。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 部署类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Grafana </tag>
            
            <tag> 监控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Prometheus</title>
      <link href="/posts/2024041401/"/>
      <url>/posts/2024041401/</url>
      
        <content type="html"><![CDATA[<h1 id="普罗米修斯部署实践"><a href="#普罗米修斯部署实践" class="headerlink" title="普罗米修斯部署实践"></a>普罗米修斯部署实践</h1><h2 id="1-下载-Prometheus"><a href="#1-下载-Prometheus" class="headerlink" title="1. 下载 Prometheus"></a>1. 下载 Prometheus</h2><p>前往 <a href="https://prometheus.io/download/">Prometheus官网</a> 下载适合你系统的最新稳定版。</p><h2 id="2-安装和配置"><a href="#2-安装和配置" class="headerlink" title="2. 安装和配置"></a>2. 安装和配置</h2><ol><li><p><strong>解压 Prometheus</strong><br>下载后解压到指定目录，例如 <code>/usr/local/prometheus</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf prometheus-*.tar.gz -C /usr/local/</span><br><span class="line"><span class="built_in">mv</span> /usr/local/prometheus-* /usr/local/prometheus</span><br></pre></td></tr></table></figure></li><li><p><strong>创建数据和配置目录</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /data/prometheus</span><br></pre></td></tr></table></figure></li><li><p><strong>编辑配置文件</strong><br>主要配置文件为 <code>prometheus.yml</code>，可根据实际监控目标调整。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">scrape_interval:</span> <span class="string">15s</span></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;prometheus&#x27;</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;localhost:9090&#x27;</span>]</span><br></pre></td></tr></table></figure></li></ol><h2 id="3-启动和停止-Prometheus"><a href="#3-启动和停止-Prometheus" class="headerlink" title="3. 启动和停止 Prometheus"></a>3. 启动和停止 Prometheus</h2><ol><li><p><strong>启动</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/prometheus</span><br><span class="line">./prometheus --config.file=prometheus.yml --storage.tsdb.path=/data/prometheus &amp;</span><br></pre></td></tr></table></figure></li><li><p><strong>停止</strong><br>查找进程并杀掉：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep prometheus</span><br><span class="line"><span class="built_in">kill</span> &lt;pid&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-访问-Prometheus"><a href="#4-访问-Prometheus" class="headerlink" title="4. 访问 Prometheus"></a>4. 访问 Prometheus</h2><p>浏览器访问 <code>http://IP:9090</code>，可看到 Prometheus Web UI。</p><h2 id="5-创建-Systemd-服务"><a href="#5-创建-Systemd-服务" class="headerlink" title="5. 创建 Systemd 服务"></a>5. 创建 Systemd 服务</h2><ol><li><p><strong>创建服务文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /etc/systemd/system/prometheus.service</span><br></pre></td></tr></table></figure></li><li><p><strong>添加内容</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=Prometheus Monitoring</span><br><span class="line"><span class="attr">After</span>=network.target</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Type</span>=simple</span><br><span class="line"><span class="attr">User</span>=root   <span class="comment"># 视情况而定</span></span><br><span class="line"><span class="attr">Group</span>=root  <span class="comment"># 视情况而定</span></span><br><span class="line"><span class="attr">ExecStart</span>=/usr/local/prometheus/prometheus --config.file=/usr/local/prometheus/prometheus.yml --storage.tsdb.path=/data/prometheus</span><br><span class="line"><span class="attr">Restart</span>=always</span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure></li><li><p><strong>重载 systemd 并启动</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl daemon-reload</span><br><span class="line"><span class="built_in">sudo</span> systemctl start prometheus</span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> prometheus</span><br><span class="line">日志：journalctl -u promethus -f</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 部署类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 监控 </tag>
            
            <tag> Prometheus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDK一键安装脚本</title>
      <link href="/posts/699322902/"/>
      <url>/posts/699322902/</url>
      
        <content type="html"><![CDATA[<p>#!&#x2F;bin&#x2F;bash</p><h1 id="JDK一键安装简化脚本"><a href="#JDK一键安装简化脚本" class="headerlink" title="JDK一键安装简化脚本"></a>JDK一键安装简化脚本</h1><h1 id="适用于-jdk-8u231-linux-x64-tar-gz-或-jdk-11-等包"><a href="#适用于-jdk-8u231-linux-x64-tar-gz-或-jdk-11-等包" class="headerlink" title="适用于 jdk-8u231-linux-x64.tar.gz 或 jdk-11* 等包"></a>适用于 jdk-8u231-linux-x64.tar.gz 或 jdk-11* 等包</h1><p>set -e</p><h1 id="1-查找-JDK-包"><a href="#1-查找-JDK-包" class="headerlink" title="1. 查找 JDK 包"></a>1. 查找 JDK 包</h1><p>JDK_PACKAGE&#x3D;$(ls jdk-<em>.tar.gz 2&gt;&#x2F;dev&#x2F;null | head -1)<br>if [[ -z “$JDK_PACKAGE” ]]; then<br>  echo “未找到 JDK 安装包 (jdk-</em>.tar.gz)”<br>  exit 1<br>fi</p><h1 id="2-提取版本号和生成目录名、profile名"><a href="#2-提取版本号和生成目录名、profile名" class="headerlink" title="2. 提取版本号和生成目录名、profile名"></a>2. 提取版本号和生成目录名、profile名</h1><p>if [[ “$JDK_PACKAGE” &#x3D;~ jdk-([0-9]+u[0-9]+) ]]; then<br>  VERSION&#x3D;${BASH_REMATCH[1]}<br>  DIR_NAME&#x3D;”jdk1.${VERSION&#x2F;u&#x2F;.0_}”<br>  PROFILE_NAME&#x3D;”java8.sh”<br>elif [[ “$JDK_PACKAGE” &#x3D;~ jdk-([0-9]+) ]]; then<br>  VERSION&#x3D;${BASH_REMATCH[1]}<br>  DIR_NAME&#x3D;”jdk${VERSION}”<br>  PROFILE_NAME&#x3D;”java${VERSION}.sh”<br>else<br>  echo “无法识别 JDK 版本”<br>  exit 1<br>fi</p><p>INSTALL_DIR&#x3D;”&#x2F;usr&#x2F;local&#x2F;$DIR_NAME”</p><h1 id="3-解压到-usr-local-下"><a href="#3-解压到-usr-local-下" class="headerlink" title="3. 解压到 &#x2F;usr&#x2F;local&#x2F; 下"></a>3. 解压到 &#x2F;usr&#x2F;local&#x2F; 下</h1><p>sudo tar -xzf “$JDK_PACKAGE” -C &#x2F;usr&#x2F;local&#x2F;</p><h1 id="处理解压出来的目录名"><a href="#处理解压出来的目录名" class="headerlink" title="处理解压出来的目录名"></a>处理解压出来的目录名</h1><p>JDK_UNPACKED_DIR&#x3D;$(ls -d &#x2F;usr&#x2F;local&#x2F;jdk* | grep -v “$DIR_NAME” | head -1)<br>if [[ “$JDK_UNPACKED_DIR” !&#x3D; “$INSTALL_DIR” ]]; then<br>  sudo mv “$JDK_UNPACKED_DIR” “$INSTALL_DIR”<br>fi</p><h1 id="4-写环境变量到-etc-profile-d-javaXX-sh"><a href="#4-写环境变量到-etc-profile-d-javaXX-sh" class="headerlink" title="4. 写环境变量到 &#x2F;etc&#x2F;profile.d&#x2F;javaXX.sh"></a>4. 写环境变量到 &#x2F;etc&#x2F;profile.d&#x2F;javaXX.sh</h1><p>sudo tee &#x2F;etc&#x2F;profile.d&#x2F;$PROFILE_NAME &gt; &#x2F;dev&#x2F;null &lt;&lt;EOF<br>export JAVA_HOME&#x3D;$INSTALL_DIR<br>export PATH&#x3D;$JAVA_HOME&#x2F;bin:$PATH<br>EOF</p><h1 id="5-提示"><a href="#5-提示" class="headerlink" title="5. 提示"></a>5. 提示</h1><p>echo “JDK 安装完成: $INSTALL_DIR”<br>echo “请运行: source &#x2F;etc&#x2F;profile.d&#x2F;$PROFILE_NAME 以生效环境变量” </p>]]></content>
      
      
      <categories>
          
          <category> 脚本类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDK </tag>
            
            <tag> 安装脚本 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis一主两从三哨兵</title>
      <link href="/posts/2408993536/"/>
      <url>/posts/2408993536/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis集群部署（含哨兵集群）"><a href="#Redis集群部署（含哨兵集群）" class="headerlink" title="Redis集群部署（含哨兵集群）"></a>Redis集群部署（含哨兵集群）</h1><h2 id="1-环境说明"><a href="#1-环境说明" class="headerlink" title="1. 环境说明"></a>1. 环境说明</h2><ul><li>操作系统：CentOS 7</li><li>Redis版本：6.2.6</li><li>节点规划：</li></ul><table><thead><tr><th>角色</th><th>IP地址</th><th>端口</th><th>说明</th></tr></thead><tbody><tr><td>主节点</td><td>192.168.1.101</td><td>6379</td><td>Redis主服务器</td></tr><tr><td>从节点1</td><td>192.168.1.102</td><td>6379</td><td>Redis从服务器</td></tr><tr><td>从节点2</td><td>192.168.1.103</td><td>6379</td><td>Redis从服务器</td></tr><tr><td>哨兵1</td><td>192.168.1.101</td><td>26379</td><td>哨兵节点1</td></tr><tr><td>哨兵2</td><td>192.168.1.102</td><td>26379</td><td>哨兵节点2</td></tr><tr><td>哨兵3</td><td>192.168.1.103</td><td>26379</td><td>哨兵节点3</td></tr></tbody></table><h2 id="2-安装Redis"><a href="#2-安装Redis" class="headerlink" title="2. 安装Redis"></a>2. 安装Redis</h2><p>在所有节点上执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">yum install -y gcc make tcl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载并解压Redis</span></span><br><span class="line">wget https://download.redis.io/releases/redis-6.2.6.tar.gz</span><br><span class="line">tar xzf redis-6.2.6.tar.gz</span><br><span class="line"><span class="built_in">cd</span> redis-6.2.6</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译安装</span></span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建配置目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /etc/redis</span><br></pre></td></tr></table></figure><h2 id="3-配置主从复制"><a href="#3-配置主从复制" class="headerlink" title="3. 配置主从复制"></a>3. 配置主从复制</h2><h3 id="3-1-主节点配置（192-168-1-101）"><a href="#3-1-主节点配置（192-168-1-101）" class="headerlink" title="3.1 主节点配置（192.168.1.101）"></a>3.1 主节点配置（192.168.1.101）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建主节点配置文件</span></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/redis/redis.conf &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">bind 0.0.0.0</span></span><br><span class="line"><span class="string">port 6379</span></span><br><span class="line"><span class="string">daemonize yes</span></span><br><span class="line"><span class="string">pidfile /var/run/redis_6379.pid</span></span><br><span class="line"><span class="string">logfile /var/log/redis_6379.log</span></span><br><span class="line"><span class="string">dir /var/lib/redis</span></span><br><span class="line"><span class="string">appendonly yes</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /var/lib/redis</span><br></pre></td></tr></table></figure><h3 id="3-2-从节点配置（192-168-1-102和192-168-1-103）"><a href="#3-2-从节点配置（192-168-1-102和192-168-1-103）" class="headerlink" title="3.2 从节点配置（192.168.1.102和192.168.1.103）"></a>3.2 从节点配置（192.168.1.102和192.168.1.103）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建从节点配置文件</span></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/redis/redis.conf &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">bind 0.0.0.0    # 允许所有IP地址访问Redis</span></span><br><span class="line"><span class="string">port 6379</span></span><br><span class="line"><span class="string">daemonize yes   # 以守护进程方式运行Redis</span></span><br><span class="line"><span class="string">pidfile /var/run/redis_6379.pid</span></span><br><span class="line"><span class="string">logfile /var/log/redis_6379.log</span></span><br><span class="line"><span class="string">dir /var/lib/redis</span></span><br><span class="line"><span class="string">appendonly yes</span></span><br><span class="line"><span class="string">replicaof 192.168.1.101 6379</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /var/lib/redis</span><br></pre></td></tr></table></figure><h2 id="4-启动Redis服务"><a href="#4-启动Redis服务" class="headerlink" title="4. 启动Redis服务"></a>4. 启动Redis服务</h2><p>在所有节点上执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动Redis服务</span></span><br><span class="line">redis-server /etc/redis/redis.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查Redis状态</span></span><br><span class="line">redis-cli ping</span><br></pre></td></tr></table></figure><h2 id="5-验证主从复制"><a href="#5-验证主从复制" class="headerlink" title="5. 验证主从复制"></a>5. 验证主从复制</h2><p>在主节点上执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 连接到Redis</span></span><br><span class="line">redis-cli</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看复制信息</span></span><br><span class="line">info replication</span><br></pre></td></tr></table></figure><h2 id="6-配置哨兵模式"><a href="#6-配置哨兵模式" class="headerlink" title="6. 配置哨兵模式"></a>6. 配置哨兵模式</h2><p>在所有节点上创建哨兵配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建哨兵配置文件</span></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/redis/sentinel.conf &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">port 26379</span></span><br><span class="line"><span class="string">daemonize yes</span></span><br><span class="line"><span class="string">pidfile /var/run/redis-sentinel.pid</span></span><br><span class="line"><span class="string">logfile /var/log/redis-sentinel.log</span></span><br><span class="line"><span class="string">dir /var/lib/redis</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">sentinel monitor mymaster 192.168.1.101 6379 2</span></span><br><span class="line"><span class="string">sentinel down-after-milliseconds mymaster 5000</span></span><br><span class="line"><span class="string">sentinel parallel-syncs mymaster 1</span></span><br><span class="line"><span class="string">sentinel failover-timeout mymaster 10000</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><h2 id="7-启动哨兵服务"><a href="#7-启动哨兵服务" class="headerlink" title="7. 启动哨兵服务"></a>7. 启动哨兵服务</h2><p>在所有节点上执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动哨兵服务</span></span><br><span class="line">redis-sentinel /etc/redis/sentinel.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查哨兵状态</span></span><br><span class="line">redis-cli -p 26379</span><br></pre></td></tr></table></figure><h2 id="8-验证哨兵模式"><a href="#8-验证哨兵模式" class="headerlink" title="8. 验证哨兵模式"></a>8. 验证哨兵模式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 连接到任意哨兵节点</span></span><br><span class="line">redis-cli -p 26379</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看哨兵信息</span></span><br><span class="line">sentinel master mymaster</span><br><span class="line">sentinel slaves mymaster</span><br><span class="line">sentinel sentinels mymaster</span><br></pre></td></tr></table></figure><h2 id="9-故障转移测试"><a href="#9-故障转移测试" class="headerlink" title="9. 故障转移测试"></a>9. 故障转移测试</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模拟主节点故障</span></span><br><span class="line">redis-cli -h 192.168.1.101 -p 6379 debug segfault</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待几秒钟后，检查新的主节点</span></span><br><span class="line">redis-cli -p 26379 sentinel master mymaster</span><br></pre></td></tr></table></figure><h2 id="10-注意事项"><a href="#10-注意事项" class="headerlink" title="10. 注意事项"></a>10. 注意事项</h2><ol><li>防火墙配置</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开放Redis端口</span></span><br><span class="line">firewall-cmd --permanent --add-port=6379/tcp</span><br><span class="line"><span class="comment"># 开放哨兵端口</span></span><br><span class="line">firewall-cmd --permanent --add-port=26379/tcp</span><br><span class="line"><span class="comment"># 重新加载防火墙</span></span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><ol start="2"><li><p>安全建议</p><ul><li>设置Redis密码</li><li>限制Redis只监听内网IP</li><li>定期备份数据</li><li>监控Redis内存使用情况</li></ul></li><li><p>性能优化</p><ul><li>根据实际需求调整内存配置</li><li>配置适当的持久化策略</li><li>监控系统资源使用情况</li></ul></li></ol><h2 id="11-常见问题排查"><a href="#11-常见问题排查" class="headerlink" title="11. 常见问题排查"></a>11. 常见问题排查</h2><ol><li><p>主从复制失败</p><ul><li>检查网络连接</li><li>确认防火墙设置</li><li>查看Redis日志</li></ul></li><li><p>哨兵无法选举</p><ul><li>检查哨兵配置</li><li>确认节点间网络连接</li><li>查看哨兵日志</li></ul></li><li><p>性能问题</p><ul><li>检查内存使用情况</li><li>监控网络延迟</li><li>分析慢查询日志</li></ul></li></ol><h2 id="12-维护建议"><a href="#12-维护建议" class="headerlink" title="12. 维护建议"></a>12. 维护建议</h2><ol><li>定期检查Redis状态</li><li>监控内存使用情况</li><li>定期进行数据备份</li><li>保持Redis版本更新</li><li>记录配置变更</li></ol>]]></content>
      
      
      <categories>
          
          <category> 部署类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 集群 </tag>
            
            <tag> Redis </tag>
            
            <tag> 哨兵 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka集群部署</title>
      <link href="/posts/3152750140/"/>
      <url>/posts/3152750140/</url>
      
        <content type="html"><![CDATA[<h1 id="Kafka-集群在-CentOS-7-上的部署实践"><a href="#Kafka-集群在-CentOS-7-上的部署实践" class="headerlink" title="Kafka 集群在 CentOS 7 上的部署实践"></a>Kafka 集群在 CentOS 7 上的部署实践</h1><h2 id="1-机器规划"><a href="#1-机器规划" class="headerlink" title="1. 机器规划"></a>1. 机器规划</h2><p>我们准备用三台 CentOS 7 服务器来部署 Kafka 集群。这些服务器上也会跑 ZooKeeper 实例。</p><table><thead><tr><th>主机IP</th><th>主机名</th><th>部署内容</th></tr></thead><tbody><tr><td>192.168.1.101</td><td>kafka01</td><td>Kafka, ZooKeeper</td></tr><tr><td>192.168.1.102</td><td>kafka02</td><td>Kafka, ZooKeeper</td></tr><tr><td>192.168.1.103</td><td>kafka03</td><td>Kafka, ZooKeeper</td></tr></tbody></table><h2 id="2-环境准备"><a href="#2-环境准备" class="headerlink" title="2. 环境准备"></a>2. 环境准备</h2><ol><li><p><strong>更新系统</strong><br>先更新一下系统软件包，保证最新状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum update -y</span><br></pre></td></tr></table></figure></li><li><p><strong>安装 JDK</strong><br>Kafka 得跑在 Java 环境上。确保每台机器都装了 JDK 8 或者更新的版本。这里我们装 OpenJDK 8：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum install java-1.8.0-openjdk-devel -y</span><br></pre></td></tr></table></figure></li><li><p><strong>关闭防火墙和 SELinux</strong><br>生产环境的话，防火墙和 SELinux 需要根据实际安全策略来配置。部署测试环境，我们直接关掉它们省事。</p><p>关闭防火墙：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl stop firewalld</span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure><p>关闭 SELinux：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> sed -i <span class="string">&#x27;s/SELINUX=enforcing/SELINUX=disabled/&#x27;</span> /etc/selinux/config</span><br><span class="line"><span class="built_in">sudo</span> reboot <span class="comment"># 改完 SELinux 配置得重启机器才生效</span></span><br></pre></td></tr></table></figure></li><li><p><strong>配置 hosts 文件</strong><br>每台机器的 <code>/etc/hosts</code> 文件里，把集群里所有机器的 IP 和主机名都加进去，方便集群内部互相识别：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.1.101 kafka01</span><br><span class="line">192.168.1.102 kafka02</span><br><span class="line">192.168.1.103 kafka03</span><br></pre></td></tr></table></figure></li></ol><h2 id="3-安装-ZooKeeper-Kafka-的依赖"><a href="#3-安装-ZooKeeper-Kafka-的依赖" class="headerlink" title="3. 安装 ZooKeeper (Kafka 的依赖)"></a>3. 安装 ZooKeeper (Kafka 的依赖)</h2><p>虽然新版本的 Kafka 已经能不靠 ZooKeeper 独立运行，但在集群部署里，为了更稳，通常还是会弄个独立的 ZooKeeper 集群。这里我们让 Kafka 节点也顺带跑 ZooKeeper。</p><ol><li><p><strong>下载 ZooKeeper</strong><br>去 <a href="https://zookeeper.apache.org/releases.html">Apache ZooKeeper官网</a> 下个稳定版本，比如 <code>zookeeper-3.4.14.tar.gz</code>。</p></li><li><p><strong>解压 ZooKeeper</strong><br>把下载的压缩包解压到 <code>/usr/local/</code>，然后改个名字：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> tar -zxvf zookeeper-3.4.14.tar.gz -C /usr/local/</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mv</span> /usr/local/zookeeper-3.4.14 /usr/local/zookeeper</span><br></pre></td></tr></table></figure></li><li><p><strong>创建数据目录</strong><br>给 ZooKeeper 建个数据存放目录，并给你的普通用户赋予权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p /data/zookeeper</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chown</span> -R your_user:your_group /data/zookeeper <span class="comment"># 把 &#x27;your_user&#x27; 和 &#x27;your_group&#x27; 换成你自己的用户和组</span></span><br></pre></td></tr></table></figure></li><li><p><strong>配置 ZooKeeper</strong><br>复制 <code>zoo_sample.cfg</code> 文件，然后编辑 <code>zoo.cfg</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> /usr/local/zookeeper/conf/zoo_sample.cfg /usr/local/zookeeper/conf/zoo.cfg</span><br></pre></td></tr></table></figure><p>编辑 <code>zoo.cfg</code>，主要改这些地方：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    <span class="attr">dataDir</span>=/data/zookeeper</span><br><span class="line">    <span class="attr">clientPort</span>=<span class="number">2181</span></span><br><span class="line"><span class="comment"># follower同步leader的时间如果超过initLimit*tickTime=10秒（tickTime默认是2000毫秒）</span></span><br><span class="line">    <span class="attr">initLimit</span>=<span class="number">5</span>  </span><br><span class="line"><span class="comment"># 允许follower和leader不同步的时间为syncLimit*tickTime=4秒(超过4秒，默认这个follower掉队)</span></span><br><span class="line">    <span class="attr">syncLimit</span>=<span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 集群配置</span></span><br><span class="line">    <span class="attr">server.1</span>=kafka01:<span class="number">2888</span>:<span class="number">3888</span></span><br><span class="line">    <span class="attr">server.2</span>=kafka02:<span class="number">2888</span>:<span class="number">3888</span></span><br><span class="line">    <span class="attr">server.3</span>=kafka03:<span class="number">2888</span>:<span class="number">3888</span></span><br></pre></td></tr></table></figure></li><li><p><strong>创建 myid 文件</strong><br>在 <code>/data/zookeeper</code> 目录里建个 <code>myid</code> 文件，文件内容就是 ZooKeeper 节点的 ID (对应 <code>server.X</code> 里的 X)。</p><ul><li>在 <code>kafka01</code> 上执行：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 1 &gt; /data/zookeeper/myid</span><br></pre></td></tr></table></figure></li><li>在 <code>kafka02</code> 上执行：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 2 &gt; /data/zookeeper/myid</span><br></pre></td></tr></table></figure></li><li>在 <code>kafka03</code> 上执行：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 3 &gt; /data/zookeeper/myid</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>启动 ZooKeeper</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/zookeeper/bin/zkServer.sh start</span><br></pre></td></tr></table></figure><p>检查状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/zookeeper/bin/zkServer.sh status</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-安装和配置-Kafka"><a href="#4-安装和配置-Kafka" class="headerlink" title="4. 安装和配置 Kafka"></a>4. 安装和配置 Kafka</h2><ol><li><p><strong>下载 Kafka</strong><br>从 <a href="https://kafka.apache.org/downloads">Apache Kafka官网</a> 下个二进制发行版，比如 <code>kafka_2.12-2.8.1.tgz</code> (注意 Scala 版本要和 Kafka 版本对应)。</p></li><li><p><strong>解压 Kafka</strong><br>把下载的压缩包解压到 <code>/usr/local/</code>，然后改个名字：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> tar -zxvf kafka_2.12-2.8.1.tgz -C /usr/local/</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mv</span> /usr/local/kafka_2.12-2.8.1 /usr/local/kafka</span><br></pre></td></tr></table></figure></li><li><p><strong>创建日志目录</strong><br>给 Kafka 日志建个目录，并给你的普通用户赋权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p /data/kafka-logs</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chown</span> -R your_user:your_group /data/kafka-logs <span class="comment"># 把 &#x27;your_user&#x27; 和 &#x27;your_group&#x27; 换成你自己的用户和组</span></span><br></pre></td></tr></table></figure></li><li><p><strong>配置 Kafka (server.properties)</strong><br>进入 Kafka 的 <code>config</code> 目录：<code>cd /usr/local/kafka/config</code>，然后编辑 <code>server.properties</code> 文件。</p><ul><li><p><strong><code>kafka01</code> 的配置</strong>：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">broker.id</span>=<span class="number">0</span></span><br><span class="line"><span class="attr">listeners</span>=PLAINTEXT://kafka01:<span class="number">9092</span></span><br><span class="line"><span class="attr">log.dirs</span>=/data/kafka-logs</span><br><span class="line"><span class="attr">zookeeper.connect</span>=kafka01:<span class="number">2181</span>,kafka02:<span class="number">2181</span>,kafka03:<span class="number">2181</span></span><br><span class="line"><span class="comment"># 其他配置项可以根据需要调整</span></span><br></pre></td></tr></table></figure></li><li><p><strong><code>kafka02</code> 的配置</strong>：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">broker.id</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">listeners</span>=PLAINTEXT://kafka02:<span class="number">9092</span></span><br><span class="line"><span class="attr">log.dirs</span>=/data/kafka-logs</span><br><span class="line"><span class="attr">zookeeper.connect</span>=kafka01:<span class="number">2181</span>,kafka02:<span class="number">2181</span>,kafka03:<span class="number">2181</span></span><br></pre></td></tr></table></figure></li><li><p><strong><code>kafka03</code> 的配置</strong>：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">broker.id</span>=<span class="number">2</span></span><br><span class="line"><span class="attr">listeners</span>=PLAINTEXT://kafka03:<span class="number">9092</span></span><br><span class="line"><span class="attr">log.dirs</span>=/data/kafka-logs</span><br><span class="line"><span class="attr">zookeeper.connect</span>=kafka01:<span class="number">2181</span>,kafka02:<span class="number">2181</span>,kafka03:<span class="number">2181</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>重要说明</strong>：</p><ul><li><code>broker.id</code>：每个 Kafka 节点都得是独一无二的。</li><li><code>listeners</code>：配置 Kafka 监听的地址和端口，这里用 <code>PLAINTEXT://主机名:端口</code>。</li><li><code>log.dirs</code>：Kafka 日志放哪儿。</li><li><code>zookeeper.connect</code>：所有 ZooKeeper 节点的地址和端口。</li></ul></li></ol><h2 id="5-启动-Kafka"><a href="#5-启动-Kafka" class="headerlink" title="5. 启动 Kafka"></a>5. 启动 Kafka</h2><p>在每台 Kafka 节点上，进到 Kafka 的根目录，然后执行这个命令启动 Kafka：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/kafka/bin/kafka-server-start.sh /usr/local/kafka/config/server.properties &amp;</span><br></pre></td></tr></table></figure><p>加个 <code>&amp;</code> 让 Kafka 在后台运行。</p><h2 id="6-测试-Kafka-集群"><a href="#6-测试-Kafka-集群" class="headerlink" title="6. 测试 Kafka 集群"></a>6. 测试 Kafka 集群</h2><p>随便挑集群里一台机器来测试。</p><ol><li><p><strong>创建 Topic</strong><br>建个叫 <code>test_topic</code> 的 Topic，3 个分区，2 个副本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/kafka/bin/kafka-topics.sh --create --topic test_topic --bootstrap-server kafka01:9092,kafka02:9092,kafka03:9092 --partitions 3 --replication-factor 2</span><br></pre></td></tr></table></figure></li><li><p><strong>查看 Topic 列表</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/kafka/bin/kafka-topics.sh --list --bootstrap-server kafka01:9092</span><br></pre></td></tr></table></figure></li><li><p><strong>生产消息</strong><br>开个生产者终端，发消息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/kafka/bin/kafka-console-producer.sh --broker-list kafka01:9092,kafka02:9092,kafka03:9092 --topic test_topic</span><br></pre></td></tr></table></figure><p>输完消息回车就发出去了。</p></li><li><p><strong>消费消息</strong><br>开个消费者终端，收消息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/kafka/bin/kafka-console-consumer.sh --bootstrap-server kafka01:9092,kafka02:9092,kafka03:9092 --topic test_topic --from-beginning</span><br></pre></td></tr></table></figure><p><code>--from-beginning</code> 表示从 Topic 最开始把所有消息都读一遍。</p></li></ol><h2 id="7-创建-Systemd-服务-可选"><a href="#7-创建-Systemd-服务-可选" class="headerlink" title="7. 创建 Systemd 服务 (可选)"></a>7. 创建 Systemd 服务 (可选)</h2><p>为了方便用 <code>systemctl</code> 管理 Kafka，可以搞个服务文件。</p><ol><li><p><strong>创建 Kafka 服务文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /etc/systemd/system/kafka.service</span><br></pre></td></tr></table></figure></li><li><p><strong>添加以下内容</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=Apache Kafka Server</span><br><span class="line"><span class="attr">After</span>=network.target zookeeper.service <span class="comment"># ZooKeeper服务一定要先启，后启kakfa</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Type</span>=simple</span><br><span class="line"><span class="attr">User</span>=your_user <span class="comment"># 换成你运行 Kafka 的用户</span></span><br><span class="line"><span class="attr">Group</span>=your_group <span class="comment"># 换成你运行 Kafka 的用户组</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Environment</span>=<span class="string">&quot;JAVA_HOME=/usr/local/jdk1.8.0_231&quot;</span> <span class="comment"># 换成你的 JDK 路径</span></span><br><span class="line"><span class="attr">ExecStart</span>=/usr/local/kafka/bin/kafka-server-start.sh /usr/local/kafka/config/server.properties</span><br><span class="line"><span class="attr">ExecStop</span>=/usr/local/kafka/bin/kafka-server-stop.sh</span><br><span class="line"><span class="attr">Restart</span>=always</span><br><span class="line"><span class="attr">RestartSec</span>=<span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure></li><li><p><strong>创建 ZooKeeper 服务文件 (如果需要)</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /etc/systemd/system/zookeeper.service</span><br></pre></td></tr></table></figure><p>加这些内容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=Apache ZooKeeper Server</span><br><span class="line"><span class="attr">After</span>=network.target</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Type</span>=forking</span><br><span class="line"><span class="attr">User</span>=your_user <span class="comment"># 换成你运行 ZooKeeper 的用户</span></span><br><span class="line"><span class="attr">Group</span>=your_group <span class="comment"># 换成你运行 ZooKeeper 的用户组</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Environment</span>=<span class="string">&quot;JAVA_HOME=/usr/local/jdk1.8.0_231&quot;</span> <span class="comment"># 换成你的 JDK 路径</span></span><br><span class="line"><span class="attr">ExecStart</span>=/usr/local/zookeeper/bin/zkServer.sh start</span><br><span class="line"><span class="attr">ExecStop</span>=/usr/local/zookeeper/bin/zkServer.sh stop</span><br><span class="line"><span class="attr">Restart</span>=always</span><br><span class="line"><span class="attr">RestartSec</span>=<span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure></li><li><p><strong>重新加载 systemd 配置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl daemon-reload</span><br></pre></td></tr></table></figure></li><li><p><strong>管理 Kafka 服务</strong></p><ul><li>启动 Kafka：<code>sudo systemctl start kafka</code></li><li>停止 Kafka：<code>sudo systemctl stop kafka</code></li><li>重启 Kafka：<code>sudo systemctl restart kafka</code></li><li>查看状态：<code>sudo systemctl status kafka</code></li><li>设为开机自启动：<code>sudo systemctl enable kafka</code></li></ul></li><li><p><strong>管理 ZooKeeper 服务</strong></p><ul><li>启动 ZooKeeper：<code>sudo systemctl start zookeeper</code></li><li>停止 ZooKeeper：<code>sudo systemctl stop zookeeper</code></li><li>重启 ZooKeeper：<code>sudo systemctl restart zookeeper</code></li><li>查看状态：<code>sudo systemctl status zookeeper</code></li><li>设为开机自启动：<code>sudo systemctl enable zookeeper</code></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 部署类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kafka </tag>
            
            <tag> 集群 </tag>
            
            <tag> CentOS7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat部署</title>
      <link href="/posts/1433327308/"/>
      <url>/posts/1433327308/</url>
      
        <content type="html"><![CDATA[<h1 id="Tomcat部署实践"><a href="#Tomcat部署实践" class="headerlink" title="Tomcat部署实践"></a>Tomcat部署实践</h1><h2 id="1-下载-Tomcat"><a href="#1-下载-Tomcat" class="headerlink" title="1. 下载 Tomcat"></a>1. 下载 Tomcat</h2><p>去 <a href="https://tomcat.apache.org/">Apache Tomcat官网</a> 下载适合你 Linux 系统的最新稳定版 Tomcat。</p><h2 id="2-安装和配置"><a href="#2-安装和配置" class="headerlink" title="2. 安装和配置"></a>2. 安装和配置</h2><ol><li><p><strong>解压 Tomcat</strong><br>把下载的 <code>.tar.gz</code> 文件解压到你想要安装的目录，比如 <code>/usr/local/tomcat</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> tar -zxvf apache-tomcat-x.x.x.tar.gz -C /usr/local/</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mv</span> /usr/local/apache-tomcat-x.x.x /usr/local/tomcat</span><br></pre></td></tr></table></figure></li><li><p><strong>配置环境变量 (可选)</strong><br>编辑 <code>~/.bashrc</code> 或 <code>~/.bash_profile</code> 或<code>/etc/profile.d/tomcat.sh</code>文件，加入 <code>CATALINA_HOME</code> 环境变量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> CATALINA_HOME=<span class="string">&quot;/usr/local/tomcat&quot;</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$CATALINA_HOME</span>/bin</span><br></pre></td></tr></table></figure><p>然后执行 <code>source ~/.bashrc</code> 让它生效。</p></li><li><p><strong>配置管理用户 (可选)</strong><br>编辑 <code>conf/tomcat-users.xml</code> 文件，添加管理用户。这步主要是为了能通过网页管理 Tomcat。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ... existing code ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;manager-gui&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;admin-gui&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">username</span>=<span class="string">&quot;admin&quot;</span> <span class="attr">password</span>=<span class="string">&quot;你的密码&quot;</span> <span class="attr">roles</span>=<span class="string">&quot;manager-gui,admin-gui&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ... existing code ... --&gt;</span></span><br></pre></td></tr></table></figure><p>把 <code>你的密码</code> 换成你自己的密码。</p></li></ol><h2 id="3-启动和停止-Tomcat"><a href="#3-启动和停止-Tomcat" class="headerlink" title="3. 启动和停止 Tomcat"></a>3. 启动和停止 Tomcat</h2><ol><li><p><strong>启动</strong><br>进入 <code>bin</code> 目录，运行 <code>startup.sh</code> 脚本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/tomcat/bin</span><br><span class="line">./startup.sh</span><br></pre></td></tr></table></figure></li><li><p><strong>停止</strong><br>进入 <code>bin</code> 目录，运行 <code>shutdown.sh</code> 脚本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/tomcat/bin</span><br><span class="line">./shutdown.sh</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-访问-Tomcat"><a href="#4-访问-Tomcat" class="headerlink" title="4. 访问 Tomcat"></a>4. 访问 Tomcat</h2><p>在浏览器里打开 <code>http://IP:8080</code> (如果你没改默认端口的话)，你应该能看到 Tomcat 的欢迎页面。<br>需要修改html页面：cd &#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;webapps&#x2F;ROOT  （找index.html或index.jsp），格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;IP&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;192.168.131.67&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="5-创建-Systemd-服务"><a href="#5-创建-Systemd-服务" class="headerlink" title="5. 创建 Systemd 服务"></a>5. 创建 Systemd 服务</h2><p>为了用 <code>systemctl</code> 命令管理 Tomcat，我们可以搞一个 <code>systemd</code> 服务单元文件。</p><ol><li><p><strong>创建服务文件</strong><br>用 <code>vim</code> 或者其他编辑器创建 <code>/etc/systemd/system/tomcat.service</code> 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /etc/systemd/system/tomcat.service</span><br></pre></td></tr></table></figure></li><li><p><strong>添加以下内容</strong><br>把下面这些内容复制粘贴到 <code>tomcat.service</code> 文件里。记得根据你的实际安装路径和用户改一下。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=Apache Tomcat Web Application Server</span><br><span class="line"><span class="attr">After</span>=network.target</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Type</span>=forking</span><br><span class="line"><span class="attr">User</span>=admin <span class="comment"># 换成你运行 Tomcat 的用户，比如 tomcat 或者 admin</span></span><br><span class="line"><span class="attr">Group</span>=admin <span class="comment"># 换成你运行 Tomcat 的用户组，比如 tomcat 或者 admin</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Environment</span>=<span class="string">&quot;JAVA_HOME=/usr/local/jdk1.8.0_231&quot;</span> <span class="comment"># 换成你的 JDK 安装路径</span></span><br><span class="line"><span class="attr">Environment</span>=<span class="string">&quot;CATALINA_HOME=/usr/local/tomcat&quot;</span> <span class="comment"># 换成你的 Tomcat 安装路径</span></span><br><span class="line"><span class="attr">Environment</span>=<span class="string">&quot;CATALINA_BASE=/usr/local/tomcat&quot;</span></span><br><span class="line"><span class="attr">Environment</span>=<span class="string">&quot;CATALINA_PID=/usr/local/tomcat/temp/tomcat.pid&quot;</span> <span class="comment"># 指定 PID 文件路径</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ExecStart</span>=/usr/local/tomcat/bin/startup.sh</span><br><span class="line"><span class="attr">ExecStop</span>=/usr/local/tomcat/bin/shutdown.sh</span><br><span class="line"></span><br><span class="line"><span class="attr">PrivateTmp</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">Restart</span>=always</span><br><span class="line"><span class="attr">RestartSec</span>=<span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ul><li><code>User</code> 和 <code>Group</code> 要设成运行 Tomcat 的用户和组，比如 <code>admin</code>。</li><li><code>Environment=&quot;JAVA_HOME=...&quot;</code> 和 <code>Environment=&quot;CATALINA_HOME=...&quot;</code> 一定要换成你的 JDK 和 Tomcat 实际安装路径。</li></ul></li><li><p><strong>重新加载 systemd 配置</strong><br>创建或者修改服务文件后，需要重新加载 <code>systemd</code> 配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl daemon-reload</span><br></pre></td></tr></table></figure></li><li><p><strong>启动、停止、重启和查看状态</strong><br>现在，你就可以用 <code>systemctl</code> 命令来管理 Tomcat 了：</p><ul><li>启动 Tomcat：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl start tomcat</span><br></pre></td></tr></table></figure></li><li>停止 Tomcat：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl stop tomcat</span><br></pre></td></tr></table></figure></li><li>重启 Tomcat：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl restart tomcat</span><br></pre></td></tr></table></figure></li><li>查看 Tomcat 状态：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl status tomcat</span><br></pre></td></tr></table></figure></li><li>设为开机自启动：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> tomcat</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 部署类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
